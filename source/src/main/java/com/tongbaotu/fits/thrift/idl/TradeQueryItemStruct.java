/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tongbaotu.fits.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TradeQueryItemStruct implements org.apache.thrift.TBase<TradeQueryItemStruct, TradeQueryItemStruct._Fields>, java.io.Serializable, Cloneable, Comparable<TradeQueryItemStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TradeQueryItemStruct");

  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVEST_SPECIAL_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("invest_special_account", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SERIALNO_FIELD_DESC = new org.apache.thrift.protocol.TField("serialno", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCTID_FIELD_DESC = new org.apache.thrift.protocol.TField("productid", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DISCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("discount", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField PHYTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("phytime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PROCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("procode", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PROMESS_FIELD_DESC = new org.apache.thrift.protocol.TField("promess", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TradeQueryItemStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TradeQueryItemStructTupleSchemeFactory());
  }

  public String investorID; // required
  public String invest_special_account; // required
  public String serialno; // required
  public String productid; // required
  public double amount; // required
  public int type; // required
  public double discount; // required
  public double quantity; // required
  public String phytime; // required
  public int procode; // required
  public String promess; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INVESTOR_ID((short)1, "investorID"),
    INVEST_SPECIAL_ACCOUNT((short)2, "invest_special_account"),
    SERIALNO((short)3, "serialno"),
    PRODUCTID((short)4, "productid"),
    AMOUNT((short)5, "amount"),
    TYPE((short)6, "type"),
    DISCOUNT((short)7, "discount"),
    QUANTITY((short)8, "quantity"),
    PHYTIME((short)9, "phytime"),
    PROCODE((short)10, "procode"),
    PROMESS((short)11, "promess");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INVESTOR_ID
          return INVESTOR_ID;
        case 2: // INVEST_SPECIAL_ACCOUNT
          return INVEST_SPECIAL_ACCOUNT;
        case 3: // SERIALNO
          return SERIALNO;
        case 4: // PRODUCTID
          return PRODUCTID;
        case 5: // AMOUNT
          return AMOUNT;
        case 6: // TYPE
          return TYPE;
        case 7: // DISCOUNT
          return DISCOUNT;
        case 8: // QUANTITY
          return QUANTITY;
        case 9: // PHYTIME
          return PHYTIME;
        case 10: // PROCODE
          return PROCODE;
        case 11: // PROMESS
          return PROMESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AMOUNT_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __DISCOUNT_ISSET_ID = 2;
  private static final int __QUANTITY_ISSET_ID = 3;
  private static final int __PROCODE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVEST_SPECIAL_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("invest_special_account", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERIALNO, new org.apache.thrift.meta_data.FieldMetaData("serialno", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCTID, new org.apache.thrift.meta_data.FieldMetaData("productid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISCOUNT, new org.apache.thrift.meta_data.FieldMetaData("discount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PHYTIME, new org.apache.thrift.meta_data.FieldMetaData("phytime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCODE, new org.apache.thrift.meta_data.FieldMetaData("procode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROMESS, new org.apache.thrift.meta_data.FieldMetaData("promess", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TradeQueryItemStruct.class, metaDataMap);
  }

  public TradeQueryItemStruct() {
  }

  public TradeQueryItemStruct(
    String investorID,
    String invest_special_account,
    String serialno,
    String productid,
    double amount,
    int type,
    double discount,
    double quantity,
    String phytime,
    int procode,
    String promess)
  {
    this();
    this.investorID = investorID;
    this.invest_special_account = invest_special_account;
    this.serialno = serialno;
    this.productid = productid;
    this.amount = amount;
    setAmountIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.discount = discount;
    setDiscountIsSet(true);
    this.quantity = quantity;
    setQuantityIsSet(true);
    this.phytime = phytime;
    this.procode = procode;
    setProcodeIsSet(true);
    this.promess = promess;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TradeQueryItemStruct(TradeQueryItemStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    if (other.isSetInvest_special_account()) {
      this.invest_special_account = other.invest_special_account;
    }
    if (other.isSetSerialno()) {
      this.serialno = other.serialno;
    }
    if (other.isSetProductid()) {
      this.productid = other.productid;
    }
    this.amount = other.amount;
    this.type = other.type;
    this.discount = other.discount;
    this.quantity = other.quantity;
    if (other.isSetPhytime()) {
      this.phytime = other.phytime;
    }
    this.procode = other.procode;
    if (other.isSetPromess()) {
      this.promess = other.promess;
    }
  }

  public TradeQueryItemStruct deepCopy() {
    return new TradeQueryItemStruct(this);
  }

  @Override
  public void clear() {
    this.investorID = null;
    this.invest_special_account = null;
    this.serialno = null;
    this.productid = null;
    setAmountIsSet(false);
    this.amount = 0.0;
    setTypeIsSet(false);
    this.type = 0;
    setDiscountIsSet(false);
    this.discount = 0.0;
    setQuantityIsSet(false);
    this.quantity = 0.0;
    this.phytime = null;
    setProcodeIsSet(false);
    this.procode = 0;
    this.promess = null;
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public TradeQueryItemStruct setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public String getInvest_special_account() {
    return this.invest_special_account;
  }

  public TradeQueryItemStruct setInvest_special_account(String invest_special_account) {
    this.invest_special_account = invest_special_account;
    return this;
  }

  public void unsetInvest_special_account() {
    this.invest_special_account = null;
  }

  /** Returns true if field invest_special_account is set (has been assigned a value) and false otherwise */
  public boolean isSetInvest_special_account() {
    return this.invest_special_account != null;
  }

  public void setInvest_special_accountIsSet(boolean value) {
    if (!value) {
      this.invest_special_account = null;
    }
  }

  public String getSerialno() {
    return this.serialno;
  }

  public TradeQueryItemStruct setSerialno(String serialno) {
    this.serialno = serialno;
    return this;
  }

  public void unsetSerialno() {
    this.serialno = null;
  }

  /** Returns true if field serialno is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialno() {
    return this.serialno != null;
  }

  public void setSerialnoIsSet(boolean value) {
    if (!value) {
      this.serialno = null;
    }
  }

  public String getProductid() {
    return this.productid;
  }

  public TradeQueryItemStruct setProductid(String productid) {
    this.productid = productid;
    return this;
  }

  public void unsetProductid() {
    this.productid = null;
  }

  /** Returns true if field productid is set (has been assigned a value) and false otherwise */
  public boolean isSetProductid() {
    return this.productid != null;
  }

  public void setProductidIsSet(boolean value) {
    if (!value) {
      this.productid = null;
    }
  }

  public double getAmount() {
    return this.amount;
  }

  public TradeQueryItemStruct setAmount(double amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public TradeQueryItemStruct setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public double getDiscount() {
    return this.discount;
  }

  public TradeQueryItemStruct setDiscount(double discount) {
    this.discount = discount;
    setDiscountIsSet(true);
    return this;
  }

  public void unsetDiscount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  /** Returns true if field discount is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscount() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  public void setDiscountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCOUNT_ISSET_ID, value);
  }

  public double getQuantity() {
    return this.quantity;
  }

  public TradeQueryItemStruct setQuantity(double quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  public String getPhytime() {
    return this.phytime;
  }

  public TradeQueryItemStruct setPhytime(String phytime) {
    this.phytime = phytime;
    return this;
  }

  public void unsetPhytime() {
    this.phytime = null;
  }

  /** Returns true if field phytime is set (has been assigned a value) and false otherwise */
  public boolean isSetPhytime() {
    return this.phytime != null;
  }

  public void setPhytimeIsSet(boolean value) {
    if (!value) {
      this.phytime = null;
    }
  }

  public int getProcode() {
    return this.procode;
  }

  public TradeQueryItemStruct setProcode(int procode) {
    this.procode = procode;
    setProcodeIsSet(true);
    return this;
  }

  public void unsetProcode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROCODE_ISSET_ID);
  }

  /** Returns true if field procode is set (has been assigned a value) and false otherwise */
  public boolean isSetProcode() {
    return EncodingUtils.testBit(__isset_bitfield, __PROCODE_ISSET_ID);
  }

  public void setProcodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROCODE_ISSET_ID, value);
  }

  public String getPromess() {
    return this.promess;
  }

  public TradeQueryItemStruct setPromess(String promess) {
    this.promess = promess;
    return this;
  }

  public void unsetPromess() {
    this.promess = null;
  }

  /** Returns true if field promess is set (has been assigned a value) and false otherwise */
  public boolean isSetPromess() {
    return this.promess != null;
  }

  public void setPromessIsSet(boolean value) {
    if (!value) {
      this.promess = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case INVEST_SPECIAL_ACCOUNT:
      if (value == null) {
        unsetInvest_special_account();
      } else {
        setInvest_special_account((String)value);
      }
      break;

    case SERIALNO:
      if (value == null) {
        unsetSerialno();
      } else {
        setSerialno((String)value);
      }
      break;

    case PRODUCTID:
      if (value == null) {
        unsetProductid();
      } else {
        setProductid((String)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Double)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case DISCOUNT:
      if (value == null) {
        unsetDiscount();
      } else {
        setDiscount((Double)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Double)value);
      }
      break;

    case PHYTIME:
      if (value == null) {
        unsetPhytime();
      } else {
        setPhytime((String)value);
      }
      break;

    case PROCODE:
      if (value == null) {
        unsetProcode();
      } else {
        setProcode((Integer)value);
      }
      break;

    case PROMESS:
      if (value == null) {
        unsetPromess();
      } else {
        setPromess((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INVESTOR_ID:
      return getInvestorID();

    case INVEST_SPECIAL_ACCOUNT:
      return getInvest_special_account();

    case SERIALNO:
      return getSerialno();

    case PRODUCTID:
      return getProductid();

    case AMOUNT:
      return Double.valueOf(getAmount());

    case TYPE:
      return Integer.valueOf(getType());

    case DISCOUNT:
      return Double.valueOf(getDiscount());

    case QUANTITY:
      return Double.valueOf(getQuantity());

    case PHYTIME:
      return getPhytime();

    case PROCODE:
      return Integer.valueOf(getProcode());

    case PROMESS:
      return getPromess();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INVESTOR_ID:
      return isSetInvestorID();
    case INVEST_SPECIAL_ACCOUNT:
      return isSetInvest_special_account();
    case SERIALNO:
      return isSetSerialno();
    case PRODUCTID:
      return isSetProductid();
    case AMOUNT:
      return isSetAmount();
    case TYPE:
      return isSetType();
    case DISCOUNT:
      return isSetDiscount();
    case QUANTITY:
      return isSetQuantity();
    case PHYTIME:
      return isSetPhytime();
    case PROCODE:
      return isSetProcode();
    case PROMESS:
      return isSetPromess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TradeQueryItemStruct)
      return this.equals((TradeQueryItemStruct)that);
    return false;
  }

  public boolean equals(TradeQueryItemStruct that) {
    if (that == null)
      return false;

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_invest_special_account = true && this.isSetInvest_special_account();
    boolean that_present_invest_special_account = true && that.isSetInvest_special_account();
    if (this_present_invest_special_account || that_present_invest_special_account) {
      if (!(this_present_invest_special_account && that_present_invest_special_account))
        return false;
      if (!this.invest_special_account.equals(that.invest_special_account))
        return false;
    }

    boolean this_present_serialno = true && this.isSetSerialno();
    boolean that_present_serialno = true && that.isSetSerialno();
    if (this_present_serialno || that_present_serialno) {
      if (!(this_present_serialno && that_present_serialno))
        return false;
      if (!this.serialno.equals(that.serialno))
        return false;
    }

    boolean this_present_productid = true && this.isSetProductid();
    boolean that_present_productid = true && that.isSetProductid();
    if (this_present_productid || that_present_productid) {
      if (!(this_present_productid && that_present_productid))
        return false;
      if (!this.productid.equals(that.productid))
        return false;
    }

    boolean this_present_amount = true;
    boolean that_present_amount = true;
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_discount = true;
    boolean that_present_discount = true;
    if (this_present_discount || that_present_discount) {
      if (!(this_present_discount && that_present_discount))
        return false;
      if (this.discount != that.discount)
        return false;
    }

    boolean this_present_quantity = true;
    boolean that_present_quantity = true;
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_phytime = true && this.isSetPhytime();
    boolean that_present_phytime = true && that.isSetPhytime();
    if (this_present_phytime || that_present_phytime) {
      if (!(this_present_phytime && that_present_phytime))
        return false;
      if (!this.phytime.equals(that.phytime))
        return false;
    }

    boolean this_present_procode = true;
    boolean that_present_procode = true;
    if (this_present_procode || that_present_procode) {
      if (!(this_present_procode && that_present_procode))
        return false;
      if (this.procode != that.procode)
        return false;
    }

    boolean this_present_promess = true && this.isSetPromess();
    boolean that_present_promess = true && that.isSetPromess();
    if (this_present_promess || that_present_promess) {
      if (!(this_present_promess && that_present_promess))
        return false;
      if (!this.promess.equals(that.promess))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TradeQueryItemStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvest_special_account()).compareTo(other.isSetInvest_special_account());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvest_special_account()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invest_special_account, other.invest_special_account);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialno()).compareTo(other.isSetSerialno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialno, other.serialno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductid()).compareTo(other.isSetProductid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productid, other.productid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscount()).compareTo(other.isSetDiscount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discount, other.discount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhytime()).compareTo(other.isSetPhytime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhytime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phytime, other.phytime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcode()).compareTo(other.isSetProcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.procode, other.procode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPromess()).compareTo(other.isSetPromess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPromess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.promess, other.promess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TradeQueryItemStruct(");
    boolean first = true;

    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invest_special_account:");
    if (this.invest_special_account == null) {
      sb.append("null");
    } else {
      sb.append(this.invest_special_account);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serialno:");
    if (this.serialno == null) {
      sb.append("null");
    } else {
      sb.append(this.serialno);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productid:");
    if (this.productid == null) {
      sb.append("null");
    } else {
      sb.append(this.productid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    sb.append(this.amount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("discount:");
    sb.append(this.discount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantity:");
    sb.append(this.quantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("phytime:");
    if (this.phytime == null) {
      sb.append("null");
    } else {
      sb.append(this.phytime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("procode:");
    sb.append(this.procode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("promess:");
    if (this.promess == null) {
      sb.append("null");
    } else {
      sb.append(this.promess);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (investorID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'investorID' was not present! Struct: " + toString());
    }
    if (invest_special_account == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'invest_special_account' was not present! Struct: " + toString());
    }
    if (serialno == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serialno' was not present! Struct: " + toString());
    }
    if (productid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'productid' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'amount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'type' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'discount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'quantity' because it's a primitive and you chose the non-beans generator.
    if (phytime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'phytime' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'procode' because it's a primitive and you chose the non-beans generator.
    if (promess == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'promess' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TradeQueryItemStructStandardSchemeFactory implements SchemeFactory {
    public TradeQueryItemStructStandardScheme getScheme() {
      return new TradeQueryItemStructStandardScheme();
    }
  }

  private static class TradeQueryItemStructStandardScheme extends StandardScheme<TradeQueryItemStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TradeQueryItemStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVEST_SPECIAL_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.invest_special_account = iprot.readString();
              struct.setInvest_special_accountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERIALNO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serialno = iprot.readString();
              struct.setSerialnoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRODUCTID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productid = iprot.readString();
              struct.setProductidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amount = iprot.readDouble();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DISCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.discount = iprot.readDouble();
              struct.setDiscountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.quantity = iprot.readDouble();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PHYTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phytime = iprot.readString();
              struct.setPhytimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.procode = iprot.readI32();
              struct.setProcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PROMESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.promess = iprot.readString();
              struct.setPromessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'amount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDiscount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'discount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetQuantity()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'quantity' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetProcode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'procode' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TradeQueryItemStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      if (struct.invest_special_account != null) {
        oprot.writeFieldBegin(INVEST_SPECIAL_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.invest_special_account);
        oprot.writeFieldEnd();
      }
      if (struct.serialno != null) {
        oprot.writeFieldBegin(SERIALNO_FIELD_DESC);
        oprot.writeString(struct.serialno);
        oprot.writeFieldEnd();
      }
      if (struct.productid != null) {
        oprot.writeFieldBegin(PRODUCTID_FIELD_DESC);
        oprot.writeString(struct.productid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.amount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISCOUNT_FIELD_DESC);
      oprot.writeDouble(struct.discount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
      oprot.writeDouble(struct.quantity);
      oprot.writeFieldEnd();
      if (struct.phytime != null) {
        oprot.writeFieldBegin(PHYTIME_FIELD_DESC);
        oprot.writeString(struct.phytime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROCODE_FIELD_DESC);
      oprot.writeI32(struct.procode);
      oprot.writeFieldEnd();
      if (struct.promess != null) {
        oprot.writeFieldBegin(PROMESS_FIELD_DESC);
        oprot.writeString(struct.promess);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TradeQueryItemStructTupleSchemeFactory implements SchemeFactory {
    public TradeQueryItemStructTupleScheme getScheme() {
      return new TradeQueryItemStructTupleScheme();
    }
  }

  private static class TradeQueryItemStructTupleScheme extends TupleScheme<TradeQueryItemStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TradeQueryItemStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.investorID);
      oprot.writeString(struct.invest_special_account);
      oprot.writeString(struct.serialno);
      oprot.writeString(struct.productid);
      oprot.writeDouble(struct.amount);
      oprot.writeI32(struct.type);
      oprot.writeDouble(struct.discount);
      oprot.writeDouble(struct.quantity);
      oprot.writeString(struct.phytime);
      oprot.writeI32(struct.procode);
      oprot.writeString(struct.promess);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TradeQueryItemStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.investorID = iprot.readString();
      struct.setInvestorIDIsSet(true);
      struct.invest_special_account = iprot.readString();
      struct.setInvest_special_accountIsSet(true);
      struct.serialno = iprot.readString();
      struct.setSerialnoIsSet(true);
      struct.productid = iprot.readString();
      struct.setProductidIsSet(true);
      struct.amount = iprot.readDouble();
      struct.setAmountIsSet(true);
      struct.type = iprot.readI32();
      struct.setTypeIsSet(true);
      struct.discount = iprot.readDouble();
      struct.setDiscountIsSet(true);
      struct.quantity = iprot.readDouble();
      struct.setQuantityIsSet(true);
      struct.phytime = iprot.readString();
      struct.setPhytimeIsSet(true);
      struct.procode = iprot.readI32();
      struct.setProcodeIsSet(true);
      struct.promess = iprot.readString();
      struct.setPromessIsSet(true);
    }
  }

}

