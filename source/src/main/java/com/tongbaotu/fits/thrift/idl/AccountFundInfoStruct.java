/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tongbaotu.fits.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AccountFundInfoStruct implements org.apache.thrift.TBase<AccountFundInfoStruct, AccountFundInfoStruct._Fields>, java.io.Serializable, Cloneable, Comparable<AccountFundInfoStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AccountFundInfoStruct");

  private static final org.apache.thrift.protocol.TField ACCOUNTFUNDID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountfundid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CURBALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("curbalance", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField VALIDBALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("validbalance", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField FROZENFUND_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenfund", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField NOTCOLLECTEDFUND_FIELD_DESC = new org.apache.thrift.protocol.TField("notcollectedfund", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AccountFundInfoStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AccountFundInfoStructTupleSchemeFactory());
  }

  public String accountfundid; // required
  public double curbalance; // required
  public double validbalance; // required
  public double frozenfund; // required
  public double notcollectedfund; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCOUNTFUNDID((short)1, "accountfundid"),
    CURBALANCE((short)2, "curbalance"),
    VALIDBALANCE((short)3, "validbalance"),
    FROZENFUND((short)4, "frozenfund"),
    NOTCOLLECTEDFUND((short)5, "notcollectedfund");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCOUNTFUNDID
          return ACCOUNTFUNDID;
        case 2: // CURBALANCE
          return CURBALANCE;
        case 3: // VALIDBALANCE
          return VALIDBALANCE;
        case 4: // FROZENFUND
          return FROZENFUND;
        case 5: // NOTCOLLECTEDFUND
          return NOTCOLLECTEDFUND;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURBALANCE_ISSET_ID = 0;
  private static final int __VALIDBALANCE_ISSET_ID = 1;
  private static final int __FROZENFUND_ISSET_ID = 2;
  private static final int __NOTCOLLECTEDFUND_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCOUNTFUNDID, new org.apache.thrift.meta_data.FieldMetaData("accountfundid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURBALANCE, new org.apache.thrift.meta_data.FieldMetaData("curbalance", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VALIDBALANCE, new org.apache.thrift.meta_data.FieldMetaData("validbalance", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZENFUND, new org.apache.thrift.meta_data.FieldMetaData("frozenfund", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOTCOLLECTEDFUND, new org.apache.thrift.meta_data.FieldMetaData("notcollectedfund", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AccountFundInfoStruct.class, metaDataMap);
  }

  public AccountFundInfoStruct() {
  }

  public AccountFundInfoStruct(
    String accountfundid,
    double curbalance,
    double validbalance,
    double frozenfund,
    double notcollectedfund)
  {
    this();
    this.accountfundid = accountfundid;
    this.curbalance = curbalance;
    setCurbalanceIsSet(true);
    this.validbalance = validbalance;
    setValidbalanceIsSet(true);
    this.frozenfund = frozenfund;
    setFrozenfundIsSet(true);
    this.notcollectedfund = notcollectedfund;
    setNotcollectedfundIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AccountFundInfoStruct(AccountFundInfoStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAccountfundid()) {
      this.accountfundid = other.accountfundid;
    }
    this.curbalance = other.curbalance;
    this.validbalance = other.validbalance;
    this.frozenfund = other.frozenfund;
    this.notcollectedfund = other.notcollectedfund;
  }

  public AccountFundInfoStruct deepCopy() {
    return new AccountFundInfoStruct(this);
  }

  @Override
  public void clear() {
    this.accountfundid = null;
    setCurbalanceIsSet(false);
    this.curbalance = 0.0;
    setValidbalanceIsSet(false);
    this.validbalance = 0.0;
    setFrozenfundIsSet(false);
    this.frozenfund = 0.0;
    setNotcollectedfundIsSet(false);
    this.notcollectedfund = 0.0;
  }

  public String getAccountfundid() {
    return this.accountfundid;
  }

  public AccountFundInfoStruct setAccountfundid(String accountfundid) {
    this.accountfundid = accountfundid;
    return this;
  }

  public void unsetAccountfundid() {
    this.accountfundid = null;
  }

  /** Returns true if field accountfundid is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountfundid() {
    return this.accountfundid != null;
  }

  public void setAccountfundidIsSet(boolean value) {
    if (!value) {
      this.accountfundid = null;
    }
  }

  public double getCurbalance() {
    return this.curbalance;
  }

  public AccountFundInfoStruct setCurbalance(double curbalance) {
    this.curbalance = curbalance;
    setCurbalanceIsSet(true);
    return this;
  }

  public void unsetCurbalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURBALANCE_ISSET_ID);
  }

  /** Returns true if field curbalance is set (has been assigned a value) and false otherwise */
  public boolean isSetCurbalance() {
    return EncodingUtils.testBit(__isset_bitfield, __CURBALANCE_ISSET_ID);
  }

  public void setCurbalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURBALANCE_ISSET_ID, value);
  }

  public double getValidbalance() {
    return this.validbalance;
  }

  public AccountFundInfoStruct setValidbalance(double validbalance) {
    this.validbalance = validbalance;
    setValidbalanceIsSet(true);
    return this;
  }

  public void unsetValidbalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALIDBALANCE_ISSET_ID);
  }

  /** Returns true if field validbalance is set (has been assigned a value) and false otherwise */
  public boolean isSetValidbalance() {
    return EncodingUtils.testBit(__isset_bitfield, __VALIDBALANCE_ISSET_ID);
  }

  public void setValidbalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALIDBALANCE_ISSET_ID, value);
  }

  public double getFrozenfund() {
    return this.frozenfund;
  }

  public AccountFundInfoStruct setFrozenfund(double frozenfund) {
    this.frozenfund = frozenfund;
    setFrozenfundIsSet(true);
    return this;
  }

  public void unsetFrozenfund() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENFUND_ISSET_ID);
  }

  /** Returns true if field frozenfund is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenfund() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENFUND_ISSET_ID);
  }

  public void setFrozenfundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENFUND_ISSET_ID, value);
  }

  public double getNotcollectedfund() {
    return this.notcollectedfund;
  }

  public AccountFundInfoStruct setNotcollectedfund(double notcollectedfund) {
    this.notcollectedfund = notcollectedfund;
    setNotcollectedfundIsSet(true);
    return this;
  }

  public void unsetNotcollectedfund() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTCOLLECTEDFUND_ISSET_ID);
  }

  /** Returns true if field notcollectedfund is set (has been assigned a value) and false otherwise */
  public boolean isSetNotcollectedfund() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTCOLLECTEDFUND_ISSET_ID);
  }

  public void setNotcollectedfundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTCOLLECTEDFUND_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCOUNTFUNDID:
      if (value == null) {
        unsetAccountfundid();
      } else {
        setAccountfundid((String)value);
      }
      break;

    case CURBALANCE:
      if (value == null) {
        unsetCurbalance();
      } else {
        setCurbalance((Double)value);
      }
      break;

    case VALIDBALANCE:
      if (value == null) {
        unsetValidbalance();
      } else {
        setValidbalance((Double)value);
      }
      break;

    case FROZENFUND:
      if (value == null) {
        unsetFrozenfund();
      } else {
        setFrozenfund((Double)value);
      }
      break;

    case NOTCOLLECTEDFUND:
      if (value == null) {
        unsetNotcollectedfund();
      } else {
        setNotcollectedfund((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCOUNTFUNDID:
      return getAccountfundid();

    case CURBALANCE:
      return Double.valueOf(getCurbalance());

    case VALIDBALANCE:
      return Double.valueOf(getValidbalance());

    case FROZENFUND:
      return Double.valueOf(getFrozenfund());

    case NOTCOLLECTEDFUND:
      return Double.valueOf(getNotcollectedfund());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCOUNTFUNDID:
      return isSetAccountfundid();
    case CURBALANCE:
      return isSetCurbalance();
    case VALIDBALANCE:
      return isSetValidbalance();
    case FROZENFUND:
      return isSetFrozenfund();
    case NOTCOLLECTEDFUND:
      return isSetNotcollectedfund();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AccountFundInfoStruct)
      return this.equals((AccountFundInfoStruct)that);
    return false;
  }

  public boolean equals(AccountFundInfoStruct that) {
    if (that == null)
      return false;

    boolean this_present_accountfundid = true && this.isSetAccountfundid();
    boolean that_present_accountfundid = true && that.isSetAccountfundid();
    if (this_present_accountfundid || that_present_accountfundid) {
      if (!(this_present_accountfundid && that_present_accountfundid))
        return false;
      if (!this.accountfundid.equals(that.accountfundid))
        return false;
    }

    boolean this_present_curbalance = true;
    boolean that_present_curbalance = true;
    if (this_present_curbalance || that_present_curbalance) {
      if (!(this_present_curbalance && that_present_curbalance))
        return false;
      if (this.curbalance != that.curbalance)
        return false;
    }

    boolean this_present_validbalance = true;
    boolean that_present_validbalance = true;
    if (this_present_validbalance || that_present_validbalance) {
      if (!(this_present_validbalance && that_present_validbalance))
        return false;
      if (this.validbalance != that.validbalance)
        return false;
    }

    boolean this_present_frozenfund = true;
    boolean that_present_frozenfund = true;
    if (this_present_frozenfund || that_present_frozenfund) {
      if (!(this_present_frozenfund && that_present_frozenfund))
        return false;
      if (this.frozenfund != that.frozenfund)
        return false;
    }

    boolean this_present_notcollectedfund = true;
    boolean that_present_notcollectedfund = true;
    if (this_present_notcollectedfund || that_present_notcollectedfund) {
      if (!(this_present_notcollectedfund && that_present_notcollectedfund))
        return false;
      if (this.notcollectedfund != that.notcollectedfund)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(AccountFundInfoStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAccountfundid()).compareTo(other.isSetAccountfundid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountfundid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountfundid, other.accountfundid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurbalance()).compareTo(other.isSetCurbalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurbalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curbalance, other.curbalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidbalance()).compareTo(other.isSetValidbalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidbalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validbalance, other.validbalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenfund()).compareTo(other.isSetFrozenfund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenfund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenfund, other.frozenfund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotcollectedfund()).compareTo(other.isSetNotcollectedfund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotcollectedfund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notcollectedfund, other.notcollectedfund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AccountFundInfoStruct(");
    boolean first = true;

    sb.append("accountfundid:");
    if (this.accountfundid == null) {
      sb.append("null");
    } else {
      sb.append(this.accountfundid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("curbalance:");
    sb.append(this.curbalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("validbalance:");
    sb.append(this.validbalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frozenfund:");
    sb.append(this.frozenfund);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notcollectedfund:");
    sb.append(this.notcollectedfund);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (accountfundid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountfundid' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'curbalance' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'validbalance' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'frozenfund' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'notcollectedfund' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AccountFundInfoStructStandardSchemeFactory implements SchemeFactory {
    public AccountFundInfoStructStandardScheme getScheme() {
      return new AccountFundInfoStructStandardScheme();
    }
  }

  private static class AccountFundInfoStructStandardScheme extends StandardScheme<AccountFundInfoStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AccountFundInfoStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCOUNTFUNDID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountfundid = iprot.readString();
              struct.setAccountfundidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURBALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.curbalance = iprot.readDouble();
              struct.setCurbalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALIDBALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.validbalance = iprot.readDouble();
              struct.setValidbalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FROZENFUND
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenfund = iprot.readDouble();
              struct.setFrozenfundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NOTCOLLECTEDFUND
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.notcollectedfund = iprot.readDouble();
              struct.setNotcollectedfundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCurbalance()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'curbalance' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetValidbalance()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'validbalance' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFrozenfund()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'frozenfund' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNotcollectedfund()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'notcollectedfund' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AccountFundInfoStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.accountfundid != null) {
        oprot.writeFieldBegin(ACCOUNTFUNDID_FIELD_DESC);
        oprot.writeString(struct.accountfundid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURBALANCE_FIELD_DESC);
      oprot.writeDouble(struct.curbalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALIDBALANCE_FIELD_DESC);
      oprot.writeDouble(struct.validbalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROZENFUND_FIELD_DESC);
      oprot.writeDouble(struct.frozenfund);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTCOLLECTEDFUND_FIELD_DESC);
      oprot.writeDouble(struct.notcollectedfund);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AccountFundInfoStructTupleSchemeFactory implements SchemeFactory {
    public AccountFundInfoStructTupleScheme getScheme() {
      return new AccountFundInfoStructTupleScheme();
    }
  }

  private static class AccountFundInfoStructTupleScheme extends TupleScheme<AccountFundInfoStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AccountFundInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.accountfundid);
      oprot.writeDouble(struct.curbalance);
      oprot.writeDouble(struct.validbalance);
      oprot.writeDouble(struct.frozenfund);
      oprot.writeDouble(struct.notcollectedfund);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AccountFundInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.accountfundid = iprot.readString();
      struct.setAccountfundidIsSet(true);
      struct.curbalance = iprot.readDouble();
      struct.setCurbalanceIsSet(true);
      struct.validbalance = iprot.readDouble();
      struct.setValidbalanceIsSet(true);
      struct.frozenfund = iprot.readDouble();
      struct.setFrozenfundIsSet(true);
      struct.notcollectedfund = iprot.readDouble();
      struct.setNotcollectedfundIsSet(true);
    }
  }

}

