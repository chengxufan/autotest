/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tongbaotu.fits.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProductInfoStruct implements org.apache.thrift.TBase<ProductInfoStruct, ProductInfoStruct._Fields>, java.io.Serializable, Cloneable, Comparable<ProductInfoStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductInfoStruct");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CALCULATIONEARN_FIELD_DESC = new org.apache.thrift.protocol.TField("calculationearn", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TARGET_RATE_FORMULA_FIELD_DESC = new org.apache.thrift.protocol.TField("target_rate_formula", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ASSET_MANAGER_FIELD_DESC = new org.apache.thrift.protocol.TField("assetManager", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ASSET_TRUSTEE_FIELD_DESC = new org.apache.thrift.protocol.TField("assetTrustee", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ISSUBANKID_FIELD_DESC = new org.apache.thrift.protocol.TField("issubankid", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField RISK_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("risk_level", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TARGET_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("target_rate", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField RAISE_UPPER_FIELD_DESC = new org.apache.thrift.protocol.TField("raise_upper", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField RAISE_LOW_FIELD_DESC = new org.apache.thrift.protocol.TField("raise_low", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField INVESTMENT_UPPER_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("investment_upper_limit", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField INVESTMENT_LOW_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("investment_low_limit", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField MAX_RAISE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("max_raise_number", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField LAUNCH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("launch_date", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField RAISE_START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("raise_start_date", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField RAISE_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("raise_end_date", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField VALUE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("value_date", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField DUE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("due_date", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField RECKON_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("reckon_date", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField EXPECTED_PAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("expected_payment_date", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField PRODUCT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("productStatus", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductInfoStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductInfoStructTupleSchemeFactory());
  }

  public String name; // required
  public int type; // required
  public int calculationearn; // required
  public int target_rate_formula; // required
  public String assetManager; // required
  public String assetTrustee; // required
  public String issubankid; // required
  public int currency; // required
  public int risk_level; // required
  public double target_rate; // required
  public double raise_upper; // required
  public double raise_low; // required
  public double investment_upper_limit; // required
  public double investment_low_limit; // required
  public int max_raise_number; // required
  public int launch_date; // required
  public int raise_start_date; // required
  public int raise_end_date; // required
  public int value_date; // required
  public int due_date; // required
  public int reckon_date; // required
  public int expected_payment_date; // required
  public int productStatus; // required
  public String id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    TYPE((short)2, "type"),
    CALCULATIONEARN((short)3, "calculationearn"),
    TARGET_RATE_FORMULA((short)4, "target_rate_formula"),
    ASSET_MANAGER((short)5, "assetManager"),
    ASSET_TRUSTEE((short)6, "assetTrustee"),
    ISSUBANKID((short)7, "issubankid"),
    CURRENCY((short)8, "currency"),
    RISK_LEVEL((short)9, "risk_level"),
    TARGET_RATE((short)10, "target_rate"),
    RAISE_UPPER((short)11, "raise_upper"),
    RAISE_LOW((short)12, "raise_low"),
    INVESTMENT_UPPER_LIMIT((short)13, "investment_upper_limit"),
    INVESTMENT_LOW_LIMIT((short)14, "investment_low_limit"),
    MAX_RAISE_NUMBER((short)15, "max_raise_number"),
    LAUNCH_DATE((short)16, "launch_date"),
    RAISE_START_DATE((short)17, "raise_start_date"),
    RAISE_END_DATE((short)18, "raise_end_date"),
    VALUE_DATE((short)19, "value_date"),
    DUE_DATE((short)20, "due_date"),
    RECKON_DATE((short)21, "reckon_date"),
    EXPECTED_PAYMENT_DATE((short)22, "expected_payment_date"),
    PRODUCT_STATUS((short)23, "productStatus"),
    ID((short)24, "id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // TYPE
          return TYPE;
        case 3: // CALCULATIONEARN
          return CALCULATIONEARN;
        case 4: // TARGET_RATE_FORMULA
          return TARGET_RATE_FORMULA;
        case 5: // ASSET_MANAGER
          return ASSET_MANAGER;
        case 6: // ASSET_TRUSTEE
          return ASSET_TRUSTEE;
        case 7: // ISSUBANKID
          return ISSUBANKID;
        case 8: // CURRENCY
          return CURRENCY;
        case 9: // RISK_LEVEL
          return RISK_LEVEL;
        case 10: // TARGET_RATE
          return TARGET_RATE;
        case 11: // RAISE_UPPER
          return RAISE_UPPER;
        case 12: // RAISE_LOW
          return RAISE_LOW;
        case 13: // INVESTMENT_UPPER_LIMIT
          return INVESTMENT_UPPER_LIMIT;
        case 14: // INVESTMENT_LOW_LIMIT
          return INVESTMENT_LOW_LIMIT;
        case 15: // MAX_RAISE_NUMBER
          return MAX_RAISE_NUMBER;
        case 16: // LAUNCH_DATE
          return LAUNCH_DATE;
        case 17: // RAISE_START_DATE
          return RAISE_START_DATE;
        case 18: // RAISE_END_DATE
          return RAISE_END_DATE;
        case 19: // VALUE_DATE
          return VALUE_DATE;
        case 20: // DUE_DATE
          return DUE_DATE;
        case 21: // RECKON_DATE
          return RECKON_DATE;
        case 22: // EXPECTED_PAYMENT_DATE
          return EXPECTED_PAYMENT_DATE;
        case 23: // PRODUCT_STATUS
          return PRODUCT_STATUS;
        case 24: // ID
          return ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private static final int __CALCULATIONEARN_ISSET_ID = 1;
  private static final int __TARGET_RATE_FORMULA_ISSET_ID = 2;
  private static final int __CURRENCY_ISSET_ID = 3;
  private static final int __RISK_LEVEL_ISSET_ID = 4;
  private static final int __TARGET_RATE_ISSET_ID = 5;
  private static final int __RAISE_UPPER_ISSET_ID = 6;
  private static final int __RAISE_LOW_ISSET_ID = 7;
  private static final int __INVESTMENT_UPPER_LIMIT_ISSET_ID = 8;
  private static final int __INVESTMENT_LOW_LIMIT_ISSET_ID = 9;
  private static final int __MAX_RAISE_NUMBER_ISSET_ID = 10;
  private static final int __LAUNCH_DATE_ISSET_ID = 11;
  private static final int __RAISE_START_DATE_ISSET_ID = 12;
  private static final int __RAISE_END_DATE_ISSET_ID = 13;
  private static final int __VALUE_DATE_ISSET_ID = 14;
  private static final int __DUE_DATE_ISSET_ID = 15;
  private static final int __RECKON_DATE_ISSET_ID = 16;
  private static final int __EXPECTED_PAYMENT_DATE_ISSET_ID = 17;
  private static final int __PRODUCTSTATUS_ISSET_ID = 18;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CALCULATIONEARN, new org.apache.thrift.meta_data.FieldMetaData("calculationearn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TARGET_RATE_FORMULA, new org.apache.thrift.meta_data.FieldMetaData("target_rate_formula", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASSET_MANAGER, new org.apache.thrift.meta_data.FieldMetaData("assetManager", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSET_TRUSTEE, new org.apache.thrift.meta_data.FieldMetaData("assetTrustee", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSUBANKID, new org.apache.thrift.meta_data.FieldMetaData("issubankid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RISK_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("risk_level", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TARGET_RATE, new org.apache.thrift.meta_data.FieldMetaData("target_rate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RAISE_UPPER, new org.apache.thrift.meta_data.FieldMetaData("raise_upper", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RAISE_LOW, new org.apache.thrift.meta_data.FieldMetaData("raise_low", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INVESTMENT_UPPER_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("investment_upper_limit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INVESTMENT_LOW_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("investment_low_limit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_RAISE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("max_raise_number", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAUNCH_DATE, new org.apache.thrift.meta_data.FieldMetaData("launch_date", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RAISE_START_DATE, new org.apache.thrift.meta_data.FieldMetaData("raise_start_date", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RAISE_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("raise_end_date", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VALUE_DATE, new org.apache.thrift.meta_data.FieldMetaData("value_date", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DUE_DATE, new org.apache.thrift.meta_data.FieldMetaData("due_date", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECKON_DATE, new org.apache.thrift.meta_data.FieldMetaData("reckon_date", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPECTED_PAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("expected_payment_date", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("productStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductInfoStruct.class, metaDataMap);
  }

  public ProductInfoStruct() {
  }

  public ProductInfoStruct(
    String name,
    int type,
    int calculationearn,
    int target_rate_formula,
    String assetManager,
    String assetTrustee,
    String issubankid,
    int currency,
    int risk_level,
    double target_rate,
    double raise_upper,
    double raise_low,
    double investment_upper_limit,
    double investment_low_limit,
    int max_raise_number,
    int launch_date,
    int raise_start_date,
    int raise_end_date,
    int value_date,
    int due_date,
    int reckon_date,
    int expected_payment_date,
    int productStatus,
    String id)
  {
    this();
    this.name = name;
    this.type = type;
    setTypeIsSet(true);
    this.calculationearn = calculationearn;
    setCalculationearnIsSet(true);
    this.target_rate_formula = target_rate_formula;
    setTarget_rate_formulaIsSet(true);
    this.assetManager = assetManager;
    this.assetTrustee = assetTrustee;
    this.issubankid = issubankid;
    this.currency = currency;
    setCurrencyIsSet(true);
    this.risk_level = risk_level;
    setRisk_levelIsSet(true);
    this.target_rate = target_rate;
    setTarget_rateIsSet(true);
    this.raise_upper = raise_upper;
    setRaise_upperIsSet(true);
    this.raise_low = raise_low;
    setRaise_lowIsSet(true);
    this.investment_upper_limit = investment_upper_limit;
    setInvestment_upper_limitIsSet(true);
    this.investment_low_limit = investment_low_limit;
    setInvestment_low_limitIsSet(true);
    this.max_raise_number = max_raise_number;
    setMax_raise_numberIsSet(true);
    this.launch_date = launch_date;
    setLaunch_dateIsSet(true);
    this.raise_start_date = raise_start_date;
    setRaise_start_dateIsSet(true);
    this.raise_end_date = raise_end_date;
    setRaise_end_dateIsSet(true);
    this.value_date = value_date;
    setValue_dateIsSet(true);
    this.due_date = due_date;
    setDue_dateIsSet(true);
    this.reckon_date = reckon_date;
    setReckon_dateIsSet(true);
    this.expected_payment_date = expected_payment_date;
    setExpected_payment_dateIsSet(true);
    this.productStatus = productStatus;
    setProductStatusIsSet(true);
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductInfoStruct(ProductInfoStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.type = other.type;
    this.calculationearn = other.calculationearn;
    this.target_rate_formula = other.target_rate_formula;
    if (other.isSetAssetManager()) {
      this.assetManager = other.assetManager;
    }
    if (other.isSetAssetTrustee()) {
      this.assetTrustee = other.assetTrustee;
    }
    if (other.isSetIssubankid()) {
      this.issubankid = other.issubankid;
    }
    this.currency = other.currency;
    this.risk_level = other.risk_level;
    this.target_rate = other.target_rate;
    this.raise_upper = other.raise_upper;
    this.raise_low = other.raise_low;
    this.investment_upper_limit = other.investment_upper_limit;
    this.investment_low_limit = other.investment_low_limit;
    this.max_raise_number = other.max_raise_number;
    this.launch_date = other.launch_date;
    this.raise_start_date = other.raise_start_date;
    this.raise_end_date = other.raise_end_date;
    this.value_date = other.value_date;
    this.due_date = other.due_date;
    this.reckon_date = other.reckon_date;
    this.expected_payment_date = other.expected_payment_date;
    this.productStatus = other.productStatus;
    if (other.isSetId()) {
      this.id = other.id;
    }
  }

  public ProductInfoStruct deepCopy() {
    return new ProductInfoStruct(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setTypeIsSet(false);
    this.type = 0;
    setCalculationearnIsSet(false);
    this.calculationearn = 0;
    setTarget_rate_formulaIsSet(false);
    this.target_rate_formula = 0;
    this.assetManager = null;
    this.assetTrustee = null;
    this.issubankid = null;
    setCurrencyIsSet(false);
    this.currency = 0;
    setRisk_levelIsSet(false);
    this.risk_level = 0;
    setTarget_rateIsSet(false);
    this.target_rate = 0.0;
    setRaise_upperIsSet(false);
    this.raise_upper = 0.0;
    setRaise_lowIsSet(false);
    this.raise_low = 0.0;
    setInvestment_upper_limitIsSet(false);
    this.investment_upper_limit = 0.0;
    setInvestment_low_limitIsSet(false);
    this.investment_low_limit = 0.0;
    setMax_raise_numberIsSet(false);
    this.max_raise_number = 0;
    setLaunch_dateIsSet(false);
    this.launch_date = 0;
    setRaise_start_dateIsSet(false);
    this.raise_start_date = 0;
    setRaise_end_dateIsSet(false);
    this.raise_end_date = 0;
    setValue_dateIsSet(false);
    this.value_date = 0;
    setDue_dateIsSet(false);
    this.due_date = 0;
    setReckon_dateIsSet(false);
    this.reckon_date = 0;
    setExpected_payment_dateIsSet(false);
    this.expected_payment_date = 0;
    setProductStatusIsSet(false);
    this.productStatus = 0;
    this.id = null;
  }

  public String getName() {
    return this.name;
  }

  public ProductInfoStruct setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public ProductInfoStruct setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getCalculationearn() {
    return this.calculationearn;
  }

  public ProductInfoStruct setCalculationearn(int calculationearn) {
    this.calculationearn = calculationearn;
    setCalculationearnIsSet(true);
    return this;
  }

  public void unsetCalculationearn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CALCULATIONEARN_ISSET_ID);
  }

  /** Returns true if field calculationearn is set (has been assigned a value) and false otherwise */
  public boolean isSetCalculationearn() {
    return EncodingUtils.testBit(__isset_bitfield, __CALCULATIONEARN_ISSET_ID);
  }

  public void setCalculationearnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CALCULATIONEARN_ISSET_ID, value);
  }

  public int getTarget_rate_formula() {
    return this.target_rate_formula;
  }

  public ProductInfoStruct setTarget_rate_formula(int target_rate_formula) {
    this.target_rate_formula = target_rate_formula;
    setTarget_rate_formulaIsSet(true);
    return this;
  }

  public void unsetTarget_rate_formula() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGET_RATE_FORMULA_ISSET_ID);
  }

  /** Returns true if field target_rate_formula is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget_rate_formula() {
    return EncodingUtils.testBit(__isset_bitfield, __TARGET_RATE_FORMULA_ISSET_ID);
  }

  public void setTarget_rate_formulaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGET_RATE_FORMULA_ISSET_ID, value);
  }

  public String getAssetManager() {
    return this.assetManager;
  }

  public ProductInfoStruct setAssetManager(String assetManager) {
    this.assetManager = assetManager;
    return this;
  }

  public void unsetAssetManager() {
    this.assetManager = null;
  }

  /** Returns true if field assetManager is set (has been assigned a value) and false otherwise */
  public boolean isSetAssetManager() {
    return this.assetManager != null;
  }

  public void setAssetManagerIsSet(boolean value) {
    if (!value) {
      this.assetManager = null;
    }
  }

  public String getAssetTrustee() {
    return this.assetTrustee;
  }

  public ProductInfoStruct setAssetTrustee(String assetTrustee) {
    this.assetTrustee = assetTrustee;
    return this;
  }

  public void unsetAssetTrustee() {
    this.assetTrustee = null;
  }

  /** Returns true if field assetTrustee is set (has been assigned a value) and false otherwise */
  public boolean isSetAssetTrustee() {
    return this.assetTrustee != null;
  }

  public void setAssetTrusteeIsSet(boolean value) {
    if (!value) {
      this.assetTrustee = null;
    }
  }

  public String getIssubankid() {
    return this.issubankid;
  }

  public ProductInfoStruct setIssubankid(String issubankid) {
    this.issubankid = issubankid;
    return this;
  }

  public void unsetIssubankid() {
    this.issubankid = null;
  }

  /** Returns true if field issubankid is set (has been assigned a value) and false otherwise */
  public boolean isSetIssubankid() {
    return this.issubankid != null;
  }

  public void setIssubankidIsSet(boolean value) {
    if (!value) {
      this.issubankid = null;
    }
  }

  public int getCurrency() {
    return this.currency;
  }

  public ProductInfoStruct setCurrency(int currency) {
    this.currency = currency;
    setCurrencyIsSet(true);
    return this;
  }

  public void unsetCurrency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENCY_ISSET_ID);
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENCY_ISSET_ID);
  }

  public void setCurrencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENCY_ISSET_ID, value);
  }

  public int getRisk_level() {
    return this.risk_level;
  }

  public ProductInfoStruct setRisk_level(int risk_level) {
    this.risk_level = risk_level;
    setRisk_levelIsSet(true);
    return this;
  }

  public void unsetRisk_level() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RISK_LEVEL_ISSET_ID);
  }

  /** Returns true if field risk_level is set (has been assigned a value) and false otherwise */
  public boolean isSetRisk_level() {
    return EncodingUtils.testBit(__isset_bitfield, __RISK_LEVEL_ISSET_ID);
  }

  public void setRisk_levelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RISK_LEVEL_ISSET_ID, value);
  }

  public double getTarget_rate() {
    return this.target_rate;
  }

  public ProductInfoStruct setTarget_rate(double target_rate) {
    this.target_rate = target_rate;
    setTarget_rateIsSet(true);
    return this;
  }

  public void unsetTarget_rate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGET_RATE_ISSET_ID);
  }

  /** Returns true if field target_rate is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget_rate() {
    return EncodingUtils.testBit(__isset_bitfield, __TARGET_RATE_ISSET_ID);
  }

  public void setTarget_rateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGET_RATE_ISSET_ID, value);
  }

  public double getRaise_upper() {
    return this.raise_upper;
  }

  public ProductInfoStruct setRaise_upper(double raise_upper) {
    this.raise_upper = raise_upper;
    setRaise_upperIsSet(true);
    return this;
  }

  public void unsetRaise_upper() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RAISE_UPPER_ISSET_ID);
  }

  /** Returns true if field raise_upper is set (has been assigned a value) and false otherwise */
  public boolean isSetRaise_upper() {
    return EncodingUtils.testBit(__isset_bitfield, __RAISE_UPPER_ISSET_ID);
  }

  public void setRaise_upperIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RAISE_UPPER_ISSET_ID, value);
  }

  public double getRaise_low() {
    return this.raise_low;
  }

  public ProductInfoStruct setRaise_low(double raise_low) {
    this.raise_low = raise_low;
    setRaise_lowIsSet(true);
    return this;
  }

  public void unsetRaise_low() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RAISE_LOW_ISSET_ID);
  }

  /** Returns true if field raise_low is set (has been assigned a value) and false otherwise */
  public boolean isSetRaise_low() {
    return EncodingUtils.testBit(__isset_bitfield, __RAISE_LOW_ISSET_ID);
  }

  public void setRaise_lowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RAISE_LOW_ISSET_ID, value);
  }

  public double getInvestment_upper_limit() {
    return this.investment_upper_limit;
  }

  public ProductInfoStruct setInvestment_upper_limit(double investment_upper_limit) {
    this.investment_upper_limit = investment_upper_limit;
    setInvestment_upper_limitIsSet(true);
    return this;
  }

  public void unsetInvestment_upper_limit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVESTMENT_UPPER_LIMIT_ISSET_ID);
  }

  /** Returns true if field investment_upper_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestment_upper_limit() {
    return EncodingUtils.testBit(__isset_bitfield, __INVESTMENT_UPPER_LIMIT_ISSET_ID);
  }

  public void setInvestment_upper_limitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVESTMENT_UPPER_LIMIT_ISSET_ID, value);
  }

  public double getInvestment_low_limit() {
    return this.investment_low_limit;
  }

  public ProductInfoStruct setInvestment_low_limit(double investment_low_limit) {
    this.investment_low_limit = investment_low_limit;
    setInvestment_low_limitIsSet(true);
    return this;
  }

  public void unsetInvestment_low_limit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVESTMENT_LOW_LIMIT_ISSET_ID);
  }

  /** Returns true if field investment_low_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestment_low_limit() {
    return EncodingUtils.testBit(__isset_bitfield, __INVESTMENT_LOW_LIMIT_ISSET_ID);
  }

  public void setInvestment_low_limitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVESTMENT_LOW_LIMIT_ISSET_ID, value);
  }

  public int getMax_raise_number() {
    return this.max_raise_number;
  }

  public ProductInfoStruct setMax_raise_number(int max_raise_number) {
    this.max_raise_number = max_raise_number;
    setMax_raise_numberIsSet(true);
    return this;
  }

  public void unsetMax_raise_number() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_RAISE_NUMBER_ISSET_ID);
  }

  /** Returns true if field max_raise_number is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_raise_number() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_RAISE_NUMBER_ISSET_ID);
  }

  public void setMax_raise_numberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_RAISE_NUMBER_ISSET_ID, value);
  }

  public int getLaunch_date() {
    return this.launch_date;
  }

  public ProductInfoStruct setLaunch_date(int launch_date) {
    this.launch_date = launch_date;
    setLaunch_dateIsSet(true);
    return this;
  }

  public void unsetLaunch_date() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAUNCH_DATE_ISSET_ID);
  }

  /** Returns true if field launch_date is set (has been assigned a value) and false otherwise */
  public boolean isSetLaunch_date() {
    return EncodingUtils.testBit(__isset_bitfield, __LAUNCH_DATE_ISSET_ID);
  }

  public void setLaunch_dateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAUNCH_DATE_ISSET_ID, value);
  }

  public int getRaise_start_date() {
    return this.raise_start_date;
  }

  public ProductInfoStruct setRaise_start_date(int raise_start_date) {
    this.raise_start_date = raise_start_date;
    setRaise_start_dateIsSet(true);
    return this;
  }

  public void unsetRaise_start_date() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RAISE_START_DATE_ISSET_ID);
  }

  /** Returns true if field raise_start_date is set (has been assigned a value) and false otherwise */
  public boolean isSetRaise_start_date() {
    return EncodingUtils.testBit(__isset_bitfield, __RAISE_START_DATE_ISSET_ID);
  }

  public void setRaise_start_dateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RAISE_START_DATE_ISSET_ID, value);
  }

  public int getRaise_end_date() {
    return this.raise_end_date;
  }

  public ProductInfoStruct setRaise_end_date(int raise_end_date) {
    this.raise_end_date = raise_end_date;
    setRaise_end_dateIsSet(true);
    return this;
  }

  public void unsetRaise_end_date() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RAISE_END_DATE_ISSET_ID);
  }

  /** Returns true if field raise_end_date is set (has been assigned a value) and false otherwise */
  public boolean isSetRaise_end_date() {
    return EncodingUtils.testBit(__isset_bitfield, __RAISE_END_DATE_ISSET_ID);
  }

  public void setRaise_end_dateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RAISE_END_DATE_ISSET_ID, value);
  }

  public int getValue_date() {
    return this.value_date;
  }

  public ProductInfoStruct setValue_date(int value_date) {
    this.value_date = value_date;
    setValue_dateIsSet(true);
    return this;
  }

  public void unsetValue_date() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_DATE_ISSET_ID);
  }

  /** Returns true if field value_date is set (has been assigned a value) and false otherwise */
  public boolean isSetValue_date() {
    return EncodingUtils.testBit(__isset_bitfield, __VALUE_DATE_ISSET_ID);
  }

  public void setValue_dateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_DATE_ISSET_ID, value);
  }

  public int getDue_date() {
    return this.due_date;
  }

  public ProductInfoStruct setDue_date(int due_date) {
    this.due_date = due_date;
    setDue_dateIsSet(true);
    return this;
  }

  public void unsetDue_date() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUE_DATE_ISSET_ID);
  }

  /** Returns true if field due_date is set (has been assigned a value) and false otherwise */
  public boolean isSetDue_date() {
    return EncodingUtils.testBit(__isset_bitfield, __DUE_DATE_ISSET_ID);
  }

  public void setDue_dateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUE_DATE_ISSET_ID, value);
  }

  public int getReckon_date() {
    return this.reckon_date;
  }

  public ProductInfoStruct setReckon_date(int reckon_date) {
    this.reckon_date = reckon_date;
    setReckon_dateIsSet(true);
    return this;
  }

  public void unsetReckon_date() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECKON_DATE_ISSET_ID);
  }

  /** Returns true if field reckon_date is set (has been assigned a value) and false otherwise */
  public boolean isSetReckon_date() {
    return EncodingUtils.testBit(__isset_bitfield, __RECKON_DATE_ISSET_ID);
  }

  public void setReckon_dateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECKON_DATE_ISSET_ID, value);
  }

  public int getExpected_payment_date() {
    return this.expected_payment_date;
  }

  public ProductInfoStruct setExpected_payment_date(int expected_payment_date) {
    this.expected_payment_date = expected_payment_date;
    setExpected_payment_dateIsSet(true);
    return this;
  }

  public void unsetExpected_payment_date() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPECTED_PAYMENT_DATE_ISSET_ID);
  }

  /** Returns true if field expected_payment_date is set (has been assigned a value) and false otherwise */
  public boolean isSetExpected_payment_date() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPECTED_PAYMENT_DATE_ISSET_ID);
  }

  public void setExpected_payment_dateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPECTED_PAYMENT_DATE_ISSET_ID, value);
  }

  public int getProductStatus() {
    return this.productStatus;
  }

  public ProductInfoStruct setProductStatus(int productStatus) {
    this.productStatus = productStatus;
    setProductStatusIsSet(true);
    return this;
  }

  public void unsetProductStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTSTATUS_ISSET_ID);
  }

  /** Returns true if field productStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetProductStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTSTATUS_ISSET_ID);
  }

  public void setProductStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTSTATUS_ISSET_ID, value);
  }

  public String getId() {
    return this.id;
  }

  public ProductInfoStruct setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case CALCULATIONEARN:
      if (value == null) {
        unsetCalculationearn();
      } else {
        setCalculationearn((Integer)value);
      }
      break;

    case TARGET_RATE_FORMULA:
      if (value == null) {
        unsetTarget_rate_formula();
      } else {
        setTarget_rate_formula((Integer)value);
      }
      break;

    case ASSET_MANAGER:
      if (value == null) {
        unsetAssetManager();
      } else {
        setAssetManager((String)value);
      }
      break;

    case ASSET_TRUSTEE:
      if (value == null) {
        unsetAssetTrustee();
      } else {
        setAssetTrustee((String)value);
      }
      break;

    case ISSUBANKID:
      if (value == null) {
        unsetIssubankid();
      } else {
        setIssubankid((String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((Integer)value);
      }
      break;

    case RISK_LEVEL:
      if (value == null) {
        unsetRisk_level();
      } else {
        setRisk_level((Integer)value);
      }
      break;

    case TARGET_RATE:
      if (value == null) {
        unsetTarget_rate();
      } else {
        setTarget_rate((Double)value);
      }
      break;

    case RAISE_UPPER:
      if (value == null) {
        unsetRaise_upper();
      } else {
        setRaise_upper((Double)value);
      }
      break;

    case RAISE_LOW:
      if (value == null) {
        unsetRaise_low();
      } else {
        setRaise_low((Double)value);
      }
      break;

    case INVESTMENT_UPPER_LIMIT:
      if (value == null) {
        unsetInvestment_upper_limit();
      } else {
        setInvestment_upper_limit((Double)value);
      }
      break;

    case INVESTMENT_LOW_LIMIT:
      if (value == null) {
        unsetInvestment_low_limit();
      } else {
        setInvestment_low_limit((Double)value);
      }
      break;

    case MAX_RAISE_NUMBER:
      if (value == null) {
        unsetMax_raise_number();
      } else {
        setMax_raise_number((Integer)value);
      }
      break;

    case LAUNCH_DATE:
      if (value == null) {
        unsetLaunch_date();
      } else {
        setLaunch_date((Integer)value);
      }
      break;

    case RAISE_START_DATE:
      if (value == null) {
        unsetRaise_start_date();
      } else {
        setRaise_start_date((Integer)value);
      }
      break;

    case RAISE_END_DATE:
      if (value == null) {
        unsetRaise_end_date();
      } else {
        setRaise_end_date((Integer)value);
      }
      break;

    case VALUE_DATE:
      if (value == null) {
        unsetValue_date();
      } else {
        setValue_date((Integer)value);
      }
      break;

    case DUE_DATE:
      if (value == null) {
        unsetDue_date();
      } else {
        setDue_date((Integer)value);
      }
      break;

    case RECKON_DATE:
      if (value == null) {
        unsetReckon_date();
      } else {
        setReckon_date((Integer)value);
      }
      break;

    case EXPECTED_PAYMENT_DATE:
      if (value == null) {
        unsetExpected_payment_date();
      } else {
        setExpected_payment_date((Integer)value);
      }
      break;

    case PRODUCT_STATUS:
      if (value == null) {
        unsetProductStatus();
      } else {
        setProductStatus((Integer)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case TYPE:
      return Integer.valueOf(getType());

    case CALCULATIONEARN:
      return Integer.valueOf(getCalculationearn());

    case TARGET_RATE_FORMULA:
      return Integer.valueOf(getTarget_rate_formula());

    case ASSET_MANAGER:
      return getAssetManager();

    case ASSET_TRUSTEE:
      return getAssetTrustee();

    case ISSUBANKID:
      return getIssubankid();

    case CURRENCY:
      return Integer.valueOf(getCurrency());

    case RISK_LEVEL:
      return Integer.valueOf(getRisk_level());

    case TARGET_RATE:
      return Double.valueOf(getTarget_rate());

    case RAISE_UPPER:
      return Double.valueOf(getRaise_upper());

    case RAISE_LOW:
      return Double.valueOf(getRaise_low());

    case INVESTMENT_UPPER_LIMIT:
      return Double.valueOf(getInvestment_upper_limit());

    case INVESTMENT_LOW_LIMIT:
      return Double.valueOf(getInvestment_low_limit());

    case MAX_RAISE_NUMBER:
      return Integer.valueOf(getMax_raise_number());

    case LAUNCH_DATE:
      return Integer.valueOf(getLaunch_date());

    case RAISE_START_DATE:
      return Integer.valueOf(getRaise_start_date());

    case RAISE_END_DATE:
      return Integer.valueOf(getRaise_end_date());

    case VALUE_DATE:
      return Integer.valueOf(getValue_date());

    case DUE_DATE:
      return Integer.valueOf(getDue_date());

    case RECKON_DATE:
      return Integer.valueOf(getReckon_date());

    case EXPECTED_PAYMENT_DATE:
      return Integer.valueOf(getExpected_payment_date());

    case PRODUCT_STATUS:
      return Integer.valueOf(getProductStatus());

    case ID:
      return getId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case CALCULATIONEARN:
      return isSetCalculationearn();
    case TARGET_RATE_FORMULA:
      return isSetTarget_rate_formula();
    case ASSET_MANAGER:
      return isSetAssetManager();
    case ASSET_TRUSTEE:
      return isSetAssetTrustee();
    case ISSUBANKID:
      return isSetIssubankid();
    case CURRENCY:
      return isSetCurrency();
    case RISK_LEVEL:
      return isSetRisk_level();
    case TARGET_RATE:
      return isSetTarget_rate();
    case RAISE_UPPER:
      return isSetRaise_upper();
    case RAISE_LOW:
      return isSetRaise_low();
    case INVESTMENT_UPPER_LIMIT:
      return isSetInvestment_upper_limit();
    case INVESTMENT_LOW_LIMIT:
      return isSetInvestment_low_limit();
    case MAX_RAISE_NUMBER:
      return isSetMax_raise_number();
    case LAUNCH_DATE:
      return isSetLaunch_date();
    case RAISE_START_DATE:
      return isSetRaise_start_date();
    case RAISE_END_DATE:
      return isSetRaise_end_date();
    case VALUE_DATE:
      return isSetValue_date();
    case DUE_DATE:
      return isSetDue_date();
    case RECKON_DATE:
      return isSetReckon_date();
    case EXPECTED_PAYMENT_DATE:
      return isSetExpected_payment_date();
    case PRODUCT_STATUS:
      return isSetProductStatus();
    case ID:
      return isSetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductInfoStruct)
      return this.equals((ProductInfoStruct)that);
    return false;
  }

  public boolean equals(ProductInfoStruct that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_calculationearn = true;
    boolean that_present_calculationearn = true;
    if (this_present_calculationearn || that_present_calculationearn) {
      if (!(this_present_calculationearn && that_present_calculationearn))
        return false;
      if (this.calculationearn != that.calculationearn)
        return false;
    }

    boolean this_present_target_rate_formula = true;
    boolean that_present_target_rate_formula = true;
    if (this_present_target_rate_formula || that_present_target_rate_formula) {
      if (!(this_present_target_rate_formula && that_present_target_rate_formula))
        return false;
      if (this.target_rate_formula != that.target_rate_formula)
        return false;
    }

    boolean this_present_assetManager = true && this.isSetAssetManager();
    boolean that_present_assetManager = true && that.isSetAssetManager();
    if (this_present_assetManager || that_present_assetManager) {
      if (!(this_present_assetManager && that_present_assetManager))
        return false;
      if (!this.assetManager.equals(that.assetManager))
        return false;
    }

    boolean this_present_assetTrustee = true && this.isSetAssetTrustee();
    boolean that_present_assetTrustee = true && that.isSetAssetTrustee();
    if (this_present_assetTrustee || that_present_assetTrustee) {
      if (!(this_present_assetTrustee && that_present_assetTrustee))
        return false;
      if (!this.assetTrustee.equals(that.assetTrustee))
        return false;
    }

    boolean this_present_issubankid = true && this.isSetIssubankid();
    boolean that_present_issubankid = true && that.isSetIssubankid();
    if (this_present_issubankid || that_present_issubankid) {
      if (!(this_present_issubankid && that_present_issubankid))
        return false;
      if (!this.issubankid.equals(that.issubankid))
        return false;
    }

    boolean this_present_currency = true;
    boolean that_present_currency = true;
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (this.currency != that.currency)
        return false;
    }

    boolean this_present_risk_level = true;
    boolean that_present_risk_level = true;
    if (this_present_risk_level || that_present_risk_level) {
      if (!(this_present_risk_level && that_present_risk_level))
        return false;
      if (this.risk_level != that.risk_level)
        return false;
    }

    boolean this_present_target_rate = true;
    boolean that_present_target_rate = true;
    if (this_present_target_rate || that_present_target_rate) {
      if (!(this_present_target_rate && that_present_target_rate))
        return false;
      if (this.target_rate != that.target_rate)
        return false;
    }

    boolean this_present_raise_upper = true;
    boolean that_present_raise_upper = true;
    if (this_present_raise_upper || that_present_raise_upper) {
      if (!(this_present_raise_upper && that_present_raise_upper))
        return false;
      if (this.raise_upper != that.raise_upper)
        return false;
    }

    boolean this_present_raise_low = true;
    boolean that_present_raise_low = true;
    if (this_present_raise_low || that_present_raise_low) {
      if (!(this_present_raise_low && that_present_raise_low))
        return false;
      if (this.raise_low != that.raise_low)
        return false;
    }

    boolean this_present_investment_upper_limit = true;
    boolean that_present_investment_upper_limit = true;
    if (this_present_investment_upper_limit || that_present_investment_upper_limit) {
      if (!(this_present_investment_upper_limit && that_present_investment_upper_limit))
        return false;
      if (this.investment_upper_limit != that.investment_upper_limit)
        return false;
    }

    boolean this_present_investment_low_limit = true;
    boolean that_present_investment_low_limit = true;
    if (this_present_investment_low_limit || that_present_investment_low_limit) {
      if (!(this_present_investment_low_limit && that_present_investment_low_limit))
        return false;
      if (this.investment_low_limit != that.investment_low_limit)
        return false;
    }

    boolean this_present_max_raise_number = true;
    boolean that_present_max_raise_number = true;
    if (this_present_max_raise_number || that_present_max_raise_number) {
      if (!(this_present_max_raise_number && that_present_max_raise_number))
        return false;
      if (this.max_raise_number != that.max_raise_number)
        return false;
    }

    boolean this_present_launch_date = true;
    boolean that_present_launch_date = true;
    if (this_present_launch_date || that_present_launch_date) {
      if (!(this_present_launch_date && that_present_launch_date))
        return false;
      if (this.launch_date != that.launch_date)
        return false;
    }

    boolean this_present_raise_start_date = true;
    boolean that_present_raise_start_date = true;
    if (this_present_raise_start_date || that_present_raise_start_date) {
      if (!(this_present_raise_start_date && that_present_raise_start_date))
        return false;
      if (this.raise_start_date != that.raise_start_date)
        return false;
    }

    boolean this_present_raise_end_date = true;
    boolean that_present_raise_end_date = true;
    if (this_present_raise_end_date || that_present_raise_end_date) {
      if (!(this_present_raise_end_date && that_present_raise_end_date))
        return false;
      if (this.raise_end_date != that.raise_end_date)
        return false;
    }

    boolean this_present_value_date = true;
    boolean that_present_value_date = true;
    if (this_present_value_date || that_present_value_date) {
      if (!(this_present_value_date && that_present_value_date))
        return false;
      if (this.value_date != that.value_date)
        return false;
    }

    boolean this_present_due_date = true;
    boolean that_present_due_date = true;
    if (this_present_due_date || that_present_due_date) {
      if (!(this_present_due_date && that_present_due_date))
        return false;
      if (this.due_date != that.due_date)
        return false;
    }

    boolean this_present_reckon_date = true;
    boolean that_present_reckon_date = true;
    if (this_present_reckon_date || that_present_reckon_date) {
      if (!(this_present_reckon_date && that_present_reckon_date))
        return false;
      if (this.reckon_date != that.reckon_date)
        return false;
    }

    boolean this_present_expected_payment_date = true;
    boolean that_present_expected_payment_date = true;
    if (this_present_expected_payment_date || that_present_expected_payment_date) {
      if (!(this_present_expected_payment_date && that_present_expected_payment_date))
        return false;
      if (this.expected_payment_date != that.expected_payment_date)
        return false;
    }

    boolean this_present_productStatus = true;
    boolean that_present_productStatus = true;
    if (this_present_productStatus || that_present_productStatus) {
      if (!(this_present_productStatus && that_present_productStatus))
        return false;
      if (this.productStatus != that.productStatus)
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ProductInfoStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCalculationearn()).compareTo(other.isSetCalculationearn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalculationearn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calculationearn, other.calculationearn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTarget_rate_formula()).compareTo(other.isSetTarget_rate_formula());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget_rate_formula()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target_rate_formula, other.target_rate_formula);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssetManager()).compareTo(other.isSetAssetManager());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssetManager()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assetManager, other.assetManager);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssetTrustee()).compareTo(other.isSetAssetTrustee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssetTrustee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assetTrustee, other.assetTrustee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssubankid()).compareTo(other.isSetIssubankid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssubankid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issubankid, other.issubankid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRisk_level()).compareTo(other.isSetRisk_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRisk_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.risk_level, other.risk_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTarget_rate()).compareTo(other.isSetTarget_rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget_rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target_rate, other.target_rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRaise_upper()).compareTo(other.isSetRaise_upper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaise_upper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raise_upper, other.raise_upper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRaise_low()).compareTo(other.isSetRaise_low());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaise_low()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raise_low, other.raise_low);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestment_upper_limit()).compareTo(other.isSetInvestment_upper_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestment_upper_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investment_upper_limit, other.investment_upper_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestment_low_limit()).compareTo(other.isSetInvestment_low_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestment_low_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investment_low_limit, other.investment_low_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_raise_number()).compareTo(other.isSetMax_raise_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_raise_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_raise_number, other.max_raise_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLaunch_date()).compareTo(other.isSetLaunch_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLaunch_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.launch_date, other.launch_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRaise_start_date()).compareTo(other.isSetRaise_start_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaise_start_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raise_start_date, other.raise_start_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRaise_end_date()).compareTo(other.isSetRaise_end_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaise_end_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raise_end_date, other.raise_end_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue_date()).compareTo(other.isSetValue_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value_date, other.value_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDue_date()).compareTo(other.isSetDue_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDue_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.due_date, other.due_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReckon_date()).compareTo(other.isSetReckon_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReckon_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reckon_date, other.reckon_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpected_payment_date()).compareTo(other.isSetExpected_payment_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpected_payment_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expected_payment_date, other.expected_payment_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductStatus()).compareTo(other.isSetProductStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productStatus, other.productStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductInfoStruct(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("calculationearn:");
    sb.append(this.calculationearn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("target_rate_formula:");
    sb.append(this.target_rate_formula);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assetManager:");
    if (this.assetManager == null) {
      sb.append("null");
    } else {
      sb.append(this.assetManager);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assetTrustee:");
    if (this.assetTrustee == null) {
      sb.append("null");
    } else {
      sb.append(this.assetTrustee);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issubankid:");
    if (this.issubankid == null) {
      sb.append("null");
    } else {
      sb.append(this.issubankid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    sb.append(this.currency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("risk_level:");
    sb.append(this.risk_level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("target_rate:");
    sb.append(this.target_rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("raise_upper:");
    sb.append(this.raise_upper);
    first = false;
    if (!first) sb.append(", ");
    sb.append("raise_low:");
    sb.append(this.raise_low);
    first = false;
    if (!first) sb.append(", ");
    sb.append("investment_upper_limit:");
    sb.append(this.investment_upper_limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("investment_low_limit:");
    sb.append(this.investment_low_limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_raise_number:");
    sb.append(this.max_raise_number);
    first = false;
    if (!first) sb.append(", ");
    sb.append("launch_date:");
    sb.append(this.launch_date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("raise_start_date:");
    sb.append(this.raise_start_date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("raise_end_date:");
    sb.append(this.raise_end_date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("value_date:");
    sb.append(this.value_date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("due_date:");
    sb.append(this.due_date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reckon_date:");
    sb.append(this.reckon_date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expected_payment_date:");
    sb.append(this.expected_payment_date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productStatus:");
    sb.append(this.productStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'type' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'calculationearn' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'target_rate_formula' because it's a primitive and you chose the non-beans generator.
    if (assetManager == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'assetManager' was not present! Struct: " + toString());
    }
    if (assetTrustee == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'assetTrustee' was not present! Struct: " + toString());
    }
    if (issubankid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'issubankid' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'currency' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'risk_level' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'target_rate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'raise_upper' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'raise_low' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'investment_upper_limit' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'investment_low_limit' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'max_raise_number' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'launch_date' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'raise_start_date' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'raise_end_date' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'value_date' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'due_date' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'reckon_date' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'expected_payment_date' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductInfoStructStandardSchemeFactory implements SchemeFactory {
    public ProductInfoStructStandardScheme getScheme() {
      return new ProductInfoStructStandardScheme();
    }
  }

  private static class ProductInfoStructStandardScheme extends StandardScheme<ProductInfoStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductInfoStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CALCULATIONEARN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.calculationearn = iprot.readI32();
              struct.setCalculationearnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TARGET_RATE_FORMULA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.target_rate_formula = iprot.readI32();
              struct.setTarget_rate_formulaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ASSET_MANAGER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assetManager = iprot.readString();
              struct.setAssetManagerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ASSET_TRUSTEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assetTrustee = iprot.readString();
              struct.setAssetTrusteeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ISSUBANKID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issubankid = iprot.readString();
              struct.setIssubankidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currency = iprot.readI32();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RISK_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.risk_level = iprot.readI32();
              struct.setRisk_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TARGET_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.target_rate = iprot.readDouble();
              struct.setTarget_rateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RAISE_UPPER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.raise_upper = iprot.readDouble();
              struct.setRaise_upperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RAISE_LOW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.raise_low = iprot.readDouble();
              struct.setRaise_lowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // INVESTMENT_UPPER_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.investment_upper_limit = iprot.readDouble();
              struct.setInvestment_upper_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // INVESTMENT_LOW_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.investment_low_limit = iprot.readDouble();
              struct.setInvestment_low_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MAX_RAISE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_raise_number = iprot.readI32();
              struct.setMax_raise_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LAUNCH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.launch_date = iprot.readI32();
              struct.setLaunch_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RAISE_START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.raise_start_date = iprot.readI32();
              struct.setRaise_start_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RAISE_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.raise_end_date = iprot.readI32();
              struct.setRaise_end_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // VALUE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.value_date = iprot.readI32();
              struct.setValue_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DUE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.due_date = iprot.readI32();
              struct.setDue_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // RECKON_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reckon_date = iprot.readI32();
              struct.setReckon_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // EXPECTED_PAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.expected_payment_date = iprot.readI32();
              struct.setExpected_payment_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PRODUCT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productStatus = iprot.readI32();
              struct.setProductStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCalculationearn()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'calculationearn' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTarget_rate_formula()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'target_rate_formula' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCurrency()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'currency' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRisk_level()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'risk_level' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTarget_rate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'target_rate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRaise_upper()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'raise_upper' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRaise_low()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'raise_low' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInvestment_upper_limit()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'investment_upper_limit' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInvestment_low_limit()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'investment_low_limit' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMax_raise_number()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_raise_number' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLaunch_date()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'launch_date' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRaise_start_date()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'raise_start_date' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRaise_end_date()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'raise_end_date' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetValue_date()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'value_date' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDue_date()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'due_date' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetReckon_date()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'reckon_date' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetExpected_payment_date()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'expected_payment_date' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductInfoStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CALCULATIONEARN_FIELD_DESC);
      oprot.writeI32(struct.calculationearn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARGET_RATE_FORMULA_FIELD_DESC);
      oprot.writeI32(struct.target_rate_formula);
      oprot.writeFieldEnd();
      if (struct.assetManager != null) {
        oprot.writeFieldBegin(ASSET_MANAGER_FIELD_DESC);
        oprot.writeString(struct.assetManager);
        oprot.writeFieldEnd();
      }
      if (struct.assetTrustee != null) {
        oprot.writeFieldBegin(ASSET_TRUSTEE_FIELD_DESC);
        oprot.writeString(struct.assetTrustee);
        oprot.writeFieldEnd();
      }
      if (struct.issubankid != null) {
        oprot.writeFieldBegin(ISSUBANKID_FIELD_DESC);
        oprot.writeString(struct.issubankid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
      oprot.writeI32(struct.currency);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RISK_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.risk_level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARGET_RATE_FIELD_DESC);
      oprot.writeDouble(struct.target_rate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RAISE_UPPER_FIELD_DESC);
      oprot.writeDouble(struct.raise_upper);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RAISE_LOW_FIELD_DESC);
      oprot.writeDouble(struct.raise_low);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INVESTMENT_UPPER_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.investment_upper_limit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INVESTMENT_LOW_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.investment_low_limit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_RAISE_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.max_raise_number);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAUNCH_DATE_FIELD_DESC);
      oprot.writeI32(struct.launch_date);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RAISE_START_DATE_FIELD_DESC);
      oprot.writeI32(struct.raise_start_date);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RAISE_END_DATE_FIELD_DESC);
      oprot.writeI32(struct.raise_end_date);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALUE_DATE_FIELD_DESC);
      oprot.writeI32(struct.value_date);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DUE_DATE_FIELD_DESC);
      oprot.writeI32(struct.due_date);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECKON_DATE_FIELD_DESC);
      oprot.writeI32(struct.reckon_date);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPECTED_PAYMENT_DATE_FIELD_DESC);
      oprot.writeI32(struct.expected_payment_date);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.productStatus);
      oprot.writeFieldEnd();
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductInfoStructTupleSchemeFactory implements SchemeFactory {
    public ProductInfoStructTupleScheme getScheme() {
      return new ProductInfoStructTupleScheme();
    }
  }

  private static class ProductInfoStructTupleScheme extends TupleScheme<ProductInfoStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeI32(struct.type);
      oprot.writeI32(struct.calculationearn);
      oprot.writeI32(struct.target_rate_formula);
      oprot.writeString(struct.assetManager);
      oprot.writeString(struct.assetTrustee);
      oprot.writeString(struct.issubankid);
      oprot.writeI32(struct.currency);
      oprot.writeI32(struct.risk_level);
      oprot.writeDouble(struct.target_rate);
      oprot.writeDouble(struct.raise_upper);
      oprot.writeDouble(struct.raise_low);
      oprot.writeDouble(struct.investment_upper_limit);
      oprot.writeDouble(struct.investment_low_limit);
      oprot.writeI32(struct.max_raise_number);
      oprot.writeI32(struct.launch_date);
      oprot.writeI32(struct.raise_start_date);
      oprot.writeI32(struct.raise_end_date);
      oprot.writeI32(struct.value_date);
      oprot.writeI32(struct.due_date);
      oprot.writeI32(struct.reckon_date);
      oprot.writeI32(struct.expected_payment_date);
      BitSet optionals = new BitSet();
      if (struct.isSetProductStatus()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetProductStatus()) {
        oprot.writeI32(struct.productStatus);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.type = iprot.readI32();
      struct.setTypeIsSet(true);
      struct.calculationearn = iprot.readI32();
      struct.setCalculationearnIsSet(true);
      struct.target_rate_formula = iprot.readI32();
      struct.setTarget_rate_formulaIsSet(true);
      struct.assetManager = iprot.readString();
      struct.setAssetManagerIsSet(true);
      struct.assetTrustee = iprot.readString();
      struct.setAssetTrusteeIsSet(true);
      struct.issubankid = iprot.readString();
      struct.setIssubankidIsSet(true);
      struct.currency = iprot.readI32();
      struct.setCurrencyIsSet(true);
      struct.risk_level = iprot.readI32();
      struct.setRisk_levelIsSet(true);
      struct.target_rate = iprot.readDouble();
      struct.setTarget_rateIsSet(true);
      struct.raise_upper = iprot.readDouble();
      struct.setRaise_upperIsSet(true);
      struct.raise_low = iprot.readDouble();
      struct.setRaise_lowIsSet(true);
      struct.investment_upper_limit = iprot.readDouble();
      struct.setInvestment_upper_limitIsSet(true);
      struct.investment_low_limit = iprot.readDouble();
      struct.setInvestment_low_limitIsSet(true);
      struct.max_raise_number = iprot.readI32();
      struct.setMax_raise_numberIsSet(true);
      struct.launch_date = iprot.readI32();
      struct.setLaunch_dateIsSet(true);
      struct.raise_start_date = iprot.readI32();
      struct.setRaise_start_dateIsSet(true);
      struct.raise_end_date = iprot.readI32();
      struct.setRaise_end_dateIsSet(true);
      struct.value_date = iprot.readI32();
      struct.setValue_dateIsSet(true);
      struct.due_date = iprot.readI32();
      struct.setDue_dateIsSet(true);
      struct.reckon_date = iprot.readI32();
      struct.setReckon_dateIsSet(true);
      struct.expected_payment_date = iprot.readI32();
      struct.setExpected_payment_dateIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.productStatus = iprot.readI32();
        struct.setProductStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
    }
  }

}

