/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tongbaotu.fits.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class InvestorRegisterResultInfoStruct implements org.apache.thrift.TBase<InvestorRegisterResultInfoStruct, InvestorRegisterResultInfoStruct._Fields>, java.io.Serializable, Cloneable, Comparable<InvestorRegisterResultInfoStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InvestorRegisterResultInfoStruct");

  private static final org.apache.thrift.protocol.TField MOBILE_PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("mobilePhoneNumber", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InvestorRegisterResultInfoStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InvestorRegisterResultInfoStructTupleSchemeFactory());
  }

  public String mobilePhoneNumber; // required
  public String investorID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MOBILE_PHONE_NUMBER((short)1, "mobilePhoneNumber"),
    INVESTOR_ID((short)2, "investorID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MOBILE_PHONE_NUMBER
          return MOBILE_PHONE_NUMBER;
        case 2: // INVESTOR_ID
          return INVESTOR_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MOBILE_PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("mobilePhoneNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InvestorRegisterResultInfoStruct.class, metaDataMap);
  }

  public InvestorRegisterResultInfoStruct() {
  }

  public InvestorRegisterResultInfoStruct(
    String mobilePhoneNumber,
    String investorID)
  {
    this();
    this.mobilePhoneNumber = mobilePhoneNumber;
    this.investorID = investorID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InvestorRegisterResultInfoStruct(InvestorRegisterResultInfoStruct other) {
    if (other.isSetMobilePhoneNumber()) {
      this.mobilePhoneNumber = other.mobilePhoneNumber;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
  }

  public InvestorRegisterResultInfoStruct deepCopy() {
    return new InvestorRegisterResultInfoStruct(this);
  }

  @Override
  public void clear() {
    this.mobilePhoneNumber = null;
    this.investorID = null;
  }

  public String getMobilePhoneNumber() {
    return this.mobilePhoneNumber;
  }

  public InvestorRegisterResultInfoStruct setMobilePhoneNumber(String mobilePhoneNumber) {
    this.mobilePhoneNumber = mobilePhoneNumber;
    return this;
  }

  public void unsetMobilePhoneNumber() {
    this.mobilePhoneNumber = null;
  }

  /** Returns true if field mobilePhoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetMobilePhoneNumber() {
    return this.mobilePhoneNumber != null;
  }

  public void setMobilePhoneNumberIsSet(boolean value) {
    if (!value) {
      this.mobilePhoneNumber = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public InvestorRegisterResultInfoStruct setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MOBILE_PHONE_NUMBER:
      if (value == null) {
        unsetMobilePhoneNumber();
      } else {
        setMobilePhoneNumber((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MOBILE_PHONE_NUMBER:
      return getMobilePhoneNumber();

    case INVESTOR_ID:
      return getInvestorID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MOBILE_PHONE_NUMBER:
      return isSetMobilePhoneNumber();
    case INVESTOR_ID:
      return isSetInvestorID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InvestorRegisterResultInfoStruct)
      return this.equals((InvestorRegisterResultInfoStruct)that);
    return false;
  }

  public boolean equals(InvestorRegisterResultInfoStruct that) {
    if (that == null)
      return false;

    boolean this_present_mobilePhoneNumber = true && this.isSetMobilePhoneNumber();
    boolean that_present_mobilePhoneNumber = true && that.isSetMobilePhoneNumber();
    if (this_present_mobilePhoneNumber || that_present_mobilePhoneNumber) {
      if (!(this_present_mobilePhoneNumber && that_present_mobilePhoneNumber))
        return false;
      if (!this.mobilePhoneNumber.equals(that.mobilePhoneNumber))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(InvestorRegisterResultInfoStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMobilePhoneNumber()).compareTo(other.isSetMobilePhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobilePhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobilePhoneNumber, other.mobilePhoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InvestorRegisterResultInfoStruct(");
    boolean first = true;

    sb.append("mobilePhoneNumber:");
    if (this.mobilePhoneNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.mobilePhoneNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (mobilePhoneNumber == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mobilePhoneNumber' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InvestorRegisterResultInfoStructStandardSchemeFactory implements SchemeFactory {
    public InvestorRegisterResultInfoStructStandardScheme getScheme() {
      return new InvestorRegisterResultInfoStructStandardScheme();
    }
  }

  private static class InvestorRegisterResultInfoStructStandardScheme extends StandardScheme<InvestorRegisterResultInfoStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InvestorRegisterResultInfoStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MOBILE_PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobilePhoneNumber = iprot.readString();
              struct.setMobilePhoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InvestorRegisterResultInfoStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mobilePhoneNumber != null) {
        oprot.writeFieldBegin(MOBILE_PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.mobilePhoneNumber);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InvestorRegisterResultInfoStructTupleSchemeFactory implements SchemeFactory {
    public InvestorRegisterResultInfoStructTupleScheme getScheme() {
      return new InvestorRegisterResultInfoStructTupleScheme();
    }
  }

  private static class InvestorRegisterResultInfoStructTupleScheme extends TupleScheme<InvestorRegisterResultInfoStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InvestorRegisterResultInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.mobilePhoneNumber);
      BitSet optionals = new BitSet();
      if (struct.isSetInvestorID()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InvestorRegisterResultInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.mobilePhoneNumber = iprot.readString();
      struct.setMobilePhoneNumberIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
    }
  }

}

