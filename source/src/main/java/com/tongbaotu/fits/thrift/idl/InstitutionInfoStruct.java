/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tongbaotu.fits.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class InstitutionInfoStruct implements org.apache.thrift.TBase<InstitutionInfoStruct, InstitutionInfoStruct._Fields>, java.io.Serializable, Cloneable, Comparable<InstitutionInfoStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InstitutionInfoStruct");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUPERID_FIELD_DESC = new org.apache.thrift.protocol.TField("superid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FIXED_TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("fixedTelephone", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TBTCAPITAL_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("TBTCapitalAccountID", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTACT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("contactName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MOBILE_PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("mobilePhoneNumber", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REGISTER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("registerDate", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InstitutionInfoStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InstitutionInfoStructTupleSchemeFactory());
  }

  public String id; // required
  public String superid; // required
  public int type; // required
  public String name; // required
  public String fixedTelephone; // required
  public String TBTCapitalAccountID; // required
  public String contactName; // required
  public String mobilePhoneNumber; // required
  public int registerDate; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    SUPERID((short)2, "superid"),
    TYPE((short)3, "type"),
    NAME((short)4, "name"),
    FIXED_TELEPHONE((short)5, "fixedTelephone"),
    TBTCAPITAL_ACCOUNT_ID((short)6, "TBTCapitalAccountID"),
    CONTACT_NAME((short)7, "contactName"),
    MOBILE_PHONE_NUMBER((short)8, "mobilePhoneNumber"),
    REGISTER_DATE((short)9, "registerDate"),
    STATUS((short)10, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // SUPERID
          return SUPERID;
        case 3: // TYPE
          return TYPE;
        case 4: // NAME
          return NAME;
        case 5: // FIXED_TELEPHONE
          return FIXED_TELEPHONE;
        case 6: // TBTCAPITAL_ACCOUNT_ID
          return TBTCAPITAL_ACCOUNT_ID;
        case 7: // CONTACT_NAME
          return CONTACT_NAME;
        case 8: // MOBILE_PHONE_NUMBER
          return MOBILE_PHONE_NUMBER;
        case 9: // REGISTER_DATE
          return REGISTER_DATE;
        case 10: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private static final int __REGISTERDATE_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPERID, new org.apache.thrift.meta_data.FieldMetaData("superid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIXED_TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("fixedTelephone", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TBTCAPITAL_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("TBTCapitalAccountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACT_NAME, new org.apache.thrift.meta_data.FieldMetaData("contactName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE_PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("mobilePhoneNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGISTER_DATE, new org.apache.thrift.meta_data.FieldMetaData("registerDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InstitutionInfoStruct.class, metaDataMap);
  }

  public InstitutionInfoStruct() {
  }

  public InstitutionInfoStruct(
    String id,
    String superid,
    int type,
    String name,
    String fixedTelephone,
    String TBTCapitalAccountID,
    String contactName,
    String mobilePhoneNumber,
    int registerDate,
    int status)
  {
    this();
    this.id = id;
    this.superid = superid;
    this.type = type;
    setTypeIsSet(true);
    this.name = name;
    this.fixedTelephone = fixedTelephone;
    this.TBTCapitalAccountID = TBTCapitalAccountID;
    this.contactName = contactName;
    this.mobilePhoneNumber = mobilePhoneNumber;
    this.registerDate = registerDate;
    setRegisterDateIsSet(true);
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InstitutionInfoStruct(InstitutionInfoStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetSuperid()) {
      this.superid = other.superid;
    }
    this.type = other.type;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetFixedTelephone()) {
      this.fixedTelephone = other.fixedTelephone;
    }
    if (other.isSetTBTCapitalAccountID()) {
      this.TBTCapitalAccountID = other.TBTCapitalAccountID;
    }
    if (other.isSetContactName()) {
      this.contactName = other.contactName;
    }
    if (other.isSetMobilePhoneNumber()) {
      this.mobilePhoneNumber = other.mobilePhoneNumber;
    }
    this.registerDate = other.registerDate;
    this.status = other.status;
  }

  public InstitutionInfoStruct deepCopy() {
    return new InstitutionInfoStruct(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.superid = null;
    setTypeIsSet(false);
    this.type = 0;
    this.name = null;
    this.fixedTelephone = null;
    this.TBTCapitalAccountID = null;
    this.contactName = null;
    this.mobilePhoneNumber = null;
    setRegisterDateIsSet(false);
    this.registerDate = 0;
    setStatusIsSet(false);
    this.status = 0;
  }

  public String getId() {
    return this.id;
  }

  public InstitutionInfoStruct setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getSuperid() {
    return this.superid;
  }

  public InstitutionInfoStruct setSuperid(String superid) {
    this.superid = superid;
    return this;
  }

  public void unsetSuperid() {
    this.superid = null;
  }

  /** Returns true if field superid is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperid() {
    return this.superid != null;
  }

  public void setSuperidIsSet(boolean value) {
    if (!value) {
      this.superid = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public InstitutionInfoStruct setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public InstitutionInfoStruct setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getFixedTelephone() {
    return this.fixedTelephone;
  }

  public InstitutionInfoStruct setFixedTelephone(String fixedTelephone) {
    this.fixedTelephone = fixedTelephone;
    return this;
  }

  public void unsetFixedTelephone() {
    this.fixedTelephone = null;
  }

  /** Returns true if field fixedTelephone is set (has been assigned a value) and false otherwise */
  public boolean isSetFixedTelephone() {
    return this.fixedTelephone != null;
  }

  public void setFixedTelephoneIsSet(boolean value) {
    if (!value) {
      this.fixedTelephone = null;
    }
  }

  public String getTBTCapitalAccountID() {
    return this.TBTCapitalAccountID;
  }

  public InstitutionInfoStruct setTBTCapitalAccountID(String TBTCapitalAccountID) {
    this.TBTCapitalAccountID = TBTCapitalAccountID;
    return this;
  }

  public void unsetTBTCapitalAccountID() {
    this.TBTCapitalAccountID = null;
  }

  /** Returns true if field TBTCapitalAccountID is set (has been assigned a value) and false otherwise */
  public boolean isSetTBTCapitalAccountID() {
    return this.TBTCapitalAccountID != null;
  }

  public void setTBTCapitalAccountIDIsSet(boolean value) {
    if (!value) {
      this.TBTCapitalAccountID = null;
    }
  }

  public String getContactName() {
    return this.contactName;
  }

  public InstitutionInfoStruct setContactName(String contactName) {
    this.contactName = contactName;
    return this;
  }

  public void unsetContactName() {
    this.contactName = null;
  }

  /** Returns true if field contactName is set (has been assigned a value) and false otherwise */
  public boolean isSetContactName() {
    return this.contactName != null;
  }

  public void setContactNameIsSet(boolean value) {
    if (!value) {
      this.contactName = null;
    }
  }

  public String getMobilePhoneNumber() {
    return this.mobilePhoneNumber;
  }

  public InstitutionInfoStruct setMobilePhoneNumber(String mobilePhoneNumber) {
    this.mobilePhoneNumber = mobilePhoneNumber;
    return this;
  }

  public void unsetMobilePhoneNumber() {
    this.mobilePhoneNumber = null;
  }

  /** Returns true if field mobilePhoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetMobilePhoneNumber() {
    return this.mobilePhoneNumber != null;
  }

  public void setMobilePhoneNumberIsSet(boolean value) {
    if (!value) {
      this.mobilePhoneNumber = null;
    }
  }

  public int getRegisterDate() {
    return this.registerDate;
  }

  public InstitutionInfoStruct setRegisterDate(int registerDate) {
    this.registerDate = registerDate;
    setRegisterDateIsSet(true);
    return this;
  }

  public void unsetRegisterDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTERDATE_ISSET_ID);
  }

  /** Returns true if field registerDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisterDate() {
    return EncodingUtils.testBit(__isset_bitfield, __REGISTERDATE_ISSET_ID);
  }

  public void setRegisterDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTERDATE_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public InstitutionInfoStruct setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case SUPERID:
      if (value == null) {
        unsetSuperid();
      } else {
        setSuperid((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case FIXED_TELEPHONE:
      if (value == null) {
        unsetFixedTelephone();
      } else {
        setFixedTelephone((String)value);
      }
      break;

    case TBTCAPITAL_ACCOUNT_ID:
      if (value == null) {
        unsetTBTCapitalAccountID();
      } else {
        setTBTCapitalAccountID((String)value);
      }
      break;

    case CONTACT_NAME:
      if (value == null) {
        unsetContactName();
      } else {
        setContactName((String)value);
      }
      break;

    case MOBILE_PHONE_NUMBER:
      if (value == null) {
        unsetMobilePhoneNumber();
      } else {
        setMobilePhoneNumber((String)value);
      }
      break;

    case REGISTER_DATE:
      if (value == null) {
        unsetRegisterDate();
      } else {
        setRegisterDate((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case SUPERID:
      return getSuperid();

    case TYPE:
      return Integer.valueOf(getType());

    case NAME:
      return getName();

    case FIXED_TELEPHONE:
      return getFixedTelephone();

    case TBTCAPITAL_ACCOUNT_ID:
      return getTBTCapitalAccountID();

    case CONTACT_NAME:
      return getContactName();

    case MOBILE_PHONE_NUMBER:
      return getMobilePhoneNumber();

    case REGISTER_DATE:
      return Integer.valueOf(getRegisterDate());

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SUPERID:
      return isSetSuperid();
    case TYPE:
      return isSetType();
    case NAME:
      return isSetName();
    case FIXED_TELEPHONE:
      return isSetFixedTelephone();
    case TBTCAPITAL_ACCOUNT_ID:
      return isSetTBTCapitalAccountID();
    case CONTACT_NAME:
      return isSetContactName();
    case MOBILE_PHONE_NUMBER:
      return isSetMobilePhoneNumber();
    case REGISTER_DATE:
      return isSetRegisterDate();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InstitutionInfoStruct)
      return this.equals((InstitutionInfoStruct)that);
    return false;
  }

  public boolean equals(InstitutionInfoStruct that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_superid = true && this.isSetSuperid();
    boolean that_present_superid = true && that.isSetSuperid();
    if (this_present_superid || that_present_superid) {
      if (!(this_present_superid && that_present_superid))
        return false;
      if (!this.superid.equals(that.superid))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_fixedTelephone = true && this.isSetFixedTelephone();
    boolean that_present_fixedTelephone = true && that.isSetFixedTelephone();
    if (this_present_fixedTelephone || that_present_fixedTelephone) {
      if (!(this_present_fixedTelephone && that_present_fixedTelephone))
        return false;
      if (!this.fixedTelephone.equals(that.fixedTelephone))
        return false;
    }

    boolean this_present_TBTCapitalAccountID = true && this.isSetTBTCapitalAccountID();
    boolean that_present_TBTCapitalAccountID = true && that.isSetTBTCapitalAccountID();
    if (this_present_TBTCapitalAccountID || that_present_TBTCapitalAccountID) {
      if (!(this_present_TBTCapitalAccountID && that_present_TBTCapitalAccountID))
        return false;
      if (!this.TBTCapitalAccountID.equals(that.TBTCapitalAccountID))
        return false;
    }

    boolean this_present_contactName = true && this.isSetContactName();
    boolean that_present_contactName = true && that.isSetContactName();
    if (this_present_contactName || that_present_contactName) {
      if (!(this_present_contactName && that_present_contactName))
        return false;
      if (!this.contactName.equals(that.contactName))
        return false;
    }

    boolean this_present_mobilePhoneNumber = true && this.isSetMobilePhoneNumber();
    boolean that_present_mobilePhoneNumber = true && that.isSetMobilePhoneNumber();
    if (this_present_mobilePhoneNumber || that_present_mobilePhoneNumber) {
      if (!(this_present_mobilePhoneNumber && that_present_mobilePhoneNumber))
        return false;
      if (!this.mobilePhoneNumber.equals(that.mobilePhoneNumber))
        return false;
    }

    boolean this_present_registerDate = true;
    boolean that_present_registerDate = true;
    if (this_present_registerDate || that_present_registerDate) {
      if (!(this_present_registerDate && that_present_registerDate))
        return false;
      if (this.registerDate != that.registerDate)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(InstitutionInfoStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperid()).compareTo(other.isSetSuperid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superid, other.superid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFixedTelephone()).compareTo(other.isSetFixedTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixedTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixedTelephone, other.fixedTelephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTBTCapitalAccountID()).compareTo(other.isSetTBTCapitalAccountID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTBTCapitalAccountID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TBTCapitalAccountID, other.TBTCapitalAccountID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactName()).compareTo(other.isSetContactName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactName, other.contactName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobilePhoneNumber()).compareTo(other.isSetMobilePhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobilePhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobilePhoneNumber, other.mobilePhoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegisterDate()).compareTo(other.isSetRegisterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerDate, other.registerDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InstitutionInfoStruct(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("superid:");
    if (this.superid == null) {
      sb.append("null");
    } else {
      sb.append(this.superid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fixedTelephone:");
    if (this.fixedTelephone == null) {
      sb.append("null");
    } else {
      sb.append(this.fixedTelephone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TBTCapitalAccountID:");
    if (this.TBTCapitalAccountID == null) {
      sb.append("null");
    } else {
      sb.append(this.TBTCapitalAccountID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactName:");
    if (this.contactName == null) {
      sb.append("null");
    } else {
      sb.append(this.contactName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobilePhoneNumber:");
    if (this.mobilePhoneNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.mobilePhoneNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("registerDate:");
    sb.append(this.registerDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'type' because it's a primitive and you chose the non-beans generator.
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (fixedTelephone == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fixedTelephone' was not present! Struct: " + toString());
    }
    if (TBTCapitalAccountID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'TBTCapitalAccountID' was not present! Struct: " + toString());
    }
    if (contactName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contactName' was not present! Struct: " + toString());
    }
    if (mobilePhoneNumber == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mobilePhoneNumber' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InstitutionInfoStructStandardSchemeFactory implements SchemeFactory {
    public InstitutionInfoStructStandardScheme getScheme() {
      return new InstitutionInfoStructStandardScheme();
    }
  }

  private static class InstitutionInfoStructStandardScheme extends StandardScheme<InstitutionInfoStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InstitutionInfoStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUPERID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.superid = iprot.readString();
              struct.setSuperidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FIXED_TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fixedTelephone = iprot.readString();
              struct.setFixedTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TBTCAPITAL_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.TBTCapitalAccountID = iprot.readString();
              struct.setTBTCapitalAccountIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTACT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactName = iprot.readString();
              struct.setContactNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MOBILE_PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobilePhoneNumber = iprot.readString();
              struct.setMobilePhoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REGISTER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.registerDate = iprot.readI32();
              struct.setRegisterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InstitutionInfoStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.superid != null) {
        oprot.writeFieldBegin(SUPERID_FIELD_DESC);
        oprot.writeString(struct.superid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.fixedTelephone != null) {
        oprot.writeFieldBegin(FIXED_TELEPHONE_FIELD_DESC);
        oprot.writeString(struct.fixedTelephone);
        oprot.writeFieldEnd();
      }
      if (struct.TBTCapitalAccountID != null) {
        oprot.writeFieldBegin(TBTCAPITAL_ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(struct.TBTCapitalAccountID);
        oprot.writeFieldEnd();
      }
      if (struct.contactName != null) {
        oprot.writeFieldBegin(CONTACT_NAME_FIELD_DESC);
        oprot.writeString(struct.contactName);
        oprot.writeFieldEnd();
      }
      if (struct.mobilePhoneNumber != null) {
        oprot.writeFieldBegin(MOBILE_PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.mobilePhoneNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REGISTER_DATE_FIELD_DESC);
      oprot.writeI32(struct.registerDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InstitutionInfoStructTupleSchemeFactory implements SchemeFactory {
    public InstitutionInfoStructTupleScheme getScheme() {
      return new InstitutionInfoStructTupleScheme();
    }
  }

  private static class InstitutionInfoStructTupleScheme extends TupleScheme<InstitutionInfoStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InstitutionInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.type);
      oprot.writeString(struct.name);
      oprot.writeString(struct.fixedTelephone);
      oprot.writeString(struct.TBTCapitalAccountID);
      oprot.writeString(struct.contactName);
      oprot.writeString(struct.mobilePhoneNumber);
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetSuperid()) {
        optionals.set(1);
      }
      if (struct.isSetRegisterDate()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetSuperid()) {
        oprot.writeString(struct.superid);
      }
      if (struct.isSetRegisterDate()) {
        oprot.writeI32(struct.registerDate);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InstitutionInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.type = iprot.readI32();
      struct.setTypeIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.fixedTelephone = iprot.readString();
      struct.setFixedTelephoneIsSet(true);
      struct.TBTCapitalAccountID = iprot.readString();
      struct.setTBTCapitalAccountIDIsSet(true);
      struct.contactName = iprot.readString();
      struct.setContactNameIsSet(true);
      struct.mobilePhoneNumber = iprot.readString();
      struct.setMobilePhoneNumberIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.superid = iprot.readString();
        struct.setSuperidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.registerDate = iprot.readI32();
        struct.setRegisterDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}

