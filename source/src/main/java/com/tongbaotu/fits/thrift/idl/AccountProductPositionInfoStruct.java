/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tongbaotu.fits.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AccountProductPositionInfoStruct implements org.apache.thrift.TBase<AccountProductPositionInfoStruct, AccountProductPositionInfoStruct._Fields>, java.io.Serializable, Cloneable, Comparable<AccountProductPositionInfoStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AccountProductPositionInfoStruct");

  private static final org.apache.thrift.protocol.TField PRODUCTID_FIELD_DESC = new org.apache.thrift.protocol.TField("productid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CURBALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("curbalance", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField VALIDBALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("validbalance", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField FROZENQUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenquantity", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField NOTCOLLECTEDQUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("notcollectedquantity", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AccountProductPositionInfoStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AccountProductPositionInfoStructTupleSchemeFactory());
  }

  public String productid; // required
  public double curbalance; // required
  public double validbalance; // required
  public double frozenquantity; // required
  public double notcollectedquantity; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRODUCTID((short)1, "productid"),
    CURBALANCE((short)2, "curbalance"),
    VALIDBALANCE((short)3, "validbalance"),
    FROZENQUANTITY((short)4, "frozenquantity"),
    NOTCOLLECTEDQUANTITY((short)5, "notcollectedquantity");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCTID
          return PRODUCTID;
        case 2: // CURBALANCE
          return CURBALANCE;
        case 3: // VALIDBALANCE
          return VALIDBALANCE;
        case 4: // FROZENQUANTITY
          return FROZENQUANTITY;
        case 5: // NOTCOLLECTEDQUANTITY
          return NOTCOLLECTEDQUANTITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURBALANCE_ISSET_ID = 0;
  private static final int __VALIDBALANCE_ISSET_ID = 1;
  private static final int __FROZENQUANTITY_ISSET_ID = 2;
  private static final int __NOTCOLLECTEDQUANTITY_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCTID, new org.apache.thrift.meta_data.FieldMetaData("productid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURBALANCE, new org.apache.thrift.meta_data.FieldMetaData("curbalance", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VALIDBALANCE, new org.apache.thrift.meta_data.FieldMetaData("validbalance", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZENQUANTITY, new org.apache.thrift.meta_data.FieldMetaData("frozenquantity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOTCOLLECTEDQUANTITY, new org.apache.thrift.meta_data.FieldMetaData("notcollectedquantity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AccountProductPositionInfoStruct.class, metaDataMap);
  }

  public AccountProductPositionInfoStruct() {
  }

  public AccountProductPositionInfoStruct(
    String productid,
    double curbalance,
    double validbalance,
    double frozenquantity,
    double notcollectedquantity)
  {
    this();
    this.productid = productid;
    this.curbalance = curbalance;
    setCurbalanceIsSet(true);
    this.validbalance = validbalance;
    setValidbalanceIsSet(true);
    this.frozenquantity = frozenquantity;
    setFrozenquantityIsSet(true);
    this.notcollectedquantity = notcollectedquantity;
    setNotcollectedquantityIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AccountProductPositionInfoStruct(AccountProductPositionInfoStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProductid()) {
      this.productid = other.productid;
    }
    this.curbalance = other.curbalance;
    this.validbalance = other.validbalance;
    this.frozenquantity = other.frozenquantity;
    this.notcollectedquantity = other.notcollectedquantity;
  }

  public AccountProductPositionInfoStruct deepCopy() {
    return new AccountProductPositionInfoStruct(this);
  }

  @Override
  public void clear() {
    this.productid = null;
    setCurbalanceIsSet(false);
    this.curbalance = 0.0;
    setValidbalanceIsSet(false);
    this.validbalance = 0.0;
    setFrozenquantityIsSet(false);
    this.frozenquantity = 0.0;
    setNotcollectedquantityIsSet(false);
    this.notcollectedquantity = 0.0;
  }

  public String getProductid() {
    return this.productid;
  }

  public AccountProductPositionInfoStruct setProductid(String productid) {
    this.productid = productid;
    return this;
  }

  public void unsetProductid() {
    this.productid = null;
  }

  /** Returns true if field productid is set (has been assigned a value) and false otherwise */
  public boolean isSetProductid() {
    return this.productid != null;
  }

  public void setProductidIsSet(boolean value) {
    if (!value) {
      this.productid = null;
    }
  }

  public double getCurbalance() {
    return this.curbalance;
  }

  public AccountProductPositionInfoStruct setCurbalance(double curbalance) {
    this.curbalance = curbalance;
    setCurbalanceIsSet(true);
    return this;
  }

  public void unsetCurbalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURBALANCE_ISSET_ID);
  }

  /** Returns true if field curbalance is set (has been assigned a value) and false otherwise */
  public boolean isSetCurbalance() {
    return EncodingUtils.testBit(__isset_bitfield, __CURBALANCE_ISSET_ID);
  }

  public void setCurbalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURBALANCE_ISSET_ID, value);
  }

  public double getValidbalance() {
    return this.validbalance;
  }

  public AccountProductPositionInfoStruct setValidbalance(double validbalance) {
    this.validbalance = validbalance;
    setValidbalanceIsSet(true);
    return this;
  }

  public void unsetValidbalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALIDBALANCE_ISSET_ID);
  }

  /** Returns true if field validbalance is set (has been assigned a value) and false otherwise */
  public boolean isSetValidbalance() {
    return EncodingUtils.testBit(__isset_bitfield, __VALIDBALANCE_ISSET_ID);
  }

  public void setValidbalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALIDBALANCE_ISSET_ID, value);
  }

  public double getFrozenquantity() {
    return this.frozenquantity;
  }

  public AccountProductPositionInfoStruct setFrozenquantity(double frozenquantity) {
    this.frozenquantity = frozenquantity;
    setFrozenquantityIsSet(true);
    return this;
  }

  public void unsetFrozenquantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENQUANTITY_ISSET_ID);
  }

  /** Returns true if field frozenquantity is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenquantity() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENQUANTITY_ISSET_ID);
  }

  public void setFrozenquantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENQUANTITY_ISSET_ID, value);
  }

  public double getNotcollectedquantity() {
    return this.notcollectedquantity;
  }

  public AccountProductPositionInfoStruct setNotcollectedquantity(double notcollectedquantity) {
    this.notcollectedquantity = notcollectedquantity;
    setNotcollectedquantityIsSet(true);
    return this;
  }

  public void unsetNotcollectedquantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTCOLLECTEDQUANTITY_ISSET_ID);
  }

  /** Returns true if field notcollectedquantity is set (has been assigned a value) and false otherwise */
  public boolean isSetNotcollectedquantity() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTCOLLECTEDQUANTITY_ISSET_ID);
  }

  public void setNotcollectedquantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTCOLLECTEDQUANTITY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCTID:
      if (value == null) {
        unsetProductid();
      } else {
        setProductid((String)value);
      }
      break;

    case CURBALANCE:
      if (value == null) {
        unsetCurbalance();
      } else {
        setCurbalance((Double)value);
      }
      break;

    case VALIDBALANCE:
      if (value == null) {
        unsetValidbalance();
      } else {
        setValidbalance((Double)value);
      }
      break;

    case FROZENQUANTITY:
      if (value == null) {
        unsetFrozenquantity();
      } else {
        setFrozenquantity((Double)value);
      }
      break;

    case NOTCOLLECTEDQUANTITY:
      if (value == null) {
        unsetNotcollectedquantity();
      } else {
        setNotcollectedquantity((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCTID:
      return getProductid();

    case CURBALANCE:
      return Double.valueOf(getCurbalance());

    case VALIDBALANCE:
      return Double.valueOf(getValidbalance());

    case FROZENQUANTITY:
      return Double.valueOf(getFrozenquantity());

    case NOTCOLLECTEDQUANTITY:
      return Double.valueOf(getNotcollectedquantity());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCTID:
      return isSetProductid();
    case CURBALANCE:
      return isSetCurbalance();
    case VALIDBALANCE:
      return isSetValidbalance();
    case FROZENQUANTITY:
      return isSetFrozenquantity();
    case NOTCOLLECTEDQUANTITY:
      return isSetNotcollectedquantity();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AccountProductPositionInfoStruct)
      return this.equals((AccountProductPositionInfoStruct)that);
    return false;
  }

  public boolean equals(AccountProductPositionInfoStruct that) {
    if (that == null)
      return false;

    boolean this_present_productid = true && this.isSetProductid();
    boolean that_present_productid = true && that.isSetProductid();
    if (this_present_productid || that_present_productid) {
      if (!(this_present_productid && that_present_productid))
        return false;
      if (!this.productid.equals(that.productid))
        return false;
    }

    boolean this_present_curbalance = true;
    boolean that_present_curbalance = true;
    if (this_present_curbalance || that_present_curbalance) {
      if (!(this_present_curbalance && that_present_curbalance))
        return false;
      if (this.curbalance != that.curbalance)
        return false;
    }

    boolean this_present_validbalance = true;
    boolean that_present_validbalance = true;
    if (this_present_validbalance || that_present_validbalance) {
      if (!(this_present_validbalance && that_present_validbalance))
        return false;
      if (this.validbalance != that.validbalance)
        return false;
    }

    boolean this_present_frozenquantity = true;
    boolean that_present_frozenquantity = true;
    if (this_present_frozenquantity || that_present_frozenquantity) {
      if (!(this_present_frozenquantity && that_present_frozenquantity))
        return false;
      if (this.frozenquantity != that.frozenquantity)
        return false;
    }

    boolean this_present_notcollectedquantity = true;
    boolean that_present_notcollectedquantity = true;
    if (this_present_notcollectedquantity || that_present_notcollectedquantity) {
      if (!(this_present_notcollectedquantity && that_present_notcollectedquantity))
        return false;
      if (this.notcollectedquantity != that.notcollectedquantity)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(AccountProductPositionInfoStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductid()).compareTo(other.isSetProductid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productid, other.productid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurbalance()).compareTo(other.isSetCurbalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurbalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curbalance, other.curbalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidbalance()).compareTo(other.isSetValidbalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidbalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validbalance, other.validbalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenquantity()).compareTo(other.isSetFrozenquantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenquantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenquantity, other.frozenquantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotcollectedquantity()).compareTo(other.isSetNotcollectedquantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotcollectedquantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notcollectedquantity, other.notcollectedquantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AccountProductPositionInfoStruct(");
    boolean first = true;

    sb.append("productid:");
    if (this.productid == null) {
      sb.append("null");
    } else {
      sb.append(this.productid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("curbalance:");
    sb.append(this.curbalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("validbalance:");
    sb.append(this.validbalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frozenquantity:");
    sb.append(this.frozenquantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notcollectedquantity:");
    sb.append(this.notcollectedquantity);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (productid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'productid' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'curbalance' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'validbalance' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'frozenquantity' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'notcollectedquantity' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AccountProductPositionInfoStructStandardSchemeFactory implements SchemeFactory {
    public AccountProductPositionInfoStructStandardScheme getScheme() {
      return new AccountProductPositionInfoStructStandardScheme();
    }
  }

  private static class AccountProductPositionInfoStructStandardScheme extends StandardScheme<AccountProductPositionInfoStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AccountProductPositionInfoStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCTID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productid = iprot.readString();
              struct.setProductidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURBALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.curbalance = iprot.readDouble();
              struct.setCurbalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALIDBALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.validbalance = iprot.readDouble();
              struct.setValidbalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FROZENQUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenquantity = iprot.readDouble();
              struct.setFrozenquantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NOTCOLLECTEDQUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.notcollectedquantity = iprot.readDouble();
              struct.setNotcollectedquantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCurbalance()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'curbalance' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetValidbalance()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'validbalance' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFrozenquantity()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'frozenquantity' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNotcollectedquantity()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'notcollectedquantity' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AccountProductPositionInfoStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productid != null) {
        oprot.writeFieldBegin(PRODUCTID_FIELD_DESC);
        oprot.writeString(struct.productid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURBALANCE_FIELD_DESC);
      oprot.writeDouble(struct.curbalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALIDBALANCE_FIELD_DESC);
      oprot.writeDouble(struct.validbalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROZENQUANTITY_FIELD_DESC);
      oprot.writeDouble(struct.frozenquantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTCOLLECTEDQUANTITY_FIELD_DESC);
      oprot.writeDouble(struct.notcollectedquantity);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AccountProductPositionInfoStructTupleSchemeFactory implements SchemeFactory {
    public AccountProductPositionInfoStructTupleScheme getScheme() {
      return new AccountProductPositionInfoStructTupleScheme();
    }
  }

  private static class AccountProductPositionInfoStructTupleScheme extends TupleScheme<AccountProductPositionInfoStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AccountProductPositionInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.productid);
      oprot.writeDouble(struct.curbalance);
      oprot.writeDouble(struct.validbalance);
      oprot.writeDouble(struct.frozenquantity);
      oprot.writeDouble(struct.notcollectedquantity);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AccountProductPositionInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.productid = iprot.readString();
      struct.setProductidIsSet(true);
      struct.curbalance = iprot.readDouble();
      struct.setCurbalanceIsSet(true);
      struct.validbalance = iprot.readDouble();
      struct.setValidbalanceIsSet(true);
      struct.frozenquantity = iprot.readDouble();
      struct.setFrozenquantityIsSet(true);
      struct.notcollectedquantity = iprot.readDouble();
      struct.setNotcollectedquantityIsSet(true);
    }
  }

}

