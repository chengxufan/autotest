/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tongbaotu.fits.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AccountProductPositionInfoStruct implements org.apache.thrift.TBase<AccountProductPositionInfoStruct, AccountProductPositionInfoStruct._Fields>, java.io.Serializable, Cloneable, Comparable<AccountProductPositionInfoStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AccountProductPositionInfoStruct");

  private static final org.apache.thrift.protocol.TField PRODUCTID_FIELD_DESC = new org.apache.thrift.protocol.TField("productid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CURBALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("curbalance", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField VALIDBALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("validbalance", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField FROZENQUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenquantity", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField NOTCOLLECTEDQUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("notcollectedquantity", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField ASSETS_PROFITS_FIELD_DESC = new org.apache.thrift.protocol.TField("assets_profits", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField ASSETS_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("assets_value", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField TARGET_RATE_FORMULA_FIELD_DESC = new org.apache.thrift.protocol.TField("target_rate_formula", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField VALUE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("value_date", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField DUE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("due_date", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AccountProductPositionInfoStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AccountProductPositionInfoStructTupleSchemeFactory());
  }

  public String productid; // required
  public double curbalance; // required
  public double validbalance; // required
  public double frozenquantity; // required
  public double notcollectedquantity; // required
  public double assets_profits; // required
  public double assets_value; // required
  public int target_rate_formula; // required
  public int value_date; // required
  public int due_date; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRODUCTID((short)1, "productid"),
    CURBALANCE((short)2, "curbalance"),
    VALIDBALANCE((short)3, "validbalance"),
    FROZENQUANTITY((short)4, "frozenquantity"),
    NOTCOLLECTEDQUANTITY((short)5, "notcollectedquantity"),
    ASSETS_PROFITS((short)6, "assets_profits"),
    ASSETS_VALUE((short)7, "assets_value"),
    TARGET_RATE_FORMULA((short)8, "target_rate_formula"),
    VALUE_DATE((short)9, "value_date"),
    DUE_DATE((short)10, "due_date");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCTID
          return PRODUCTID;
        case 2: // CURBALANCE
          return CURBALANCE;
        case 3: // VALIDBALANCE
          return VALIDBALANCE;
        case 4: // FROZENQUANTITY
          return FROZENQUANTITY;
        case 5: // NOTCOLLECTEDQUANTITY
          return NOTCOLLECTEDQUANTITY;
        case 6: // ASSETS_PROFITS
          return ASSETS_PROFITS;
        case 7: // ASSETS_VALUE
          return ASSETS_VALUE;
        case 8: // TARGET_RATE_FORMULA
          return TARGET_RATE_FORMULA;
        case 9: // VALUE_DATE
          return VALUE_DATE;
        case 10: // DUE_DATE
          return DUE_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURBALANCE_ISSET_ID = 0;
  private static final int __VALIDBALANCE_ISSET_ID = 1;
  private static final int __FROZENQUANTITY_ISSET_ID = 2;
  private static final int __NOTCOLLECTEDQUANTITY_ISSET_ID = 3;
  private static final int __ASSETS_PROFITS_ISSET_ID = 4;
  private static final int __ASSETS_VALUE_ISSET_ID = 5;
  private static final int __TARGET_RATE_FORMULA_ISSET_ID = 6;
  private static final int __VALUE_DATE_ISSET_ID = 7;
  private static final int __DUE_DATE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCTID, new org.apache.thrift.meta_data.FieldMetaData("productid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURBALANCE, new org.apache.thrift.meta_data.FieldMetaData("curbalance", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VALIDBALANCE, new org.apache.thrift.meta_data.FieldMetaData("validbalance", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZENQUANTITY, new org.apache.thrift.meta_data.FieldMetaData("frozenquantity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOTCOLLECTEDQUANTITY, new org.apache.thrift.meta_data.FieldMetaData("notcollectedquantity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSETS_PROFITS, new org.apache.thrift.meta_data.FieldMetaData("assets_profits", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSETS_VALUE, new org.apache.thrift.meta_data.FieldMetaData("assets_value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TARGET_RATE_FORMULA, new org.apache.thrift.meta_data.FieldMetaData("target_rate_formula", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VALUE_DATE, new org.apache.thrift.meta_data.FieldMetaData("value_date", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DUE_DATE, new org.apache.thrift.meta_data.FieldMetaData("due_date", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AccountProductPositionInfoStruct.class, metaDataMap);
  }

  public AccountProductPositionInfoStruct() {
  }

  public AccountProductPositionInfoStruct(
    String productid,
    double curbalance,
    double validbalance,
    double frozenquantity,
    double notcollectedquantity,
    double assets_profits,
    double assets_value,
    int target_rate_formula,
    int value_date,
    int due_date)
  {
    this();
    this.productid = productid;
    this.curbalance = curbalance;
    setCurbalanceIsSet(true);
    this.validbalance = validbalance;
    setValidbalanceIsSet(true);
    this.frozenquantity = frozenquantity;
    setFrozenquantityIsSet(true);
    this.notcollectedquantity = notcollectedquantity;
    setNotcollectedquantityIsSet(true);
    this.assets_profits = assets_profits;
    setAssets_profitsIsSet(true);
    this.assets_value = assets_value;
    setAssets_valueIsSet(true);
    this.target_rate_formula = target_rate_formula;
    setTarget_rate_formulaIsSet(true);
    this.value_date = value_date;
    setValue_dateIsSet(true);
    this.due_date = due_date;
    setDue_dateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AccountProductPositionInfoStruct(AccountProductPositionInfoStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProductid()) {
      this.productid = other.productid;
    }
    this.curbalance = other.curbalance;
    this.validbalance = other.validbalance;
    this.frozenquantity = other.frozenquantity;
    this.notcollectedquantity = other.notcollectedquantity;
    this.assets_profits = other.assets_profits;
    this.assets_value = other.assets_value;
    this.target_rate_formula = other.target_rate_formula;
    this.value_date = other.value_date;
    this.due_date = other.due_date;
  }

  public AccountProductPositionInfoStruct deepCopy() {
    return new AccountProductPositionInfoStruct(this);
  }

  @Override
  public void clear() {
    this.productid = null;
    setCurbalanceIsSet(false);
    this.curbalance = 0.0;
    setValidbalanceIsSet(false);
    this.validbalance = 0.0;
    setFrozenquantityIsSet(false);
    this.frozenquantity = 0.0;
    setNotcollectedquantityIsSet(false);
    this.notcollectedquantity = 0.0;
    setAssets_profitsIsSet(false);
    this.assets_profits = 0.0;
    setAssets_valueIsSet(false);
    this.assets_value = 0.0;
    setTarget_rate_formulaIsSet(false);
    this.target_rate_formula = 0;
    setValue_dateIsSet(false);
    this.value_date = 0;
    setDue_dateIsSet(false);
    this.due_date = 0;
  }

  public String getProductid() {
    return this.productid;
  }

  public AccountProductPositionInfoStruct setProductid(String productid) {
    this.productid = productid;
    return this;
  }

  public void unsetProductid() {
    this.productid = null;
  }

  /** Returns true if field productid is set (has been assigned a value) and false otherwise */
  public boolean isSetProductid() {
    return this.productid != null;
  }

  public void setProductidIsSet(boolean value) {
    if (!value) {
      this.productid = null;
    }
  }

  public double getCurbalance() {
    return this.curbalance;
  }

  public AccountProductPositionInfoStruct setCurbalance(double curbalance) {
    this.curbalance = curbalance;
    setCurbalanceIsSet(true);
    return this;
  }

  public void unsetCurbalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURBALANCE_ISSET_ID);
  }

  /** Returns true if field curbalance is set (has been assigned a value) and false otherwise */
  public boolean isSetCurbalance() {
    return EncodingUtils.testBit(__isset_bitfield, __CURBALANCE_ISSET_ID);
  }

  public void setCurbalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURBALANCE_ISSET_ID, value);
  }

  public double getValidbalance() {
    return this.validbalance;
  }

  public AccountProductPositionInfoStruct setValidbalance(double validbalance) {
    this.validbalance = validbalance;
    setValidbalanceIsSet(true);
    return this;
  }

  public void unsetValidbalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALIDBALANCE_ISSET_ID);
  }

  /** Returns true if field validbalance is set (has been assigned a value) and false otherwise */
  public boolean isSetValidbalance() {
    return EncodingUtils.testBit(__isset_bitfield, __VALIDBALANCE_ISSET_ID);
  }

  public void setValidbalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALIDBALANCE_ISSET_ID, value);
  }

  public double getFrozenquantity() {
    return this.frozenquantity;
  }

  public AccountProductPositionInfoStruct setFrozenquantity(double frozenquantity) {
    this.frozenquantity = frozenquantity;
    setFrozenquantityIsSet(true);
    return this;
  }

  public void unsetFrozenquantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENQUANTITY_ISSET_ID);
  }

  /** Returns true if field frozenquantity is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenquantity() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENQUANTITY_ISSET_ID);
  }

  public void setFrozenquantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENQUANTITY_ISSET_ID, value);
  }

  public double getNotcollectedquantity() {
    return this.notcollectedquantity;
  }

  public AccountProductPositionInfoStruct setNotcollectedquantity(double notcollectedquantity) {
    this.notcollectedquantity = notcollectedquantity;
    setNotcollectedquantityIsSet(true);
    return this;
  }

  public void unsetNotcollectedquantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTCOLLECTEDQUANTITY_ISSET_ID);
  }

  /** Returns true if field notcollectedquantity is set (has been assigned a value) and false otherwise */
  public boolean isSetNotcollectedquantity() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTCOLLECTEDQUANTITY_ISSET_ID);
  }

  public void setNotcollectedquantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTCOLLECTEDQUANTITY_ISSET_ID, value);
  }

  public double getAssets_profits() {
    return this.assets_profits;
  }

  public AccountProductPositionInfoStruct setAssets_profits(double assets_profits) {
    this.assets_profits = assets_profits;
    setAssets_profitsIsSet(true);
    return this;
  }

  public void unsetAssets_profits() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSETS_PROFITS_ISSET_ID);
  }

  /** Returns true if field assets_profits is set (has been assigned a value) and false otherwise */
  public boolean isSetAssets_profits() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSETS_PROFITS_ISSET_ID);
  }

  public void setAssets_profitsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSETS_PROFITS_ISSET_ID, value);
  }

  public double getAssets_value() {
    return this.assets_value;
  }

  public AccountProductPositionInfoStruct setAssets_value(double assets_value) {
    this.assets_value = assets_value;
    setAssets_valueIsSet(true);
    return this;
  }

  public void unsetAssets_value() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSETS_VALUE_ISSET_ID);
  }

  /** Returns true if field assets_value is set (has been assigned a value) and false otherwise */
  public boolean isSetAssets_value() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSETS_VALUE_ISSET_ID);
  }

  public void setAssets_valueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSETS_VALUE_ISSET_ID, value);
  }

  public int getTarget_rate_formula() {
    return this.target_rate_formula;
  }

  public AccountProductPositionInfoStruct setTarget_rate_formula(int target_rate_formula) {
    this.target_rate_formula = target_rate_formula;
    setTarget_rate_formulaIsSet(true);
    return this;
  }

  public void unsetTarget_rate_formula() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGET_RATE_FORMULA_ISSET_ID);
  }

  /** Returns true if field target_rate_formula is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget_rate_formula() {
    return EncodingUtils.testBit(__isset_bitfield, __TARGET_RATE_FORMULA_ISSET_ID);
  }

  public void setTarget_rate_formulaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGET_RATE_FORMULA_ISSET_ID, value);
  }

  public int getValue_date() {
    return this.value_date;
  }

  public AccountProductPositionInfoStruct setValue_date(int value_date) {
    this.value_date = value_date;
    setValue_dateIsSet(true);
    return this;
  }

  public void unsetValue_date() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_DATE_ISSET_ID);
  }

  /** Returns true if field value_date is set (has been assigned a value) and false otherwise */
  public boolean isSetValue_date() {
    return EncodingUtils.testBit(__isset_bitfield, __VALUE_DATE_ISSET_ID);
  }

  public void setValue_dateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_DATE_ISSET_ID, value);
  }

  public int getDue_date() {
    return this.due_date;
  }

  public AccountProductPositionInfoStruct setDue_date(int due_date) {
    this.due_date = due_date;
    setDue_dateIsSet(true);
    return this;
  }

  public void unsetDue_date() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUE_DATE_ISSET_ID);
  }

  /** Returns true if field due_date is set (has been assigned a value) and false otherwise */
  public boolean isSetDue_date() {
    return EncodingUtils.testBit(__isset_bitfield, __DUE_DATE_ISSET_ID);
  }

  public void setDue_dateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUE_DATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCTID:
      if (value == null) {
        unsetProductid();
      } else {
        setProductid((String)value);
      }
      break;

    case CURBALANCE:
      if (value == null) {
        unsetCurbalance();
      } else {
        setCurbalance((Double)value);
      }
      break;

    case VALIDBALANCE:
      if (value == null) {
        unsetValidbalance();
      } else {
        setValidbalance((Double)value);
      }
      break;

    case FROZENQUANTITY:
      if (value == null) {
        unsetFrozenquantity();
      } else {
        setFrozenquantity((Double)value);
      }
      break;

    case NOTCOLLECTEDQUANTITY:
      if (value == null) {
        unsetNotcollectedquantity();
      } else {
        setNotcollectedquantity((Double)value);
      }
      break;

    case ASSETS_PROFITS:
      if (value == null) {
        unsetAssets_profits();
      } else {
        setAssets_profits((Double)value);
      }
      break;

    case ASSETS_VALUE:
      if (value == null) {
        unsetAssets_value();
      } else {
        setAssets_value((Double)value);
      }
      break;

    case TARGET_RATE_FORMULA:
      if (value == null) {
        unsetTarget_rate_formula();
      } else {
        setTarget_rate_formula((Integer)value);
      }
      break;

    case VALUE_DATE:
      if (value == null) {
        unsetValue_date();
      } else {
        setValue_date((Integer)value);
      }
      break;

    case DUE_DATE:
      if (value == null) {
        unsetDue_date();
      } else {
        setDue_date((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCTID:
      return getProductid();

    case CURBALANCE:
      return Double.valueOf(getCurbalance());

    case VALIDBALANCE:
      return Double.valueOf(getValidbalance());

    case FROZENQUANTITY:
      return Double.valueOf(getFrozenquantity());

    case NOTCOLLECTEDQUANTITY:
      return Double.valueOf(getNotcollectedquantity());

    case ASSETS_PROFITS:
      return Double.valueOf(getAssets_profits());

    case ASSETS_VALUE:
      return Double.valueOf(getAssets_value());

    case TARGET_RATE_FORMULA:
      return Integer.valueOf(getTarget_rate_formula());

    case VALUE_DATE:
      return Integer.valueOf(getValue_date());

    case DUE_DATE:
      return Integer.valueOf(getDue_date());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCTID:
      return isSetProductid();
    case CURBALANCE:
      return isSetCurbalance();
    case VALIDBALANCE:
      return isSetValidbalance();
    case FROZENQUANTITY:
      return isSetFrozenquantity();
    case NOTCOLLECTEDQUANTITY:
      return isSetNotcollectedquantity();
    case ASSETS_PROFITS:
      return isSetAssets_profits();
    case ASSETS_VALUE:
      return isSetAssets_value();
    case TARGET_RATE_FORMULA:
      return isSetTarget_rate_formula();
    case VALUE_DATE:
      return isSetValue_date();
    case DUE_DATE:
      return isSetDue_date();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AccountProductPositionInfoStruct)
      return this.equals((AccountProductPositionInfoStruct)that);
    return false;
  }

  public boolean equals(AccountProductPositionInfoStruct that) {
    if (that == null)
      return false;

    boolean this_present_productid = true && this.isSetProductid();
    boolean that_present_productid = true && that.isSetProductid();
    if (this_present_productid || that_present_productid) {
      if (!(this_present_productid && that_present_productid))
        return false;
      if (!this.productid.equals(that.productid))
        return false;
    }

    boolean this_present_curbalance = true;
    boolean that_present_curbalance = true;
    if (this_present_curbalance || that_present_curbalance) {
      if (!(this_present_curbalance && that_present_curbalance))
        return false;
      if (this.curbalance != that.curbalance)
        return false;
    }

    boolean this_present_validbalance = true;
    boolean that_present_validbalance = true;
    if (this_present_validbalance || that_present_validbalance) {
      if (!(this_present_validbalance && that_present_validbalance))
        return false;
      if (this.validbalance != that.validbalance)
        return false;
    }

    boolean this_present_frozenquantity = true;
    boolean that_present_frozenquantity = true;
    if (this_present_frozenquantity || that_present_frozenquantity) {
      if (!(this_present_frozenquantity && that_present_frozenquantity))
        return false;
      if (this.frozenquantity != that.frozenquantity)
        return false;
    }

    boolean this_present_notcollectedquantity = true;
    boolean that_present_notcollectedquantity = true;
    if (this_present_notcollectedquantity || that_present_notcollectedquantity) {
      if (!(this_present_notcollectedquantity && that_present_notcollectedquantity))
        return false;
      if (this.notcollectedquantity != that.notcollectedquantity)
        return false;
    }

    boolean this_present_assets_profits = true;
    boolean that_present_assets_profits = true;
    if (this_present_assets_profits || that_present_assets_profits) {
      if (!(this_present_assets_profits && that_present_assets_profits))
        return false;
      if (this.assets_profits != that.assets_profits)
        return false;
    }

    boolean this_present_assets_value = true;
    boolean that_present_assets_value = true;
    if (this_present_assets_value || that_present_assets_value) {
      if (!(this_present_assets_value && that_present_assets_value))
        return false;
      if (this.assets_value != that.assets_value)
        return false;
    }

    boolean this_present_target_rate_formula = true;
    boolean that_present_target_rate_formula = true;
    if (this_present_target_rate_formula || that_present_target_rate_formula) {
      if (!(this_present_target_rate_formula && that_present_target_rate_formula))
        return false;
      if (this.target_rate_formula != that.target_rate_formula)
        return false;
    }

    boolean this_present_value_date = true;
    boolean that_present_value_date = true;
    if (this_present_value_date || that_present_value_date) {
      if (!(this_present_value_date && that_present_value_date))
        return false;
      if (this.value_date != that.value_date)
        return false;
    }

    boolean this_present_due_date = true;
    boolean that_present_due_date = true;
    if (this_present_due_date || that_present_due_date) {
      if (!(this_present_due_date && that_present_due_date))
        return false;
      if (this.due_date != that.due_date)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(AccountProductPositionInfoStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductid()).compareTo(other.isSetProductid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productid, other.productid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurbalance()).compareTo(other.isSetCurbalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurbalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curbalance, other.curbalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidbalance()).compareTo(other.isSetValidbalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidbalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validbalance, other.validbalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenquantity()).compareTo(other.isSetFrozenquantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenquantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenquantity, other.frozenquantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotcollectedquantity()).compareTo(other.isSetNotcollectedquantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotcollectedquantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notcollectedquantity, other.notcollectedquantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssets_profits()).compareTo(other.isSetAssets_profits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssets_profits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assets_profits, other.assets_profits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssets_value()).compareTo(other.isSetAssets_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssets_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assets_value, other.assets_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTarget_rate_formula()).compareTo(other.isSetTarget_rate_formula());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget_rate_formula()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target_rate_formula, other.target_rate_formula);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue_date()).compareTo(other.isSetValue_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value_date, other.value_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDue_date()).compareTo(other.isSetDue_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDue_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.due_date, other.due_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AccountProductPositionInfoStruct(");
    boolean first = true;

    sb.append("productid:");
    if (this.productid == null) {
      sb.append("null");
    } else {
      sb.append(this.productid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("curbalance:");
    sb.append(this.curbalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("validbalance:");
    sb.append(this.validbalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frozenquantity:");
    sb.append(this.frozenquantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notcollectedquantity:");
    sb.append(this.notcollectedquantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assets_profits:");
    sb.append(this.assets_profits);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assets_value:");
    sb.append(this.assets_value);
    first = false;
    if (!first) sb.append(", ");
    sb.append("target_rate_formula:");
    sb.append(this.target_rate_formula);
    first = false;
    if (!first) sb.append(", ");
    sb.append("value_date:");
    sb.append(this.value_date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("due_date:");
    sb.append(this.due_date);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (productid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'productid' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'curbalance' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'validbalance' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'frozenquantity' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'notcollectedquantity' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'assets_profits' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'assets_value' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'target_rate_formula' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'value_date' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'due_date' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AccountProductPositionInfoStructStandardSchemeFactory implements SchemeFactory {
    public AccountProductPositionInfoStructStandardScheme getScheme() {
      return new AccountProductPositionInfoStructStandardScheme();
    }
  }

  private static class AccountProductPositionInfoStructStandardScheme extends StandardScheme<AccountProductPositionInfoStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AccountProductPositionInfoStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCTID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productid = iprot.readString();
              struct.setProductidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURBALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.curbalance = iprot.readDouble();
              struct.setCurbalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALIDBALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.validbalance = iprot.readDouble();
              struct.setValidbalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FROZENQUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenquantity = iprot.readDouble();
              struct.setFrozenquantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NOTCOLLECTEDQUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.notcollectedquantity = iprot.readDouble();
              struct.setNotcollectedquantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ASSETS_PROFITS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assets_profits = iprot.readDouble();
              struct.setAssets_profitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ASSETS_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assets_value = iprot.readDouble();
              struct.setAssets_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TARGET_RATE_FORMULA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.target_rate_formula = iprot.readI32();
              struct.setTarget_rate_formulaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VALUE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.value_date = iprot.readI32();
              struct.setValue_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DUE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.due_date = iprot.readI32();
              struct.setDue_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCurbalance()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'curbalance' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetValidbalance()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'validbalance' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFrozenquantity()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'frozenquantity' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNotcollectedquantity()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'notcollectedquantity' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAssets_profits()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'assets_profits' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAssets_value()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'assets_value' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTarget_rate_formula()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'target_rate_formula' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetValue_date()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'value_date' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDue_date()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'due_date' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AccountProductPositionInfoStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productid != null) {
        oprot.writeFieldBegin(PRODUCTID_FIELD_DESC);
        oprot.writeString(struct.productid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURBALANCE_FIELD_DESC);
      oprot.writeDouble(struct.curbalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALIDBALANCE_FIELD_DESC);
      oprot.writeDouble(struct.validbalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROZENQUANTITY_FIELD_DESC);
      oprot.writeDouble(struct.frozenquantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTCOLLECTEDQUANTITY_FIELD_DESC);
      oprot.writeDouble(struct.notcollectedquantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASSETS_PROFITS_FIELD_DESC);
      oprot.writeDouble(struct.assets_profits);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASSETS_VALUE_FIELD_DESC);
      oprot.writeDouble(struct.assets_value);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARGET_RATE_FORMULA_FIELD_DESC);
      oprot.writeI32(struct.target_rate_formula);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALUE_DATE_FIELD_DESC);
      oprot.writeI32(struct.value_date);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DUE_DATE_FIELD_DESC);
      oprot.writeI32(struct.due_date);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AccountProductPositionInfoStructTupleSchemeFactory implements SchemeFactory {
    public AccountProductPositionInfoStructTupleScheme getScheme() {
      return new AccountProductPositionInfoStructTupleScheme();
    }
  }

  private static class AccountProductPositionInfoStructTupleScheme extends TupleScheme<AccountProductPositionInfoStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AccountProductPositionInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.productid);
      oprot.writeDouble(struct.curbalance);
      oprot.writeDouble(struct.validbalance);
      oprot.writeDouble(struct.frozenquantity);
      oprot.writeDouble(struct.notcollectedquantity);
      oprot.writeDouble(struct.assets_profits);
      oprot.writeDouble(struct.assets_value);
      oprot.writeI32(struct.target_rate_formula);
      oprot.writeI32(struct.value_date);
      oprot.writeI32(struct.due_date);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AccountProductPositionInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.productid = iprot.readString();
      struct.setProductidIsSet(true);
      struct.curbalance = iprot.readDouble();
      struct.setCurbalanceIsSet(true);
      struct.validbalance = iprot.readDouble();
      struct.setValidbalanceIsSet(true);
      struct.frozenquantity = iprot.readDouble();
      struct.setFrozenquantityIsSet(true);
      struct.notcollectedquantity = iprot.readDouble();
      struct.setNotcollectedquantityIsSet(true);
      struct.assets_profits = iprot.readDouble();
      struct.setAssets_profitsIsSet(true);
      struct.assets_value = iprot.readDouble();
      struct.setAssets_valueIsSet(true);
      struct.target_rate_formula = iprot.readI32();
      struct.setTarget_rate_formulaIsSet(true);
      struct.value_date = iprot.readI32();
      struct.setValue_dateIsSet(true);
      struct.due_date = iprot.readI32();
      struct.setDue_dateIsSet(true);
    }
  }

}

