/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tongbaotu.fits.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Fits {

  public interface Iface {

    public InvestorRegisterResultInfoStruct investor_register(InvestorRegisterInfoStruct investorInfo) throws FitsException, org.apache.thrift.TException;

    public void investor_switchState(String investorID, int newState) throws FitsException, org.apache.thrift.TException;

    public void investor_updateRiskLevel(RiskLevelStruct riskLevel) throws FitsException, org.apache.thrift.TException;

    public BankSignResultStruct investor_bankSign(BankSignInfoStruct bankSignInfo) throws FitsException, org.apache.thrift.TException;

    public TransferResultStruct silverInvestTransfer(TransferInfoStruct transferInfo) throws FitsException, org.apache.thrift.TException;

    public PurchaseResultStruct purchaseProduct(PurchaseInfoStruct purchaseInfo) throws FitsException, org.apache.thrift.TException;

    public void issubank_register(IssuBankInfoStruct bInfo) throws FitsException, org.apache.thrift.TException;

    public IssuBankProductInfoResultStruct issubank_productregister(IssuBankProductInfoStruct productInfo) throws FitsException, org.apache.thrift.TException;

    public IssuBankInfoStruct issubank_getBankInfo(String issu_bank_id) throws FitsException, org.apache.thrift.TException;

    public void proxybank_regist(ProxyBankInfoStruct proxyBankInfo) throws FitsException, org.apache.thrift.TException;

    public ProxyBankInfoStruct proxybank_get(String id) throws FitsException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void investor_register(InvestorRegisterInfoStruct investorInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void investor_switchState(String investorID, int newState, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void investor_updateRiskLevel(RiskLevelStruct riskLevel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void investor_bankSign(BankSignInfoStruct bankSignInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void silverInvestTransfer(TransferInfoStruct transferInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void purchaseProduct(PurchaseInfoStruct purchaseInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void issubank_register(IssuBankInfoStruct bInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void issubank_productregister(IssuBankProductInfoStruct productInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void issubank_getBankInfo(String issu_bank_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void proxybank_regist(ProxyBankInfoStruct proxyBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void proxybank_get(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public InvestorRegisterResultInfoStruct investor_register(InvestorRegisterInfoStruct investorInfo) throws FitsException, org.apache.thrift.TException
    {
      send_investor_register(investorInfo);
      return recv_investor_register();
    }

    public void send_investor_register(InvestorRegisterInfoStruct investorInfo) throws org.apache.thrift.TException
    {
      investor_register_args args = new investor_register_args();
      args.setInvestorInfo(investorInfo);
      sendBase("investor_register", args);
    }

    public InvestorRegisterResultInfoStruct recv_investor_register() throws FitsException, org.apache.thrift.TException
    {
      investor_register_result result = new investor_register_result();
      receiveBase(result, "investor_register");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "investor_register failed: unknown result");
    }

    public void investor_switchState(String investorID, int newState) throws FitsException, org.apache.thrift.TException
    {
      send_investor_switchState(investorID, newState);
      recv_investor_switchState();
    }

    public void send_investor_switchState(String investorID, int newState) throws org.apache.thrift.TException
    {
      investor_switchState_args args = new investor_switchState_args();
      args.setInvestorID(investorID);
      args.setNewState(newState);
      sendBase("investor_switchState", args);
    }

    public void recv_investor_switchState() throws FitsException, org.apache.thrift.TException
    {
      investor_switchState_result result = new investor_switchState_result();
      receiveBase(result, "investor_switchState");
      if (result.fe != null) {
        throw result.fe;
      }
      return;
    }

    public void investor_updateRiskLevel(RiskLevelStruct riskLevel) throws FitsException, org.apache.thrift.TException
    {
      send_investor_updateRiskLevel(riskLevel);
      recv_investor_updateRiskLevel();
    }

    public void send_investor_updateRiskLevel(RiskLevelStruct riskLevel) throws org.apache.thrift.TException
    {
      investor_updateRiskLevel_args args = new investor_updateRiskLevel_args();
      args.setRiskLevel(riskLevel);
      sendBase("investor_updateRiskLevel", args);
    }

    public void recv_investor_updateRiskLevel() throws FitsException, org.apache.thrift.TException
    {
      investor_updateRiskLevel_result result = new investor_updateRiskLevel_result();
      receiveBase(result, "investor_updateRiskLevel");
      if (result.fe != null) {
        throw result.fe;
      }
      return;
    }

    public BankSignResultStruct investor_bankSign(BankSignInfoStruct bankSignInfo) throws FitsException, org.apache.thrift.TException
    {
      send_investor_bankSign(bankSignInfo);
      return recv_investor_bankSign();
    }

    public void send_investor_bankSign(BankSignInfoStruct bankSignInfo) throws org.apache.thrift.TException
    {
      investor_bankSign_args args = new investor_bankSign_args();
      args.setBankSignInfo(bankSignInfo);
      sendBase("investor_bankSign", args);
    }

    public BankSignResultStruct recv_investor_bankSign() throws FitsException, org.apache.thrift.TException
    {
      investor_bankSign_result result = new investor_bankSign_result();
      receiveBase(result, "investor_bankSign");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "investor_bankSign failed: unknown result");
    }

    public TransferResultStruct silverInvestTransfer(TransferInfoStruct transferInfo) throws FitsException, org.apache.thrift.TException
    {
      send_silverInvestTransfer(transferInfo);
      return recv_silverInvestTransfer();
    }

    public void send_silverInvestTransfer(TransferInfoStruct transferInfo) throws org.apache.thrift.TException
    {
      silverInvestTransfer_args args = new silverInvestTransfer_args();
      args.setTransferInfo(transferInfo);
      sendBase("silverInvestTransfer", args);
    }

    public TransferResultStruct recv_silverInvestTransfer() throws FitsException, org.apache.thrift.TException
    {
      silverInvestTransfer_result result = new silverInvestTransfer_result();
      receiveBase(result, "silverInvestTransfer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "silverInvestTransfer failed: unknown result");
    }

    public PurchaseResultStruct purchaseProduct(PurchaseInfoStruct purchaseInfo) throws FitsException, org.apache.thrift.TException
    {
      send_purchaseProduct(purchaseInfo);
      return recv_purchaseProduct();
    }

    public void send_purchaseProduct(PurchaseInfoStruct purchaseInfo) throws org.apache.thrift.TException
    {
      purchaseProduct_args args = new purchaseProduct_args();
      args.setPurchaseInfo(purchaseInfo);
      sendBase("purchaseProduct", args);
    }

    public PurchaseResultStruct recv_purchaseProduct() throws FitsException, org.apache.thrift.TException
    {
      purchaseProduct_result result = new purchaseProduct_result();
      receiveBase(result, "purchaseProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "purchaseProduct failed: unknown result");
    }

    public void issubank_register(IssuBankInfoStruct bInfo) throws FitsException, org.apache.thrift.TException
    {
      send_issubank_register(bInfo);
      recv_issubank_register();
    }

    public void send_issubank_register(IssuBankInfoStruct bInfo) throws org.apache.thrift.TException
    {
      issubank_register_args args = new issubank_register_args();
      args.setBInfo(bInfo);
      sendBase("issubank_register", args);
    }

    public void recv_issubank_register() throws FitsException, org.apache.thrift.TException
    {
      issubank_register_result result = new issubank_register_result();
      receiveBase(result, "issubank_register");
      if (result.fe != null) {
        throw result.fe;
      }
      return;
    }

    public IssuBankProductInfoResultStruct issubank_productregister(IssuBankProductInfoStruct productInfo) throws FitsException, org.apache.thrift.TException
    {
      send_issubank_productregister(productInfo);
      return recv_issubank_productregister();
    }

    public void send_issubank_productregister(IssuBankProductInfoStruct productInfo) throws org.apache.thrift.TException
    {
      issubank_productregister_args args = new issubank_productregister_args();
      args.setProductInfo(productInfo);
      sendBase("issubank_productregister", args);
    }

    public IssuBankProductInfoResultStruct recv_issubank_productregister() throws FitsException, org.apache.thrift.TException
    {
      issubank_productregister_result result = new issubank_productregister_result();
      receiveBase(result, "issubank_productregister");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "issubank_productregister failed: unknown result");
    }

    public IssuBankInfoStruct issubank_getBankInfo(String issu_bank_id) throws FitsException, org.apache.thrift.TException
    {
      send_issubank_getBankInfo(issu_bank_id);
      return recv_issubank_getBankInfo();
    }

    public void send_issubank_getBankInfo(String issu_bank_id) throws org.apache.thrift.TException
    {
      issubank_getBankInfo_args args = new issubank_getBankInfo_args();
      args.setIssu_bank_id(issu_bank_id);
      sendBase("issubank_getBankInfo", args);
    }

    public IssuBankInfoStruct recv_issubank_getBankInfo() throws FitsException, org.apache.thrift.TException
    {
      issubank_getBankInfo_result result = new issubank_getBankInfo_result();
      receiveBase(result, "issubank_getBankInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "issubank_getBankInfo failed: unknown result");
    }

    public void proxybank_regist(ProxyBankInfoStruct proxyBankInfo) throws FitsException, org.apache.thrift.TException
    {
      send_proxybank_regist(proxyBankInfo);
      recv_proxybank_regist();
    }

    public void send_proxybank_regist(ProxyBankInfoStruct proxyBankInfo) throws org.apache.thrift.TException
    {
      proxybank_regist_args args = new proxybank_regist_args();
      args.setProxyBankInfo(proxyBankInfo);
      sendBase("proxybank_regist", args);
    }

    public void recv_proxybank_regist() throws FitsException, org.apache.thrift.TException
    {
      proxybank_regist_result result = new proxybank_regist_result();
      receiveBase(result, "proxybank_regist");
      if (result.fe != null) {
        throw result.fe;
      }
      return;
    }

    public ProxyBankInfoStruct proxybank_get(String id) throws FitsException, org.apache.thrift.TException
    {
      send_proxybank_get(id);
      return recv_proxybank_get();
    }

    public void send_proxybank_get(String id) throws org.apache.thrift.TException
    {
      proxybank_get_args args = new proxybank_get_args();
      args.setId(id);
      sendBase("proxybank_get", args);
    }

    public ProxyBankInfoStruct recv_proxybank_get() throws FitsException, org.apache.thrift.TException
    {
      proxybank_get_result result = new proxybank_get_result();
      receiveBase(result, "proxybank_get");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "proxybank_get failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void investor_register(InvestorRegisterInfoStruct investorInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      investor_register_call method_call = new investor_register_call(investorInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class investor_register_call extends org.apache.thrift.async.TAsyncMethodCall {
      private InvestorRegisterInfoStruct investorInfo;
      public investor_register_call(InvestorRegisterInfoStruct investorInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.investorInfo = investorInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("investor_register", org.apache.thrift.protocol.TMessageType.CALL, 0));
        investor_register_args args = new investor_register_args();
        args.setInvestorInfo(investorInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public InvestorRegisterResultInfoStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_investor_register();
      }
    }

    public void investor_switchState(String investorID, int newState, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      investor_switchState_call method_call = new investor_switchState_call(investorID, newState, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class investor_switchState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String investorID;
      private int newState;
      public investor_switchState_call(String investorID, int newState, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.investorID = investorID;
        this.newState = newState;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("investor_switchState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        investor_switchState_args args = new investor_switchState_args();
        args.setInvestorID(investorID);
        args.setNewState(newState);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_investor_switchState();
      }
    }

    public void investor_updateRiskLevel(RiskLevelStruct riskLevel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      investor_updateRiskLevel_call method_call = new investor_updateRiskLevel_call(riskLevel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class investor_updateRiskLevel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RiskLevelStruct riskLevel;
      public investor_updateRiskLevel_call(RiskLevelStruct riskLevel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.riskLevel = riskLevel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("investor_updateRiskLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        investor_updateRiskLevel_args args = new investor_updateRiskLevel_args();
        args.setRiskLevel(riskLevel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_investor_updateRiskLevel();
      }
    }

    public void investor_bankSign(BankSignInfoStruct bankSignInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      investor_bankSign_call method_call = new investor_bankSign_call(bankSignInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class investor_bankSign_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BankSignInfoStruct bankSignInfo;
      public investor_bankSign_call(BankSignInfoStruct bankSignInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bankSignInfo = bankSignInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("investor_bankSign", org.apache.thrift.protocol.TMessageType.CALL, 0));
        investor_bankSign_args args = new investor_bankSign_args();
        args.setBankSignInfo(bankSignInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BankSignResultStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_investor_bankSign();
      }
    }

    public void silverInvestTransfer(TransferInfoStruct transferInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      silverInvestTransfer_call method_call = new silverInvestTransfer_call(transferInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class silverInvestTransfer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TransferInfoStruct transferInfo;
      public silverInvestTransfer_call(TransferInfoStruct transferInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transferInfo = transferInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("silverInvestTransfer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        silverInvestTransfer_args args = new silverInvestTransfer_args();
        args.setTransferInfo(transferInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TransferResultStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_silverInvestTransfer();
      }
    }

    public void purchaseProduct(PurchaseInfoStruct purchaseInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      purchaseProduct_call method_call = new purchaseProduct_call(purchaseInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class purchaseProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PurchaseInfoStruct purchaseInfo;
      public purchaseProduct_call(PurchaseInfoStruct purchaseInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.purchaseInfo = purchaseInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("purchaseProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        purchaseProduct_args args = new purchaseProduct_args();
        args.setPurchaseInfo(purchaseInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PurchaseResultStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_purchaseProduct();
      }
    }

    public void issubank_register(IssuBankInfoStruct bInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      issubank_register_call method_call = new issubank_register_call(bInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class issubank_register_call extends org.apache.thrift.async.TAsyncMethodCall {
      private IssuBankInfoStruct bInfo;
      public issubank_register_call(IssuBankInfoStruct bInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bInfo = bInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("issubank_register", org.apache.thrift.protocol.TMessageType.CALL, 0));
        issubank_register_args args = new issubank_register_args();
        args.setBInfo(bInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_issubank_register();
      }
    }

    public void issubank_productregister(IssuBankProductInfoStruct productInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      issubank_productregister_call method_call = new issubank_productregister_call(productInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class issubank_productregister_call extends org.apache.thrift.async.TAsyncMethodCall {
      private IssuBankProductInfoStruct productInfo;
      public issubank_productregister_call(IssuBankProductInfoStruct productInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productInfo = productInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("issubank_productregister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        issubank_productregister_args args = new issubank_productregister_args();
        args.setProductInfo(productInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IssuBankProductInfoResultStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_issubank_productregister();
      }
    }

    public void issubank_getBankInfo(String issu_bank_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      issubank_getBankInfo_call method_call = new issubank_getBankInfo_call(issu_bank_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class issubank_getBankInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String issu_bank_id;
      public issubank_getBankInfo_call(String issu_bank_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.issu_bank_id = issu_bank_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("issubank_getBankInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        issubank_getBankInfo_args args = new issubank_getBankInfo_args();
        args.setIssu_bank_id(issu_bank_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IssuBankInfoStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_issubank_getBankInfo();
      }
    }

    public void proxybank_regist(ProxyBankInfoStruct proxyBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      proxybank_regist_call method_call = new proxybank_regist_call(proxyBankInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class proxybank_regist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProxyBankInfoStruct proxyBankInfo;
      public proxybank_regist_call(ProxyBankInfoStruct proxyBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.proxyBankInfo = proxyBankInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("proxybank_regist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        proxybank_regist_args args = new proxybank_regist_args();
        args.setProxyBankInfo(proxyBankInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_proxybank_regist();
      }
    }

    public void proxybank_get(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      proxybank_get_call method_call = new proxybank_get_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class proxybank_get_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public proxybank_get_call(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("proxybank_get", org.apache.thrift.protocol.TMessageType.CALL, 0));
        proxybank_get_args args = new proxybank_get_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProxyBankInfoStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_proxybank_get();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("investor_register", new investor_register());
      processMap.put("investor_switchState", new investor_switchState());
      processMap.put("investor_updateRiskLevel", new investor_updateRiskLevel());
      processMap.put("investor_bankSign", new investor_bankSign());
      processMap.put("silverInvestTransfer", new silverInvestTransfer());
      processMap.put("purchaseProduct", new purchaseProduct());
      processMap.put("issubank_register", new issubank_register());
      processMap.put("issubank_productregister", new issubank_productregister());
      processMap.put("issubank_getBankInfo", new issubank_getBankInfo());
      processMap.put("proxybank_regist", new proxybank_regist());
      processMap.put("proxybank_get", new proxybank_get());
      return processMap;
    }

    public static class investor_register<I extends Iface> extends org.apache.thrift.ProcessFunction<I, investor_register_args> {
      public investor_register() {
        super("investor_register");
      }

      public investor_register_args getEmptyArgsInstance() {
        return new investor_register_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public investor_register_result getResult(I iface, investor_register_args args) throws org.apache.thrift.TException {
        investor_register_result result = new investor_register_result();
        try {
          result.success = iface.investor_register(args.investorInfo);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class investor_switchState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, investor_switchState_args> {
      public investor_switchState() {
        super("investor_switchState");
      }

      public investor_switchState_args getEmptyArgsInstance() {
        return new investor_switchState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public investor_switchState_result getResult(I iface, investor_switchState_args args) throws org.apache.thrift.TException {
        investor_switchState_result result = new investor_switchState_result();
        try {
          iface.investor_switchState(args.investorID, args.newState);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class investor_updateRiskLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, investor_updateRiskLevel_args> {
      public investor_updateRiskLevel() {
        super("investor_updateRiskLevel");
      }

      public investor_updateRiskLevel_args getEmptyArgsInstance() {
        return new investor_updateRiskLevel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public investor_updateRiskLevel_result getResult(I iface, investor_updateRiskLevel_args args) throws org.apache.thrift.TException {
        investor_updateRiskLevel_result result = new investor_updateRiskLevel_result();
        try {
          iface.investor_updateRiskLevel(args.riskLevel);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class investor_bankSign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, investor_bankSign_args> {
      public investor_bankSign() {
        super("investor_bankSign");
      }

      public investor_bankSign_args getEmptyArgsInstance() {
        return new investor_bankSign_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public investor_bankSign_result getResult(I iface, investor_bankSign_args args) throws org.apache.thrift.TException {
        investor_bankSign_result result = new investor_bankSign_result();
        try {
          result.success = iface.investor_bankSign(args.bankSignInfo);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class silverInvestTransfer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, silverInvestTransfer_args> {
      public silverInvestTransfer() {
        super("silverInvestTransfer");
      }

      public silverInvestTransfer_args getEmptyArgsInstance() {
        return new silverInvestTransfer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public silverInvestTransfer_result getResult(I iface, silverInvestTransfer_args args) throws org.apache.thrift.TException {
        silverInvestTransfer_result result = new silverInvestTransfer_result();
        try {
          result.success = iface.silverInvestTransfer(args.transferInfo);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class purchaseProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, purchaseProduct_args> {
      public purchaseProduct() {
        super("purchaseProduct");
      }

      public purchaseProduct_args getEmptyArgsInstance() {
        return new purchaseProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public purchaseProduct_result getResult(I iface, purchaseProduct_args args) throws org.apache.thrift.TException {
        purchaseProduct_result result = new purchaseProduct_result();
        try {
          result.success = iface.purchaseProduct(args.purchaseInfo);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class issubank_register<I extends Iface> extends org.apache.thrift.ProcessFunction<I, issubank_register_args> {
      public issubank_register() {
        super("issubank_register");
      }

      public issubank_register_args getEmptyArgsInstance() {
        return new issubank_register_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public issubank_register_result getResult(I iface, issubank_register_args args) throws org.apache.thrift.TException {
        issubank_register_result result = new issubank_register_result();
        try {
          iface.issubank_register(args.bInfo);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class issubank_productregister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, issubank_productregister_args> {
      public issubank_productregister() {
        super("issubank_productregister");
      }

      public issubank_productregister_args getEmptyArgsInstance() {
        return new issubank_productregister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public issubank_productregister_result getResult(I iface, issubank_productregister_args args) throws org.apache.thrift.TException {
        issubank_productregister_result result = new issubank_productregister_result();
        try {
          result.success = iface.issubank_productregister(args.productInfo);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class issubank_getBankInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, issubank_getBankInfo_args> {
      public issubank_getBankInfo() {
        super("issubank_getBankInfo");
      }

      public issubank_getBankInfo_args getEmptyArgsInstance() {
        return new issubank_getBankInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public issubank_getBankInfo_result getResult(I iface, issubank_getBankInfo_args args) throws org.apache.thrift.TException {
        issubank_getBankInfo_result result = new issubank_getBankInfo_result();
        try {
          result.success = iface.issubank_getBankInfo(args.issu_bank_id);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class proxybank_regist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, proxybank_regist_args> {
      public proxybank_regist() {
        super("proxybank_regist");
      }

      public proxybank_regist_args getEmptyArgsInstance() {
        return new proxybank_regist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public proxybank_regist_result getResult(I iface, proxybank_regist_args args) throws org.apache.thrift.TException {
        proxybank_regist_result result = new proxybank_regist_result();
        try {
          iface.proxybank_regist(args.proxyBankInfo);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class proxybank_get<I extends Iface> extends org.apache.thrift.ProcessFunction<I, proxybank_get_args> {
      public proxybank_get() {
        super("proxybank_get");
      }

      public proxybank_get_args getEmptyArgsInstance() {
        return new proxybank_get_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public proxybank_get_result getResult(I iface, proxybank_get_args args) throws org.apache.thrift.TException {
        proxybank_get_result result = new proxybank_get_result();
        try {
          result.success = iface.proxybank_get(args.id);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("investor_register", new investor_register());
      processMap.put("investor_switchState", new investor_switchState());
      processMap.put("investor_updateRiskLevel", new investor_updateRiskLevel());
      processMap.put("investor_bankSign", new investor_bankSign());
      processMap.put("silverInvestTransfer", new silverInvestTransfer());
      processMap.put("purchaseProduct", new purchaseProduct());
      processMap.put("issubank_register", new issubank_register());
      processMap.put("issubank_productregister", new issubank_productregister());
      processMap.put("issubank_getBankInfo", new issubank_getBankInfo());
      processMap.put("proxybank_regist", new proxybank_regist());
      processMap.put("proxybank_get", new proxybank_get());
      return processMap;
    }

    public static class investor_register<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, investor_register_args, InvestorRegisterResultInfoStruct> {
      public investor_register() {
        super("investor_register");
      }

      public investor_register_args getEmptyArgsInstance() {
        return new investor_register_args();
      }

      public AsyncMethodCallback<InvestorRegisterResultInfoStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<InvestorRegisterResultInfoStruct>() { 
          public void onComplete(InvestorRegisterResultInfoStruct o) {
            investor_register_result result = new investor_register_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            investor_register_result result = new investor_register_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, investor_register_args args, org.apache.thrift.async.AsyncMethodCallback<InvestorRegisterResultInfoStruct> resultHandler) throws TException {
        iface.investor_register(args.investorInfo,resultHandler);
      }
    }

    public static class investor_switchState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, investor_switchState_args, Void> {
      public investor_switchState() {
        super("investor_switchState");
      }

      public investor_switchState_args getEmptyArgsInstance() {
        return new investor_switchState_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            investor_switchState_result result = new investor_switchState_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            investor_switchState_result result = new investor_switchState_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, investor_switchState_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.investor_switchState(args.investorID, args.newState,resultHandler);
      }
    }

    public static class investor_updateRiskLevel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, investor_updateRiskLevel_args, Void> {
      public investor_updateRiskLevel() {
        super("investor_updateRiskLevel");
      }

      public investor_updateRiskLevel_args getEmptyArgsInstance() {
        return new investor_updateRiskLevel_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            investor_updateRiskLevel_result result = new investor_updateRiskLevel_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            investor_updateRiskLevel_result result = new investor_updateRiskLevel_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, investor_updateRiskLevel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.investor_updateRiskLevel(args.riskLevel,resultHandler);
      }
    }

    public static class investor_bankSign<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, investor_bankSign_args, BankSignResultStruct> {
      public investor_bankSign() {
        super("investor_bankSign");
      }

      public investor_bankSign_args getEmptyArgsInstance() {
        return new investor_bankSign_args();
      }

      public AsyncMethodCallback<BankSignResultStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BankSignResultStruct>() { 
          public void onComplete(BankSignResultStruct o) {
            investor_bankSign_result result = new investor_bankSign_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            investor_bankSign_result result = new investor_bankSign_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, investor_bankSign_args args, org.apache.thrift.async.AsyncMethodCallback<BankSignResultStruct> resultHandler) throws TException {
        iface.investor_bankSign(args.bankSignInfo,resultHandler);
      }
    }

    public static class silverInvestTransfer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, silverInvestTransfer_args, TransferResultStruct> {
      public silverInvestTransfer() {
        super("silverInvestTransfer");
      }

      public silverInvestTransfer_args getEmptyArgsInstance() {
        return new silverInvestTransfer_args();
      }

      public AsyncMethodCallback<TransferResultStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TransferResultStruct>() { 
          public void onComplete(TransferResultStruct o) {
            silverInvestTransfer_result result = new silverInvestTransfer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            silverInvestTransfer_result result = new silverInvestTransfer_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, silverInvestTransfer_args args, org.apache.thrift.async.AsyncMethodCallback<TransferResultStruct> resultHandler) throws TException {
        iface.silverInvestTransfer(args.transferInfo,resultHandler);
      }
    }

    public static class purchaseProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, purchaseProduct_args, PurchaseResultStruct> {
      public purchaseProduct() {
        super("purchaseProduct");
      }

      public purchaseProduct_args getEmptyArgsInstance() {
        return new purchaseProduct_args();
      }

      public AsyncMethodCallback<PurchaseResultStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PurchaseResultStruct>() { 
          public void onComplete(PurchaseResultStruct o) {
            purchaseProduct_result result = new purchaseProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            purchaseProduct_result result = new purchaseProduct_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, purchaseProduct_args args, org.apache.thrift.async.AsyncMethodCallback<PurchaseResultStruct> resultHandler) throws TException {
        iface.purchaseProduct(args.purchaseInfo,resultHandler);
      }
    }

    public static class issubank_register<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, issubank_register_args, Void> {
      public issubank_register() {
        super("issubank_register");
      }

      public issubank_register_args getEmptyArgsInstance() {
        return new issubank_register_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            issubank_register_result result = new issubank_register_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            issubank_register_result result = new issubank_register_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, issubank_register_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.issubank_register(args.bInfo,resultHandler);
      }
    }

    public static class issubank_productregister<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, issubank_productregister_args, IssuBankProductInfoResultStruct> {
      public issubank_productregister() {
        super("issubank_productregister");
      }

      public issubank_productregister_args getEmptyArgsInstance() {
        return new issubank_productregister_args();
      }

      public AsyncMethodCallback<IssuBankProductInfoResultStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IssuBankProductInfoResultStruct>() { 
          public void onComplete(IssuBankProductInfoResultStruct o) {
            issubank_productregister_result result = new issubank_productregister_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            issubank_productregister_result result = new issubank_productregister_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, issubank_productregister_args args, org.apache.thrift.async.AsyncMethodCallback<IssuBankProductInfoResultStruct> resultHandler) throws TException {
        iface.issubank_productregister(args.productInfo,resultHandler);
      }
    }

    public static class issubank_getBankInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, issubank_getBankInfo_args, IssuBankInfoStruct> {
      public issubank_getBankInfo() {
        super("issubank_getBankInfo");
      }

      public issubank_getBankInfo_args getEmptyArgsInstance() {
        return new issubank_getBankInfo_args();
      }

      public AsyncMethodCallback<IssuBankInfoStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IssuBankInfoStruct>() { 
          public void onComplete(IssuBankInfoStruct o) {
            issubank_getBankInfo_result result = new issubank_getBankInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            issubank_getBankInfo_result result = new issubank_getBankInfo_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, issubank_getBankInfo_args args, org.apache.thrift.async.AsyncMethodCallback<IssuBankInfoStruct> resultHandler) throws TException {
        iface.issubank_getBankInfo(args.issu_bank_id,resultHandler);
      }
    }

    public static class proxybank_regist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, proxybank_regist_args, Void> {
      public proxybank_regist() {
        super("proxybank_regist");
      }

      public proxybank_regist_args getEmptyArgsInstance() {
        return new proxybank_regist_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            proxybank_regist_result result = new proxybank_regist_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            proxybank_regist_result result = new proxybank_regist_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, proxybank_regist_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.proxybank_regist(args.proxyBankInfo,resultHandler);
      }
    }

    public static class proxybank_get<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, proxybank_get_args, ProxyBankInfoStruct> {
      public proxybank_get() {
        super("proxybank_get");
      }

      public proxybank_get_args getEmptyArgsInstance() {
        return new proxybank_get_args();
      }

      public AsyncMethodCallback<ProxyBankInfoStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProxyBankInfoStruct>() { 
          public void onComplete(ProxyBankInfoStruct o) {
            proxybank_get_result result = new proxybank_get_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            proxybank_get_result result = new proxybank_get_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, proxybank_get_args args, org.apache.thrift.async.AsyncMethodCallback<ProxyBankInfoStruct> resultHandler) throws TException {
        iface.proxybank_get(args.id,resultHandler);
      }
    }

  }

  public static class investor_register_args implements org.apache.thrift.TBase<investor_register_args, investor_register_args._Fields>, java.io.Serializable, Cloneable, Comparable<investor_register_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_register_args");

    private static final org.apache.thrift.protocol.TField INVESTOR_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("investorInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_register_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_register_argsTupleSchemeFactory());
    }

    public InvestorRegisterInfoStruct investorInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVESTOR_INFO((short)1, "investorInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVESTOR_INFO
            return INVESTOR_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVESTOR_INFO, new org.apache.thrift.meta_data.FieldMetaData("investorInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvestorRegisterInfoStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_register_args.class, metaDataMap);
    }

    public investor_register_args() {
    }

    public investor_register_args(
      InvestorRegisterInfoStruct investorInfo)
    {
      this();
      this.investorInfo = investorInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_register_args(investor_register_args other) {
      if (other.isSetInvestorInfo()) {
        this.investorInfo = new InvestorRegisterInfoStruct(other.investorInfo);
      }
    }

    public investor_register_args deepCopy() {
      return new investor_register_args(this);
    }

    @Override
    public void clear() {
      this.investorInfo = null;
    }

    public InvestorRegisterInfoStruct getInvestorInfo() {
      return this.investorInfo;
    }

    public investor_register_args setInvestorInfo(InvestorRegisterInfoStruct investorInfo) {
      this.investorInfo = investorInfo;
      return this;
    }

    public void unsetInvestorInfo() {
      this.investorInfo = null;
    }

    /** Returns true if field investorInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetInvestorInfo() {
      return this.investorInfo != null;
    }

    public void setInvestorInfoIsSet(boolean value) {
      if (!value) {
        this.investorInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INVESTOR_INFO:
        if (value == null) {
          unsetInvestorInfo();
        } else {
          setInvestorInfo((InvestorRegisterInfoStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INVESTOR_INFO:
        return getInvestorInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INVESTOR_INFO:
        return isSetInvestorInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_register_args)
        return this.equals((investor_register_args)that);
      return false;
    }

    public boolean equals(investor_register_args that) {
      if (that == null)
        return false;

      boolean this_present_investorInfo = true && this.isSetInvestorInfo();
      boolean that_present_investorInfo = true && that.isSetInvestorInfo();
      if (this_present_investorInfo || that_present_investorInfo) {
        if (!(this_present_investorInfo && that_present_investorInfo))
          return false;
        if (!this.investorInfo.equals(that.investorInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_register_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInvestorInfo()).compareTo(other.isSetInvestorInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvestorInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorInfo, other.investorInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_register_args(");
      boolean first = true;

      sb.append("investorInfo:");
      if (this.investorInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.investorInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (investorInfo != null) {
        investorInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_register_argsStandardSchemeFactory implements SchemeFactory {
      public investor_register_argsStandardScheme getScheme() {
        return new investor_register_argsStandardScheme();
      }
    }

    private static class investor_register_argsStandardScheme extends StandardScheme<investor_register_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVESTOR_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.investorInfo = new InvestorRegisterInfoStruct();
                struct.investorInfo.read(iprot);
                struct.setInvestorInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_register_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.investorInfo != null) {
          oprot.writeFieldBegin(INVESTOR_INFO_FIELD_DESC);
          struct.investorInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_register_argsTupleSchemeFactory implements SchemeFactory {
      public investor_register_argsTupleScheme getScheme() {
        return new investor_register_argsTupleScheme();
      }
    }

    private static class investor_register_argsTupleScheme extends TupleScheme<investor_register_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_register_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInvestorInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInvestorInfo()) {
          struct.investorInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_register_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.investorInfo = new InvestorRegisterInfoStruct();
          struct.investorInfo.read(iprot);
          struct.setInvestorInfoIsSet(true);
        }
      }
    }

  }

  public static class investor_register_result implements org.apache.thrift.TBase<investor_register_result, investor_register_result._Fields>, java.io.Serializable, Cloneable, Comparable<investor_register_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_register_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_register_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_register_resultTupleSchemeFactory());
    }

    public InvestorRegisterResultInfoStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvestorRegisterResultInfoStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_register_result.class, metaDataMap);
    }

    public investor_register_result() {
    }

    public investor_register_result(
      InvestorRegisterResultInfoStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_register_result(investor_register_result other) {
      if (other.isSetSuccess()) {
        this.success = new InvestorRegisterResultInfoStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public investor_register_result deepCopy() {
      return new investor_register_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public InvestorRegisterResultInfoStruct getSuccess() {
      return this.success;
    }

    public investor_register_result setSuccess(InvestorRegisterResultInfoStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public investor_register_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((InvestorRegisterResultInfoStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_register_result)
        return this.equals((investor_register_result)that);
      return false;
    }

    public boolean equals(investor_register_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_register_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_register_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_register_resultStandardSchemeFactory implements SchemeFactory {
      public investor_register_resultStandardScheme getScheme() {
        return new investor_register_resultStandardScheme();
      }
    }

    private static class investor_register_resultStandardScheme extends StandardScheme<investor_register_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new InvestorRegisterResultInfoStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_register_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_register_resultTupleSchemeFactory implements SchemeFactory {
      public investor_register_resultTupleScheme getScheme() {
        return new investor_register_resultTupleScheme();
      }
    }

    private static class investor_register_resultTupleScheme extends TupleScheme<investor_register_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_register_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_register_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new InvestorRegisterResultInfoStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class investor_switchState_args implements org.apache.thrift.TBase<investor_switchState_args, investor_switchState_args._Fields>, java.io.Serializable, Cloneable, Comparable<investor_switchState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_switchState_args");

    private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("newState", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_switchState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_switchState_argsTupleSchemeFactory());
    }

    public String investorID; // required
    public int newState; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVESTOR_ID((short)1, "investorID"),
      NEW_STATE((short)2, "newState");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVESTOR_ID
            return INVESTOR_ID;
          case 2: // NEW_STATE
            return NEW_STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NEWSTATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_STATE, new org.apache.thrift.meta_data.FieldMetaData("newState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_switchState_args.class, metaDataMap);
    }

    public investor_switchState_args() {
    }

    public investor_switchState_args(
      String investorID,
      int newState)
    {
      this();
      this.investorID = investorID;
      this.newState = newState;
      setNewStateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_switchState_args(investor_switchState_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInvestorID()) {
        this.investorID = other.investorID;
      }
      this.newState = other.newState;
    }

    public investor_switchState_args deepCopy() {
      return new investor_switchState_args(this);
    }

    @Override
    public void clear() {
      this.investorID = null;
      setNewStateIsSet(false);
      this.newState = 0;
    }

    public String getInvestorID() {
      return this.investorID;
    }

    public investor_switchState_args setInvestorID(String investorID) {
      this.investorID = investorID;
      return this;
    }

    public void unsetInvestorID() {
      this.investorID = null;
    }

    /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
    public boolean isSetInvestorID() {
      return this.investorID != null;
    }

    public void setInvestorIDIsSet(boolean value) {
      if (!value) {
        this.investorID = null;
      }
    }

    public int getNewState() {
      return this.newState;
    }

    public investor_switchState_args setNewState(int newState) {
      this.newState = newState;
      setNewStateIsSet(true);
      return this;
    }

    public void unsetNewState() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWSTATE_ISSET_ID);
    }

    /** Returns true if field newState is set (has been assigned a value) and false otherwise */
    public boolean isSetNewState() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWSTATE_ISSET_ID);
    }

    public void setNewStateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWSTATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INVESTOR_ID:
        if (value == null) {
          unsetInvestorID();
        } else {
          setInvestorID((String)value);
        }
        break;

      case NEW_STATE:
        if (value == null) {
          unsetNewState();
        } else {
          setNewState((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INVESTOR_ID:
        return getInvestorID();

      case NEW_STATE:
        return Integer.valueOf(getNewState());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INVESTOR_ID:
        return isSetInvestorID();
      case NEW_STATE:
        return isSetNewState();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_switchState_args)
        return this.equals((investor_switchState_args)that);
      return false;
    }

    public boolean equals(investor_switchState_args that) {
      if (that == null)
        return false;

      boolean this_present_investorID = true && this.isSetInvestorID();
      boolean that_present_investorID = true && that.isSetInvestorID();
      if (this_present_investorID || that_present_investorID) {
        if (!(this_present_investorID && that_present_investorID))
          return false;
        if (!this.investorID.equals(that.investorID))
          return false;
      }

      boolean this_present_newState = true;
      boolean that_present_newState = true;
      if (this_present_newState || that_present_newState) {
        if (!(this_present_newState && that_present_newState))
          return false;
        if (this.newState != that.newState)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_switchState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvestorID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewState()).compareTo(other.isSetNewState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newState, other.newState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_switchState_args(");
      boolean first = true;

      sb.append("investorID:");
      if (this.investorID == null) {
        sb.append("null");
      } else {
        sb.append(this.investorID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newState:");
      sb.append(this.newState);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_switchState_argsStandardSchemeFactory implements SchemeFactory {
      public investor_switchState_argsStandardScheme getScheme() {
        return new investor_switchState_argsStandardScheme();
      }
    }

    private static class investor_switchState_argsStandardScheme extends StandardScheme<investor_switchState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_switchState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVESTOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.investorID = iprot.readString();
                struct.setInvestorIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newState = iprot.readI32();
                struct.setNewStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_switchState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.investorID != null) {
          oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
          oprot.writeString(struct.investorID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NEW_STATE_FIELD_DESC);
        oprot.writeI32(struct.newState);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_switchState_argsTupleSchemeFactory implements SchemeFactory {
      public investor_switchState_argsTupleScheme getScheme() {
        return new investor_switchState_argsTupleScheme();
      }
    }

    private static class investor_switchState_argsTupleScheme extends TupleScheme<investor_switchState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_switchState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInvestorID()) {
          optionals.set(0);
        }
        if (struct.isSetNewState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInvestorID()) {
          oprot.writeString(struct.investorID);
        }
        if (struct.isSetNewState()) {
          oprot.writeI32(struct.newState);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_switchState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.investorID = iprot.readString();
          struct.setInvestorIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newState = iprot.readI32();
          struct.setNewStateIsSet(true);
        }
      }
    }

  }

  public static class investor_switchState_result implements org.apache.thrift.TBase<investor_switchState_result, investor_switchState_result._Fields>, java.io.Serializable, Cloneable, Comparable<investor_switchState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_switchState_result");

    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_switchState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_switchState_resultTupleSchemeFactory());
    }

    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_switchState_result.class, metaDataMap);
    }

    public investor_switchState_result() {
    }

    public investor_switchState_result(
      FitsException fe)
    {
      this();
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_switchState_result(investor_switchState_result other) {
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public investor_switchState_result deepCopy() {
      return new investor_switchState_result(this);
    }

    @Override
    public void clear() {
      this.fe = null;
    }

    public FitsException getFe() {
      return this.fe;
    }

    public investor_switchState_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_switchState_result)
        return this.equals((investor_switchState_result)that);
      return false;
    }

    public boolean equals(investor_switchState_result that) {
      if (that == null)
        return false;

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_switchState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_switchState_result(");
      boolean first = true;

      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_switchState_resultStandardSchemeFactory implements SchemeFactory {
      public investor_switchState_resultStandardScheme getScheme() {
        return new investor_switchState_resultStandardScheme();
      }
    }

    private static class investor_switchState_resultStandardScheme extends StandardScheme<investor_switchState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_switchState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_switchState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_switchState_resultTupleSchemeFactory implements SchemeFactory {
      public investor_switchState_resultTupleScheme getScheme() {
        return new investor_switchState_resultTupleScheme();
      }
    }

    private static class investor_switchState_resultTupleScheme extends TupleScheme<investor_switchState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_switchState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_switchState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class investor_updateRiskLevel_args implements org.apache.thrift.TBase<investor_updateRiskLevel_args, investor_updateRiskLevel_args._Fields>, java.io.Serializable, Cloneable, Comparable<investor_updateRiskLevel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_updateRiskLevel_args");

    private static final org.apache.thrift.protocol.TField RISK_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("riskLevel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_updateRiskLevel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_updateRiskLevel_argsTupleSchemeFactory());
    }

    public RiskLevelStruct riskLevel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RISK_LEVEL((short)1, "riskLevel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RISK_LEVEL
            return RISK_LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RISK_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("riskLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RiskLevelStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_updateRiskLevel_args.class, metaDataMap);
    }

    public investor_updateRiskLevel_args() {
    }

    public investor_updateRiskLevel_args(
      RiskLevelStruct riskLevel)
    {
      this();
      this.riskLevel = riskLevel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_updateRiskLevel_args(investor_updateRiskLevel_args other) {
      if (other.isSetRiskLevel()) {
        this.riskLevel = new RiskLevelStruct(other.riskLevel);
      }
    }

    public investor_updateRiskLevel_args deepCopy() {
      return new investor_updateRiskLevel_args(this);
    }

    @Override
    public void clear() {
      this.riskLevel = null;
    }

    public RiskLevelStruct getRiskLevel() {
      return this.riskLevel;
    }

    public investor_updateRiskLevel_args setRiskLevel(RiskLevelStruct riskLevel) {
      this.riskLevel = riskLevel;
      return this;
    }

    public void unsetRiskLevel() {
      this.riskLevel = null;
    }

    /** Returns true if field riskLevel is set (has been assigned a value) and false otherwise */
    public boolean isSetRiskLevel() {
      return this.riskLevel != null;
    }

    public void setRiskLevelIsSet(boolean value) {
      if (!value) {
        this.riskLevel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RISK_LEVEL:
        if (value == null) {
          unsetRiskLevel();
        } else {
          setRiskLevel((RiskLevelStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RISK_LEVEL:
        return getRiskLevel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RISK_LEVEL:
        return isSetRiskLevel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_updateRiskLevel_args)
        return this.equals((investor_updateRiskLevel_args)that);
      return false;
    }

    public boolean equals(investor_updateRiskLevel_args that) {
      if (that == null)
        return false;

      boolean this_present_riskLevel = true && this.isSetRiskLevel();
      boolean that_present_riskLevel = true && that.isSetRiskLevel();
      if (this_present_riskLevel || that_present_riskLevel) {
        if (!(this_present_riskLevel && that_present_riskLevel))
          return false;
        if (!this.riskLevel.equals(that.riskLevel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_updateRiskLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRiskLevel()).compareTo(other.isSetRiskLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiskLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskLevel, other.riskLevel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_updateRiskLevel_args(");
      boolean first = true;

      sb.append("riskLevel:");
      if (this.riskLevel == null) {
        sb.append("null");
      } else {
        sb.append(this.riskLevel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (riskLevel != null) {
        riskLevel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_updateRiskLevel_argsStandardSchemeFactory implements SchemeFactory {
      public investor_updateRiskLevel_argsStandardScheme getScheme() {
        return new investor_updateRiskLevel_argsStandardScheme();
      }
    }

    private static class investor_updateRiskLevel_argsStandardScheme extends StandardScheme<investor_updateRiskLevel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_updateRiskLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RISK_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.riskLevel = new RiskLevelStruct();
                struct.riskLevel.read(iprot);
                struct.setRiskLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_updateRiskLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.riskLevel != null) {
          oprot.writeFieldBegin(RISK_LEVEL_FIELD_DESC);
          struct.riskLevel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_updateRiskLevel_argsTupleSchemeFactory implements SchemeFactory {
      public investor_updateRiskLevel_argsTupleScheme getScheme() {
        return new investor_updateRiskLevel_argsTupleScheme();
      }
    }

    private static class investor_updateRiskLevel_argsTupleScheme extends TupleScheme<investor_updateRiskLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_updateRiskLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRiskLevel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRiskLevel()) {
          struct.riskLevel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_updateRiskLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.riskLevel = new RiskLevelStruct();
          struct.riskLevel.read(iprot);
          struct.setRiskLevelIsSet(true);
        }
      }
    }

  }

  public static class investor_updateRiskLevel_result implements org.apache.thrift.TBase<investor_updateRiskLevel_result, investor_updateRiskLevel_result._Fields>, java.io.Serializable, Cloneable, Comparable<investor_updateRiskLevel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_updateRiskLevel_result");

    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_updateRiskLevel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_updateRiskLevel_resultTupleSchemeFactory());
    }

    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_updateRiskLevel_result.class, metaDataMap);
    }

    public investor_updateRiskLevel_result() {
    }

    public investor_updateRiskLevel_result(
      FitsException fe)
    {
      this();
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_updateRiskLevel_result(investor_updateRiskLevel_result other) {
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public investor_updateRiskLevel_result deepCopy() {
      return new investor_updateRiskLevel_result(this);
    }

    @Override
    public void clear() {
      this.fe = null;
    }

    public FitsException getFe() {
      return this.fe;
    }

    public investor_updateRiskLevel_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_updateRiskLevel_result)
        return this.equals((investor_updateRiskLevel_result)that);
      return false;
    }

    public boolean equals(investor_updateRiskLevel_result that) {
      if (that == null)
        return false;

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_updateRiskLevel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_updateRiskLevel_result(");
      boolean first = true;

      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_updateRiskLevel_resultStandardSchemeFactory implements SchemeFactory {
      public investor_updateRiskLevel_resultStandardScheme getScheme() {
        return new investor_updateRiskLevel_resultStandardScheme();
      }
    }

    private static class investor_updateRiskLevel_resultStandardScheme extends StandardScheme<investor_updateRiskLevel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_updateRiskLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_updateRiskLevel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_updateRiskLevel_resultTupleSchemeFactory implements SchemeFactory {
      public investor_updateRiskLevel_resultTupleScheme getScheme() {
        return new investor_updateRiskLevel_resultTupleScheme();
      }
    }

    private static class investor_updateRiskLevel_resultTupleScheme extends TupleScheme<investor_updateRiskLevel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_updateRiskLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_updateRiskLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class investor_bankSign_args implements org.apache.thrift.TBase<investor_bankSign_args, investor_bankSign_args._Fields>, java.io.Serializable, Cloneable, Comparable<investor_bankSign_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_bankSign_args");

    private static final org.apache.thrift.protocol.TField BANK_SIGN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankSignInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_bankSign_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_bankSign_argsTupleSchemeFactory());
    }

    public BankSignInfoStruct bankSignInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_SIGN_INFO((short)1, "bankSignInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_SIGN_INFO
            return BANK_SIGN_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_SIGN_INFO, new org.apache.thrift.meta_data.FieldMetaData("bankSignInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BankSignInfoStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_bankSign_args.class, metaDataMap);
    }

    public investor_bankSign_args() {
    }

    public investor_bankSign_args(
      BankSignInfoStruct bankSignInfo)
    {
      this();
      this.bankSignInfo = bankSignInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_bankSign_args(investor_bankSign_args other) {
      if (other.isSetBankSignInfo()) {
        this.bankSignInfo = new BankSignInfoStruct(other.bankSignInfo);
      }
    }

    public investor_bankSign_args deepCopy() {
      return new investor_bankSign_args(this);
    }

    @Override
    public void clear() {
      this.bankSignInfo = null;
    }

    public BankSignInfoStruct getBankSignInfo() {
      return this.bankSignInfo;
    }

    public investor_bankSign_args setBankSignInfo(BankSignInfoStruct bankSignInfo) {
      this.bankSignInfo = bankSignInfo;
      return this;
    }

    public void unsetBankSignInfo() {
      this.bankSignInfo = null;
    }

    /** Returns true if field bankSignInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankSignInfo() {
      return this.bankSignInfo != null;
    }

    public void setBankSignInfoIsSet(boolean value) {
      if (!value) {
        this.bankSignInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_SIGN_INFO:
        if (value == null) {
          unsetBankSignInfo();
        } else {
          setBankSignInfo((BankSignInfoStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_SIGN_INFO:
        return getBankSignInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_SIGN_INFO:
        return isSetBankSignInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_bankSign_args)
        return this.equals((investor_bankSign_args)that);
      return false;
    }

    public boolean equals(investor_bankSign_args that) {
      if (that == null)
        return false;

      boolean this_present_bankSignInfo = true && this.isSetBankSignInfo();
      boolean that_present_bankSignInfo = true && that.isSetBankSignInfo();
      if (this_present_bankSignInfo || that_present_bankSignInfo) {
        if (!(this_present_bankSignInfo && that_present_bankSignInfo))
          return false;
        if (!this.bankSignInfo.equals(that.bankSignInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_bankSign_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankSignInfo()).compareTo(other.isSetBankSignInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankSignInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankSignInfo, other.bankSignInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_bankSign_args(");
      boolean first = true;

      sb.append("bankSignInfo:");
      if (this.bankSignInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankSignInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bankSignInfo != null) {
        bankSignInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_bankSign_argsStandardSchemeFactory implements SchemeFactory {
      public investor_bankSign_argsStandardScheme getScheme() {
        return new investor_bankSign_argsStandardScheme();
      }
    }

    private static class investor_bankSign_argsStandardScheme extends StandardScheme<investor_bankSign_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_bankSign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_SIGN_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bankSignInfo = new BankSignInfoStruct();
                struct.bankSignInfo.read(iprot);
                struct.setBankSignInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_bankSign_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bankSignInfo != null) {
          oprot.writeFieldBegin(BANK_SIGN_INFO_FIELD_DESC);
          struct.bankSignInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_bankSign_argsTupleSchemeFactory implements SchemeFactory {
      public investor_bankSign_argsTupleScheme getScheme() {
        return new investor_bankSign_argsTupleScheme();
      }
    }

    private static class investor_bankSign_argsTupleScheme extends TupleScheme<investor_bankSign_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_bankSign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankSignInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBankSignInfo()) {
          struct.bankSignInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_bankSign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bankSignInfo = new BankSignInfoStruct();
          struct.bankSignInfo.read(iprot);
          struct.setBankSignInfoIsSet(true);
        }
      }
    }

  }

  public static class investor_bankSign_result implements org.apache.thrift.TBase<investor_bankSign_result, investor_bankSign_result._Fields>, java.io.Serializable, Cloneable, Comparable<investor_bankSign_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_bankSign_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_bankSign_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_bankSign_resultTupleSchemeFactory());
    }

    public BankSignResultStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BankSignResultStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_bankSign_result.class, metaDataMap);
    }

    public investor_bankSign_result() {
    }

    public investor_bankSign_result(
      BankSignResultStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_bankSign_result(investor_bankSign_result other) {
      if (other.isSetSuccess()) {
        this.success = new BankSignResultStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public investor_bankSign_result deepCopy() {
      return new investor_bankSign_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public BankSignResultStruct getSuccess() {
      return this.success;
    }

    public investor_bankSign_result setSuccess(BankSignResultStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public investor_bankSign_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BankSignResultStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_bankSign_result)
        return this.equals((investor_bankSign_result)that);
      return false;
    }

    public boolean equals(investor_bankSign_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_bankSign_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_bankSign_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_bankSign_resultStandardSchemeFactory implements SchemeFactory {
      public investor_bankSign_resultStandardScheme getScheme() {
        return new investor_bankSign_resultStandardScheme();
      }
    }

    private static class investor_bankSign_resultStandardScheme extends StandardScheme<investor_bankSign_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_bankSign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BankSignResultStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_bankSign_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_bankSign_resultTupleSchemeFactory implements SchemeFactory {
      public investor_bankSign_resultTupleScheme getScheme() {
        return new investor_bankSign_resultTupleScheme();
      }
    }

    private static class investor_bankSign_resultTupleScheme extends TupleScheme<investor_bankSign_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_bankSign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_bankSign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new BankSignResultStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class silverInvestTransfer_args implements org.apache.thrift.TBase<silverInvestTransfer_args, silverInvestTransfer_args._Fields>, java.io.Serializable, Cloneable, Comparable<silverInvestTransfer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("silverInvestTransfer_args");

    private static final org.apache.thrift.protocol.TField TRANSFER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("transferInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new silverInvestTransfer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new silverInvestTransfer_argsTupleSchemeFactory());
    }

    public TransferInfoStruct transferInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSFER_INFO((short)1, "transferInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSFER_INFO
            return TRANSFER_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSFER_INFO, new org.apache.thrift.meta_data.FieldMetaData("transferInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransferInfoStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(silverInvestTransfer_args.class, metaDataMap);
    }

    public silverInvestTransfer_args() {
    }

    public silverInvestTransfer_args(
      TransferInfoStruct transferInfo)
    {
      this();
      this.transferInfo = transferInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public silverInvestTransfer_args(silverInvestTransfer_args other) {
      if (other.isSetTransferInfo()) {
        this.transferInfo = new TransferInfoStruct(other.transferInfo);
      }
    }

    public silverInvestTransfer_args deepCopy() {
      return new silverInvestTransfer_args(this);
    }

    @Override
    public void clear() {
      this.transferInfo = null;
    }

    public TransferInfoStruct getTransferInfo() {
      return this.transferInfo;
    }

    public silverInvestTransfer_args setTransferInfo(TransferInfoStruct transferInfo) {
      this.transferInfo = transferInfo;
      return this;
    }

    public void unsetTransferInfo() {
      this.transferInfo = null;
    }

    /** Returns true if field transferInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransferInfo() {
      return this.transferInfo != null;
    }

    public void setTransferInfoIsSet(boolean value) {
      if (!value) {
        this.transferInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANSFER_INFO:
        if (value == null) {
          unsetTransferInfo();
        } else {
          setTransferInfo((TransferInfoStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSFER_INFO:
        return getTransferInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANSFER_INFO:
        return isSetTransferInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof silverInvestTransfer_args)
        return this.equals((silverInvestTransfer_args)that);
      return false;
    }

    public boolean equals(silverInvestTransfer_args that) {
      if (that == null)
        return false;

      boolean this_present_transferInfo = true && this.isSetTransferInfo();
      boolean that_present_transferInfo = true && that.isSetTransferInfo();
      if (this_present_transferInfo || that_present_transferInfo) {
        if (!(this_present_transferInfo && that_present_transferInfo))
          return false;
        if (!this.transferInfo.equals(that.transferInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(silverInvestTransfer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransferInfo()).compareTo(other.isSetTransferInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransferInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferInfo, other.transferInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("silverInvestTransfer_args(");
      boolean first = true;

      sb.append("transferInfo:");
      if (this.transferInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.transferInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (transferInfo != null) {
        transferInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class silverInvestTransfer_argsStandardSchemeFactory implements SchemeFactory {
      public silverInvestTransfer_argsStandardScheme getScheme() {
        return new silverInvestTransfer_argsStandardScheme();
      }
    }

    private static class silverInvestTransfer_argsStandardScheme extends StandardScheme<silverInvestTransfer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, silverInvestTransfer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSFER_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transferInfo = new TransferInfoStruct();
                struct.transferInfo.read(iprot);
                struct.setTransferInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, silverInvestTransfer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transferInfo != null) {
          oprot.writeFieldBegin(TRANSFER_INFO_FIELD_DESC);
          struct.transferInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class silverInvestTransfer_argsTupleSchemeFactory implements SchemeFactory {
      public silverInvestTransfer_argsTupleScheme getScheme() {
        return new silverInvestTransfer_argsTupleScheme();
      }
    }

    private static class silverInvestTransfer_argsTupleScheme extends TupleScheme<silverInvestTransfer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, silverInvestTransfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransferInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTransferInfo()) {
          struct.transferInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, silverInvestTransfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.transferInfo = new TransferInfoStruct();
          struct.transferInfo.read(iprot);
          struct.setTransferInfoIsSet(true);
        }
      }
    }

  }

  public static class silverInvestTransfer_result implements org.apache.thrift.TBase<silverInvestTransfer_result, silverInvestTransfer_result._Fields>, java.io.Serializable, Cloneable, Comparable<silverInvestTransfer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("silverInvestTransfer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new silverInvestTransfer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new silverInvestTransfer_resultTupleSchemeFactory());
    }

    public TransferResultStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransferResultStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(silverInvestTransfer_result.class, metaDataMap);
    }

    public silverInvestTransfer_result() {
    }

    public silverInvestTransfer_result(
      TransferResultStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public silverInvestTransfer_result(silverInvestTransfer_result other) {
      if (other.isSetSuccess()) {
        this.success = new TransferResultStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public silverInvestTransfer_result deepCopy() {
      return new silverInvestTransfer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public TransferResultStruct getSuccess() {
      return this.success;
    }

    public silverInvestTransfer_result setSuccess(TransferResultStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public silverInvestTransfer_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TransferResultStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof silverInvestTransfer_result)
        return this.equals((silverInvestTransfer_result)that);
      return false;
    }

    public boolean equals(silverInvestTransfer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(silverInvestTransfer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("silverInvestTransfer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class silverInvestTransfer_resultStandardSchemeFactory implements SchemeFactory {
      public silverInvestTransfer_resultStandardScheme getScheme() {
        return new silverInvestTransfer_resultStandardScheme();
      }
    }

    private static class silverInvestTransfer_resultStandardScheme extends StandardScheme<silverInvestTransfer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, silverInvestTransfer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TransferResultStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, silverInvestTransfer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class silverInvestTransfer_resultTupleSchemeFactory implements SchemeFactory {
      public silverInvestTransfer_resultTupleScheme getScheme() {
        return new silverInvestTransfer_resultTupleScheme();
      }
    }

    private static class silverInvestTransfer_resultTupleScheme extends TupleScheme<silverInvestTransfer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, silverInvestTransfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, silverInvestTransfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TransferResultStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class purchaseProduct_args implements org.apache.thrift.TBase<purchaseProduct_args, purchaseProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<purchaseProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purchaseProduct_args");

    private static final org.apache.thrift.protocol.TField PURCHASE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("purchaseInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purchaseProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purchaseProduct_argsTupleSchemeFactory());
    }

    public PurchaseInfoStruct purchaseInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PURCHASE_INFO((short)1, "purchaseInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PURCHASE_INFO
            return PURCHASE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PURCHASE_INFO, new org.apache.thrift.meta_data.FieldMetaData("purchaseInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PurchaseInfoStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purchaseProduct_args.class, metaDataMap);
    }

    public purchaseProduct_args() {
    }

    public purchaseProduct_args(
      PurchaseInfoStruct purchaseInfo)
    {
      this();
      this.purchaseInfo = purchaseInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purchaseProduct_args(purchaseProduct_args other) {
      if (other.isSetPurchaseInfo()) {
        this.purchaseInfo = new PurchaseInfoStruct(other.purchaseInfo);
      }
    }

    public purchaseProduct_args deepCopy() {
      return new purchaseProduct_args(this);
    }

    @Override
    public void clear() {
      this.purchaseInfo = null;
    }

    public PurchaseInfoStruct getPurchaseInfo() {
      return this.purchaseInfo;
    }

    public purchaseProduct_args setPurchaseInfo(PurchaseInfoStruct purchaseInfo) {
      this.purchaseInfo = purchaseInfo;
      return this;
    }

    public void unsetPurchaseInfo() {
      this.purchaseInfo = null;
    }

    /** Returns true if field purchaseInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetPurchaseInfo() {
      return this.purchaseInfo != null;
    }

    public void setPurchaseInfoIsSet(boolean value) {
      if (!value) {
        this.purchaseInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PURCHASE_INFO:
        if (value == null) {
          unsetPurchaseInfo();
        } else {
          setPurchaseInfo((PurchaseInfoStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PURCHASE_INFO:
        return getPurchaseInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PURCHASE_INFO:
        return isSetPurchaseInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purchaseProduct_args)
        return this.equals((purchaseProduct_args)that);
      return false;
    }

    public boolean equals(purchaseProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_purchaseInfo = true && this.isSetPurchaseInfo();
      boolean that_present_purchaseInfo = true && that.isSetPurchaseInfo();
      if (this_present_purchaseInfo || that_present_purchaseInfo) {
        if (!(this_present_purchaseInfo && that_present_purchaseInfo))
          return false;
        if (!this.purchaseInfo.equals(that.purchaseInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(purchaseProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPurchaseInfo()).compareTo(other.isSetPurchaseInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurchaseInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purchaseInfo, other.purchaseInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purchaseProduct_args(");
      boolean first = true;

      sb.append("purchaseInfo:");
      if (this.purchaseInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.purchaseInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (purchaseInfo != null) {
        purchaseInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class purchaseProduct_argsStandardSchemeFactory implements SchemeFactory {
      public purchaseProduct_argsStandardScheme getScheme() {
        return new purchaseProduct_argsStandardScheme();
      }
    }

    private static class purchaseProduct_argsStandardScheme extends StandardScheme<purchaseProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purchaseProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PURCHASE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.purchaseInfo = new PurchaseInfoStruct();
                struct.purchaseInfo.read(iprot);
                struct.setPurchaseInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purchaseProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.purchaseInfo != null) {
          oprot.writeFieldBegin(PURCHASE_INFO_FIELD_DESC);
          struct.purchaseInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purchaseProduct_argsTupleSchemeFactory implements SchemeFactory {
      public purchaseProduct_argsTupleScheme getScheme() {
        return new purchaseProduct_argsTupleScheme();
      }
    }

    private static class purchaseProduct_argsTupleScheme extends TupleScheme<purchaseProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purchaseProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPurchaseInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPurchaseInfo()) {
          struct.purchaseInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purchaseProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.purchaseInfo = new PurchaseInfoStruct();
          struct.purchaseInfo.read(iprot);
          struct.setPurchaseInfoIsSet(true);
        }
      }
    }

  }

  public static class purchaseProduct_result implements org.apache.thrift.TBase<purchaseProduct_result, purchaseProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<purchaseProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purchaseProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purchaseProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purchaseProduct_resultTupleSchemeFactory());
    }

    public PurchaseResultStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PurchaseResultStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purchaseProduct_result.class, metaDataMap);
    }

    public purchaseProduct_result() {
    }

    public purchaseProduct_result(
      PurchaseResultStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purchaseProduct_result(purchaseProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new PurchaseResultStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public purchaseProduct_result deepCopy() {
      return new purchaseProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public PurchaseResultStruct getSuccess() {
      return this.success;
    }

    public purchaseProduct_result setSuccess(PurchaseResultStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public purchaseProduct_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PurchaseResultStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purchaseProduct_result)
        return this.equals((purchaseProduct_result)that);
      return false;
    }

    public boolean equals(purchaseProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(purchaseProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purchaseProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class purchaseProduct_resultStandardSchemeFactory implements SchemeFactory {
      public purchaseProduct_resultStandardScheme getScheme() {
        return new purchaseProduct_resultStandardScheme();
      }
    }

    private static class purchaseProduct_resultStandardScheme extends StandardScheme<purchaseProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purchaseProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PurchaseResultStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purchaseProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purchaseProduct_resultTupleSchemeFactory implements SchemeFactory {
      public purchaseProduct_resultTupleScheme getScheme() {
        return new purchaseProduct_resultTupleScheme();
      }
    }

    private static class purchaseProduct_resultTupleScheme extends TupleScheme<purchaseProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purchaseProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purchaseProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PurchaseResultStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class issubank_register_args implements org.apache.thrift.TBase<issubank_register_args, issubank_register_args._Fields>, java.io.Serializable, Cloneable, Comparable<issubank_register_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issubank_register_args");

    private static final org.apache.thrift.protocol.TField B_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("bInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issubank_register_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issubank_register_argsTupleSchemeFactory());
    }

    public IssuBankInfoStruct bInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      B_INFO((short)1, "bInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // B_INFO
            return B_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.B_INFO, new org.apache.thrift.meta_data.FieldMetaData("bInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IssuBankInfoStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issubank_register_args.class, metaDataMap);
    }

    public issubank_register_args() {
    }

    public issubank_register_args(
      IssuBankInfoStruct bInfo)
    {
      this();
      this.bInfo = bInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issubank_register_args(issubank_register_args other) {
      if (other.isSetBInfo()) {
        this.bInfo = new IssuBankInfoStruct(other.bInfo);
      }
    }

    public issubank_register_args deepCopy() {
      return new issubank_register_args(this);
    }

    @Override
    public void clear() {
      this.bInfo = null;
    }

    public IssuBankInfoStruct getBInfo() {
      return this.bInfo;
    }

    public issubank_register_args setBInfo(IssuBankInfoStruct bInfo) {
      this.bInfo = bInfo;
      return this;
    }

    public void unsetBInfo() {
      this.bInfo = null;
    }

    /** Returns true if field bInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetBInfo() {
      return this.bInfo != null;
    }

    public void setBInfoIsSet(boolean value) {
      if (!value) {
        this.bInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case B_INFO:
        if (value == null) {
          unsetBInfo();
        } else {
          setBInfo((IssuBankInfoStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case B_INFO:
        return getBInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case B_INFO:
        return isSetBInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issubank_register_args)
        return this.equals((issubank_register_args)that);
      return false;
    }

    public boolean equals(issubank_register_args that) {
      if (that == null)
        return false;

      boolean this_present_bInfo = true && this.isSetBInfo();
      boolean that_present_bInfo = true && that.isSetBInfo();
      if (this_present_bInfo || that_present_bInfo) {
        if (!(this_present_bInfo && that_present_bInfo))
          return false;
        if (!this.bInfo.equals(that.bInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(issubank_register_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBInfo()).compareTo(other.isSetBInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bInfo, other.bInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issubank_register_args(");
      boolean first = true;

      sb.append("bInfo:");
      if (this.bInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.bInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bInfo != null) {
        bInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issubank_register_argsStandardSchemeFactory implements SchemeFactory {
      public issubank_register_argsStandardScheme getScheme() {
        return new issubank_register_argsStandardScheme();
      }
    }

    private static class issubank_register_argsStandardScheme extends StandardScheme<issubank_register_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issubank_register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // B_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bInfo = new IssuBankInfoStruct();
                struct.bInfo.read(iprot);
                struct.setBInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issubank_register_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bInfo != null) {
          oprot.writeFieldBegin(B_INFO_FIELD_DESC);
          struct.bInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issubank_register_argsTupleSchemeFactory implements SchemeFactory {
      public issubank_register_argsTupleScheme getScheme() {
        return new issubank_register_argsTupleScheme();
      }
    }

    private static class issubank_register_argsTupleScheme extends TupleScheme<issubank_register_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issubank_register_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBInfo()) {
          struct.bInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issubank_register_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bInfo = new IssuBankInfoStruct();
          struct.bInfo.read(iprot);
          struct.setBInfoIsSet(true);
        }
      }
    }

  }

  public static class issubank_register_result implements org.apache.thrift.TBase<issubank_register_result, issubank_register_result._Fields>, java.io.Serializable, Cloneable, Comparable<issubank_register_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issubank_register_result");

    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issubank_register_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issubank_register_resultTupleSchemeFactory());
    }

    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issubank_register_result.class, metaDataMap);
    }

    public issubank_register_result() {
    }

    public issubank_register_result(
      FitsException fe)
    {
      this();
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issubank_register_result(issubank_register_result other) {
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public issubank_register_result deepCopy() {
      return new issubank_register_result(this);
    }

    @Override
    public void clear() {
      this.fe = null;
    }

    public FitsException getFe() {
      return this.fe;
    }

    public issubank_register_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issubank_register_result)
        return this.equals((issubank_register_result)that);
      return false;
    }

    public boolean equals(issubank_register_result that) {
      if (that == null)
        return false;

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(issubank_register_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issubank_register_result(");
      boolean first = true;

      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issubank_register_resultStandardSchemeFactory implements SchemeFactory {
      public issubank_register_resultStandardScheme getScheme() {
        return new issubank_register_resultStandardScheme();
      }
    }

    private static class issubank_register_resultStandardScheme extends StandardScheme<issubank_register_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issubank_register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issubank_register_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issubank_register_resultTupleSchemeFactory implements SchemeFactory {
      public issubank_register_resultTupleScheme getScheme() {
        return new issubank_register_resultTupleScheme();
      }
    }

    private static class issubank_register_resultTupleScheme extends TupleScheme<issubank_register_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issubank_register_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issubank_register_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class issubank_productregister_args implements org.apache.thrift.TBase<issubank_productregister_args, issubank_productregister_args._Fields>, java.io.Serializable, Cloneable, Comparable<issubank_productregister_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issubank_productregister_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("productInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issubank_productregister_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issubank_productregister_argsTupleSchemeFactory());
    }

    public IssuBankProductInfoStruct productInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_INFO((short)1, "productInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_INFO
            return PRODUCT_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_INFO, new org.apache.thrift.meta_data.FieldMetaData("productInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IssuBankProductInfoStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issubank_productregister_args.class, metaDataMap);
    }

    public issubank_productregister_args() {
    }

    public issubank_productregister_args(
      IssuBankProductInfoStruct productInfo)
    {
      this();
      this.productInfo = productInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issubank_productregister_args(issubank_productregister_args other) {
      if (other.isSetProductInfo()) {
        this.productInfo = new IssuBankProductInfoStruct(other.productInfo);
      }
    }

    public issubank_productregister_args deepCopy() {
      return new issubank_productregister_args(this);
    }

    @Override
    public void clear() {
      this.productInfo = null;
    }

    public IssuBankProductInfoStruct getProductInfo() {
      return this.productInfo;
    }

    public issubank_productregister_args setProductInfo(IssuBankProductInfoStruct productInfo) {
      this.productInfo = productInfo;
      return this;
    }

    public void unsetProductInfo() {
      this.productInfo = null;
    }

    /** Returns true if field productInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductInfo() {
      return this.productInfo != null;
    }

    public void setProductInfoIsSet(boolean value) {
      if (!value) {
        this.productInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_INFO:
        if (value == null) {
          unsetProductInfo();
        } else {
          setProductInfo((IssuBankProductInfoStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_INFO:
        return getProductInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_INFO:
        return isSetProductInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issubank_productregister_args)
        return this.equals((issubank_productregister_args)that);
      return false;
    }

    public boolean equals(issubank_productregister_args that) {
      if (that == null)
        return false;

      boolean this_present_productInfo = true && this.isSetProductInfo();
      boolean that_present_productInfo = true && that.isSetProductInfo();
      if (this_present_productInfo || that_present_productInfo) {
        if (!(this_present_productInfo && that_present_productInfo))
          return false;
        if (!this.productInfo.equals(that.productInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(issubank_productregister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductInfo()).compareTo(other.isSetProductInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productInfo, other.productInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issubank_productregister_args(");
      boolean first = true;

      sb.append("productInfo:");
      if (this.productInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.productInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productInfo != null) {
        productInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issubank_productregister_argsStandardSchemeFactory implements SchemeFactory {
      public issubank_productregister_argsStandardScheme getScheme() {
        return new issubank_productregister_argsStandardScheme();
      }
    }

    private static class issubank_productregister_argsStandardScheme extends StandardScheme<issubank_productregister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issubank_productregister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productInfo = new IssuBankProductInfoStruct();
                struct.productInfo.read(iprot);
                struct.setProductInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issubank_productregister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productInfo != null) {
          oprot.writeFieldBegin(PRODUCT_INFO_FIELD_DESC);
          struct.productInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issubank_productregister_argsTupleSchemeFactory implements SchemeFactory {
      public issubank_productregister_argsTupleScheme getScheme() {
        return new issubank_productregister_argsTupleScheme();
      }
    }

    private static class issubank_productregister_argsTupleScheme extends TupleScheme<issubank_productregister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issubank_productregister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductInfo()) {
          struct.productInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issubank_productregister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productInfo = new IssuBankProductInfoStruct();
          struct.productInfo.read(iprot);
          struct.setProductInfoIsSet(true);
        }
      }
    }

  }

  public static class issubank_productregister_result implements org.apache.thrift.TBase<issubank_productregister_result, issubank_productregister_result._Fields>, java.io.Serializable, Cloneable, Comparable<issubank_productregister_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issubank_productregister_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issubank_productregister_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issubank_productregister_resultTupleSchemeFactory());
    }

    public IssuBankProductInfoResultStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IssuBankProductInfoResultStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issubank_productregister_result.class, metaDataMap);
    }

    public issubank_productregister_result() {
    }

    public issubank_productregister_result(
      IssuBankProductInfoResultStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issubank_productregister_result(issubank_productregister_result other) {
      if (other.isSetSuccess()) {
        this.success = new IssuBankProductInfoResultStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public issubank_productregister_result deepCopy() {
      return new issubank_productregister_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public IssuBankProductInfoResultStruct getSuccess() {
      return this.success;
    }

    public issubank_productregister_result setSuccess(IssuBankProductInfoResultStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public issubank_productregister_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IssuBankProductInfoResultStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issubank_productregister_result)
        return this.equals((issubank_productregister_result)that);
      return false;
    }

    public boolean equals(issubank_productregister_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(issubank_productregister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issubank_productregister_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issubank_productregister_resultStandardSchemeFactory implements SchemeFactory {
      public issubank_productregister_resultStandardScheme getScheme() {
        return new issubank_productregister_resultStandardScheme();
      }
    }

    private static class issubank_productregister_resultStandardScheme extends StandardScheme<issubank_productregister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issubank_productregister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new IssuBankProductInfoResultStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issubank_productregister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issubank_productregister_resultTupleSchemeFactory implements SchemeFactory {
      public issubank_productregister_resultTupleScheme getScheme() {
        return new issubank_productregister_resultTupleScheme();
      }
    }

    private static class issubank_productregister_resultTupleScheme extends TupleScheme<issubank_productregister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issubank_productregister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issubank_productregister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new IssuBankProductInfoResultStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class issubank_getBankInfo_args implements org.apache.thrift.TBase<issubank_getBankInfo_args, issubank_getBankInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<issubank_getBankInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issubank_getBankInfo_args");

    private static final org.apache.thrift.protocol.TField ISSU_BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("issu_bank_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issubank_getBankInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issubank_getBankInfo_argsTupleSchemeFactory());
    }

    public String issu_bank_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ISSU_BANK_ID((short)1, "issu_bank_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ISSU_BANK_ID
            return ISSU_BANK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ISSU_BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("issu_bank_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issubank_getBankInfo_args.class, metaDataMap);
    }

    public issubank_getBankInfo_args() {
    }

    public issubank_getBankInfo_args(
      String issu_bank_id)
    {
      this();
      this.issu_bank_id = issu_bank_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issubank_getBankInfo_args(issubank_getBankInfo_args other) {
      if (other.isSetIssu_bank_id()) {
        this.issu_bank_id = other.issu_bank_id;
      }
    }

    public issubank_getBankInfo_args deepCopy() {
      return new issubank_getBankInfo_args(this);
    }

    @Override
    public void clear() {
      this.issu_bank_id = null;
    }

    public String getIssu_bank_id() {
      return this.issu_bank_id;
    }

    public issubank_getBankInfo_args setIssu_bank_id(String issu_bank_id) {
      this.issu_bank_id = issu_bank_id;
      return this;
    }

    public void unsetIssu_bank_id() {
      this.issu_bank_id = null;
    }

    /** Returns true if field issu_bank_id is set (has been assigned a value) and false otherwise */
    public boolean isSetIssu_bank_id() {
      return this.issu_bank_id != null;
    }

    public void setIssu_bank_idIsSet(boolean value) {
      if (!value) {
        this.issu_bank_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ISSU_BANK_ID:
        if (value == null) {
          unsetIssu_bank_id();
        } else {
          setIssu_bank_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ISSU_BANK_ID:
        return getIssu_bank_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ISSU_BANK_ID:
        return isSetIssu_bank_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issubank_getBankInfo_args)
        return this.equals((issubank_getBankInfo_args)that);
      return false;
    }

    public boolean equals(issubank_getBankInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_issu_bank_id = true && this.isSetIssu_bank_id();
      boolean that_present_issu_bank_id = true && that.isSetIssu_bank_id();
      if (this_present_issu_bank_id || that_present_issu_bank_id) {
        if (!(this_present_issu_bank_id && that_present_issu_bank_id))
          return false;
        if (!this.issu_bank_id.equals(that.issu_bank_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(issubank_getBankInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIssu_bank_id()).compareTo(other.isSetIssu_bank_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssu_bank_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issu_bank_id, other.issu_bank_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issubank_getBankInfo_args(");
      boolean first = true;

      sb.append("issu_bank_id:");
      if (this.issu_bank_id == null) {
        sb.append("null");
      } else {
        sb.append(this.issu_bank_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issubank_getBankInfo_argsStandardSchemeFactory implements SchemeFactory {
      public issubank_getBankInfo_argsStandardScheme getScheme() {
        return new issubank_getBankInfo_argsStandardScheme();
      }
    }

    private static class issubank_getBankInfo_argsStandardScheme extends StandardScheme<issubank_getBankInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issubank_getBankInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ISSU_BANK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issu_bank_id = iprot.readString();
                struct.setIssu_bank_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issubank_getBankInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.issu_bank_id != null) {
          oprot.writeFieldBegin(ISSU_BANK_ID_FIELD_DESC);
          oprot.writeString(struct.issu_bank_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issubank_getBankInfo_argsTupleSchemeFactory implements SchemeFactory {
      public issubank_getBankInfo_argsTupleScheme getScheme() {
        return new issubank_getBankInfo_argsTupleScheme();
      }
    }

    private static class issubank_getBankInfo_argsTupleScheme extends TupleScheme<issubank_getBankInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issubank_getBankInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIssu_bank_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIssu_bank_id()) {
          oprot.writeString(struct.issu_bank_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issubank_getBankInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.issu_bank_id = iprot.readString();
          struct.setIssu_bank_idIsSet(true);
        }
      }
    }

  }

  public static class issubank_getBankInfo_result implements org.apache.thrift.TBase<issubank_getBankInfo_result, issubank_getBankInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<issubank_getBankInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issubank_getBankInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issubank_getBankInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issubank_getBankInfo_resultTupleSchemeFactory());
    }

    public IssuBankInfoStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IssuBankInfoStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issubank_getBankInfo_result.class, metaDataMap);
    }

    public issubank_getBankInfo_result() {
    }

    public issubank_getBankInfo_result(
      IssuBankInfoStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issubank_getBankInfo_result(issubank_getBankInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new IssuBankInfoStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public issubank_getBankInfo_result deepCopy() {
      return new issubank_getBankInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public IssuBankInfoStruct getSuccess() {
      return this.success;
    }

    public issubank_getBankInfo_result setSuccess(IssuBankInfoStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public issubank_getBankInfo_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IssuBankInfoStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issubank_getBankInfo_result)
        return this.equals((issubank_getBankInfo_result)that);
      return false;
    }

    public boolean equals(issubank_getBankInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(issubank_getBankInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issubank_getBankInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issubank_getBankInfo_resultStandardSchemeFactory implements SchemeFactory {
      public issubank_getBankInfo_resultStandardScheme getScheme() {
        return new issubank_getBankInfo_resultStandardScheme();
      }
    }

    private static class issubank_getBankInfo_resultStandardScheme extends StandardScheme<issubank_getBankInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issubank_getBankInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new IssuBankInfoStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issubank_getBankInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issubank_getBankInfo_resultTupleSchemeFactory implements SchemeFactory {
      public issubank_getBankInfo_resultTupleScheme getScheme() {
        return new issubank_getBankInfo_resultTupleScheme();
      }
    }

    private static class issubank_getBankInfo_resultTupleScheme extends TupleScheme<issubank_getBankInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issubank_getBankInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issubank_getBankInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new IssuBankInfoStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class proxybank_regist_args implements org.apache.thrift.TBase<proxybank_regist_args, proxybank_regist_args._Fields>, java.io.Serializable, Cloneable, Comparable<proxybank_regist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("proxybank_regist_args");

    private static final org.apache.thrift.protocol.TField PROXY_BANK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("proxyBankInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new proxybank_regist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new proxybank_regist_argsTupleSchemeFactory());
    }

    public ProxyBankInfoStruct proxyBankInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROXY_BANK_INFO((short)1, "proxyBankInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROXY_BANK_INFO
            return PROXY_BANK_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROXY_BANK_INFO, new org.apache.thrift.meta_data.FieldMetaData("proxyBankInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProxyBankInfoStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(proxybank_regist_args.class, metaDataMap);
    }

    public proxybank_regist_args() {
    }

    public proxybank_regist_args(
      ProxyBankInfoStruct proxyBankInfo)
    {
      this();
      this.proxyBankInfo = proxyBankInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public proxybank_regist_args(proxybank_regist_args other) {
      if (other.isSetProxyBankInfo()) {
        this.proxyBankInfo = new ProxyBankInfoStruct(other.proxyBankInfo);
      }
    }

    public proxybank_regist_args deepCopy() {
      return new proxybank_regist_args(this);
    }

    @Override
    public void clear() {
      this.proxyBankInfo = null;
    }

    public ProxyBankInfoStruct getProxyBankInfo() {
      return this.proxyBankInfo;
    }

    public proxybank_regist_args setProxyBankInfo(ProxyBankInfoStruct proxyBankInfo) {
      this.proxyBankInfo = proxyBankInfo;
      return this;
    }

    public void unsetProxyBankInfo() {
      this.proxyBankInfo = null;
    }

    /** Returns true if field proxyBankInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetProxyBankInfo() {
      return this.proxyBankInfo != null;
    }

    public void setProxyBankInfoIsSet(boolean value) {
      if (!value) {
        this.proxyBankInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROXY_BANK_INFO:
        if (value == null) {
          unsetProxyBankInfo();
        } else {
          setProxyBankInfo((ProxyBankInfoStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROXY_BANK_INFO:
        return getProxyBankInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROXY_BANK_INFO:
        return isSetProxyBankInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof proxybank_regist_args)
        return this.equals((proxybank_regist_args)that);
      return false;
    }

    public boolean equals(proxybank_regist_args that) {
      if (that == null)
        return false;

      boolean this_present_proxyBankInfo = true && this.isSetProxyBankInfo();
      boolean that_present_proxyBankInfo = true && that.isSetProxyBankInfo();
      if (this_present_proxyBankInfo || that_present_proxyBankInfo) {
        if (!(this_present_proxyBankInfo && that_present_proxyBankInfo))
          return false;
        if (!this.proxyBankInfo.equals(that.proxyBankInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(proxybank_regist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProxyBankInfo()).compareTo(other.isSetProxyBankInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProxyBankInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proxyBankInfo, other.proxyBankInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("proxybank_regist_args(");
      boolean first = true;

      sb.append("proxyBankInfo:");
      if (this.proxyBankInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.proxyBankInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (proxyBankInfo != null) {
        proxyBankInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class proxybank_regist_argsStandardSchemeFactory implements SchemeFactory {
      public proxybank_regist_argsStandardScheme getScheme() {
        return new proxybank_regist_argsStandardScheme();
      }
    }

    private static class proxybank_regist_argsStandardScheme extends StandardScheme<proxybank_regist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, proxybank_regist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROXY_BANK_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.proxyBankInfo = new ProxyBankInfoStruct();
                struct.proxyBankInfo.read(iprot);
                struct.setProxyBankInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, proxybank_regist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.proxyBankInfo != null) {
          oprot.writeFieldBegin(PROXY_BANK_INFO_FIELD_DESC);
          struct.proxyBankInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class proxybank_regist_argsTupleSchemeFactory implements SchemeFactory {
      public proxybank_regist_argsTupleScheme getScheme() {
        return new proxybank_regist_argsTupleScheme();
      }
    }

    private static class proxybank_regist_argsTupleScheme extends TupleScheme<proxybank_regist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, proxybank_regist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProxyBankInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProxyBankInfo()) {
          struct.proxyBankInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, proxybank_regist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.proxyBankInfo = new ProxyBankInfoStruct();
          struct.proxyBankInfo.read(iprot);
          struct.setProxyBankInfoIsSet(true);
        }
      }
    }

  }

  public static class proxybank_regist_result implements org.apache.thrift.TBase<proxybank_regist_result, proxybank_regist_result._Fields>, java.io.Serializable, Cloneable, Comparable<proxybank_regist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("proxybank_regist_result");

    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new proxybank_regist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new proxybank_regist_resultTupleSchemeFactory());
    }

    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(proxybank_regist_result.class, metaDataMap);
    }

    public proxybank_regist_result() {
    }

    public proxybank_regist_result(
      FitsException fe)
    {
      this();
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public proxybank_regist_result(proxybank_regist_result other) {
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public proxybank_regist_result deepCopy() {
      return new proxybank_regist_result(this);
    }

    @Override
    public void clear() {
      this.fe = null;
    }

    public FitsException getFe() {
      return this.fe;
    }

    public proxybank_regist_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof proxybank_regist_result)
        return this.equals((proxybank_regist_result)that);
      return false;
    }

    public boolean equals(proxybank_regist_result that) {
      if (that == null)
        return false;

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(proxybank_regist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("proxybank_regist_result(");
      boolean first = true;

      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class proxybank_regist_resultStandardSchemeFactory implements SchemeFactory {
      public proxybank_regist_resultStandardScheme getScheme() {
        return new proxybank_regist_resultStandardScheme();
      }
    }

    private static class proxybank_regist_resultStandardScheme extends StandardScheme<proxybank_regist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, proxybank_regist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, proxybank_regist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class proxybank_regist_resultTupleSchemeFactory implements SchemeFactory {
      public proxybank_regist_resultTupleScheme getScheme() {
        return new proxybank_regist_resultTupleScheme();
      }
    }

    private static class proxybank_regist_resultTupleScheme extends TupleScheme<proxybank_regist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, proxybank_regist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, proxybank_regist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class proxybank_get_args implements org.apache.thrift.TBase<proxybank_get_args, proxybank_get_args._Fields>, java.io.Serializable, Cloneable, Comparable<proxybank_get_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("proxybank_get_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new proxybank_get_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new proxybank_get_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(proxybank_get_args.class, metaDataMap);
    }

    public proxybank_get_args() {
    }

    public proxybank_get_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public proxybank_get_args(proxybank_get_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public proxybank_get_args deepCopy() {
      return new proxybank_get_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public proxybank_get_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof proxybank_get_args)
        return this.equals((proxybank_get_args)that);
      return false;
    }

    public boolean equals(proxybank_get_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(proxybank_get_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("proxybank_get_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class proxybank_get_argsStandardSchemeFactory implements SchemeFactory {
      public proxybank_get_argsStandardScheme getScheme() {
        return new proxybank_get_argsStandardScheme();
      }
    }

    private static class proxybank_get_argsStandardScheme extends StandardScheme<proxybank_get_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, proxybank_get_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, proxybank_get_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class proxybank_get_argsTupleSchemeFactory implements SchemeFactory {
      public proxybank_get_argsTupleScheme getScheme() {
        return new proxybank_get_argsTupleScheme();
      }
    }

    private static class proxybank_get_argsTupleScheme extends TupleScheme<proxybank_get_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, proxybank_get_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, proxybank_get_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class proxybank_get_result implements org.apache.thrift.TBase<proxybank_get_result, proxybank_get_result._Fields>, java.io.Serializable, Cloneable, Comparable<proxybank_get_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("proxybank_get_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new proxybank_get_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new proxybank_get_resultTupleSchemeFactory());
    }

    public ProxyBankInfoStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProxyBankInfoStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(proxybank_get_result.class, metaDataMap);
    }

    public proxybank_get_result() {
    }

    public proxybank_get_result(
      ProxyBankInfoStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public proxybank_get_result(proxybank_get_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProxyBankInfoStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public proxybank_get_result deepCopy() {
      return new proxybank_get_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public ProxyBankInfoStruct getSuccess() {
      return this.success;
    }

    public proxybank_get_result setSuccess(ProxyBankInfoStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public proxybank_get_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProxyBankInfoStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof proxybank_get_result)
        return this.equals((proxybank_get_result)that);
      return false;
    }

    public boolean equals(proxybank_get_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(proxybank_get_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("proxybank_get_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class proxybank_get_resultStandardSchemeFactory implements SchemeFactory {
      public proxybank_get_resultStandardScheme getScheme() {
        return new proxybank_get_resultStandardScheme();
      }
    }

    private static class proxybank_get_resultStandardScheme extends StandardScheme<proxybank_get_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, proxybank_get_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProxyBankInfoStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, proxybank_get_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class proxybank_get_resultTupleSchemeFactory implements SchemeFactory {
      public proxybank_get_resultTupleScheme getScheme() {
        return new proxybank_get_resultTupleScheme();
      }
    }

    private static class proxybank_get_resultTupleScheme extends TupleScheme<proxybank_get_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, proxybank_get_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, proxybank_get_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ProxyBankInfoStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

}
