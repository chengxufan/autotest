/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tongbaotu.fits.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Fits {

  public interface Iface {

    public InvestorRegisterResultInfoStruct investor_register(InvestorRegisterInfoStruct investorInfo) throws FitsException, org.apache.thrift.TException;

    public void investor_switchState(String investorID, int newState) throws FitsException, org.apache.thrift.TException;

    public void investor_updateRiskLevel(RiskLevelStruct riskLevel) throws FitsException, org.apache.thrift.TException;

    public BankSignResultStruct investor_bankSign(BankSignInfoStruct bankSignInfo) throws FitsException, org.apache.thrift.TException;

    public TransferResultStruct silverInvestTransfer(TransferInfoStruct transferInfo) throws FitsException, org.apache.thrift.TException;

    public PurchaseResultStruct purchaseProduct(PurchaseInfoStruct purchaseInfo) throws FitsException, org.apache.thrift.TException;

    public IssuBankProductInfoResultStruct issubank_productregister(ProductInfoStruct productInfo) throws FitsException, org.apache.thrift.TException;

    public void issubank_productupdate(ProductInfoStruct productInfo) throws FitsException, org.apache.thrift.TException;

    public InstitutionResultStruct institution_regist(InstitutionInfoStruct institutionInfo) throws FitsException, org.apache.thrift.TException;

    public ProductListReultStruct institution_getallproduct() throws FitsException, org.apache.thrift.TException;

    public ProductInfoStruct institution_getproduct(String productid) throws FitsException, org.apache.thrift.TException;

    public ProductListReultStruct institution_getauditproduct(String institutionid) throws FitsException, org.apache.thrift.TException;

    public ProductListReultStruct institution_getissuproduct(String institutionid) throws FitsException, org.apache.thrift.TException;

    public ProductAuditResultStruct institution_productaudit(ProductAuditStruct productaudit) throws FitsException, org.apache.thrift.TException;

    public InstitutionInfoStruct institution_getInfo(String institutionid) throws FitsException, org.apache.thrift.TException;

    public InvestorInfoStruct investor_getInfo(String investorid) throws FitsException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void investor_register(InvestorRegisterInfoStruct investorInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void investor_switchState(String investorID, int newState, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void investor_updateRiskLevel(RiskLevelStruct riskLevel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void investor_bankSign(BankSignInfoStruct bankSignInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void silverInvestTransfer(TransferInfoStruct transferInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void purchaseProduct(PurchaseInfoStruct purchaseInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void issubank_productregister(ProductInfoStruct productInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void issubank_productupdate(ProductInfoStruct productInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void institution_regist(InstitutionInfoStruct institutionInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void institution_getallproduct(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void institution_getproduct(String productid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void institution_getauditproduct(String institutionid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void institution_getissuproduct(String institutionid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void institution_productaudit(ProductAuditStruct productaudit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void institution_getInfo(String institutionid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void investor_getInfo(String investorid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public InvestorRegisterResultInfoStruct investor_register(InvestorRegisterInfoStruct investorInfo) throws FitsException, org.apache.thrift.TException
    {
      send_investor_register(investorInfo);
      return recv_investor_register();
    }

    public void send_investor_register(InvestorRegisterInfoStruct investorInfo) throws org.apache.thrift.TException
    {
      investor_register_args args = new investor_register_args();
      args.setInvestorInfo(investorInfo);
      sendBase("investor_register", args);
    }

    public InvestorRegisterResultInfoStruct recv_investor_register() throws FitsException, org.apache.thrift.TException
    {
      investor_register_result result = new investor_register_result();
      receiveBase(result, "investor_register");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "investor_register failed: unknown result");
    }

    public void investor_switchState(String investorID, int newState) throws FitsException, org.apache.thrift.TException
    {
      send_investor_switchState(investorID, newState);
      recv_investor_switchState();
    }

    public void send_investor_switchState(String investorID, int newState) throws org.apache.thrift.TException
    {
      investor_switchState_args args = new investor_switchState_args();
      args.setInvestorID(investorID);
      args.setNewState(newState);
      sendBase("investor_switchState", args);
    }

    public void recv_investor_switchState() throws FitsException, org.apache.thrift.TException
    {
      investor_switchState_result result = new investor_switchState_result();
      receiveBase(result, "investor_switchState");
      if (result.fe != null) {
        throw result.fe;
      }
      return;
    }

    public void investor_updateRiskLevel(RiskLevelStruct riskLevel) throws FitsException, org.apache.thrift.TException
    {
      send_investor_updateRiskLevel(riskLevel);
      recv_investor_updateRiskLevel();
    }

    public void send_investor_updateRiskLevel(RiskLevelStruct riskLevel) throws org.apache.thrift.TException
    {
      investor_updateRiskLevel_args args = new investor_updateRiskLevel_args();
      args.setRiskLevel(riskLevel);
      sendBase("investor_updateRiskLevel", args);
    }

    public void recv_investor_updateRiskLevel() throws FitsException, org.apache.thrift.TException
    {
      investor_updateRiskLevel_result result = new investor_updateRiskLevel_result();
      receiveBase(result, "investor_updateRiskLevel");
      if (result.fe != null) {
        throw result.fe;
      }
      return;
    }

    public BankSignResultStruct investor_bankSign(BankSignInfoStruct bankSignInfo) throws FitsException, org.apache.thrift.TException
    {
      send_investor_bankSign(bankSignInfo);
      return recv_investor_bankSign();
    }

    public void send_investor_bankSign(BankSignInfoStruct bankSignInfo) throws org.apache.thrift.TException
    {
      investor_bankSign_args args = new investor_bankSign_args();
      args.setBankSignInfo(bankSignInfo);
      sendBase("investor_bankSign", args);
    }

    public BankSignResultStruct recv_investor_bankSign() throws FitsException, org.apache.thrift.TException
    {
      investor_bankSign_result result = new investor_bankSign_result();
      receiveBase(result, "investor_bankSign");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "investor_bankSign failed: unknown result");
    }

    public TransferResultStruct silverInvestTransfer(TransferInfoStruct transferInfo) throws FitsException, org.apache.thrift.TException
    {
      send_silverInvestTransfer(transferInfo);
      return recv_silverInvestTransfer();
    }

    public void send_silverInvestTransfer(TransferInfoStruct transferInfo) throws org.apache.thrift.TException
    {
      silverInvestTransfer_args args = new silverInvestTransfer_args();
      args.setTransferInfo(transferInfo);
      sendBase("silverInvestTransfer", args);
    }

    public TransferResultStruct recv_silverInvestTransfer() throws FitsException, org.apache.thrift.TException
    {
      silverInvestTransfer_result result = new silverInvestTransfer_result();
      receiveBase(result, "silverInvestTransfer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "silverInvestTransfer failed: unknown result");
    }

    public PurchaseResultStruct purchaseProduct(PurchaseInfoStruct purchaseInfo) throws FitsException, org.apache.thrift.TException
    {
      send_purchaseProduct(purchaseInfo);
      return recv_purchaseProduct();
    }

    public void send_purchaseProduct(PurchaseInfoStruct purchaseInfo) throws org.apache.thrift.TException
    {
      purchaseProduct_args args = new purchaseProduct_args();
      args.setPurchaseInfo(purchaseInfo);
      sendBase("purchaseProduct", args);
    }

    public PurchaseResultStruct recv_purchaseProduct() throws FitsException, org.apache.thrift.TException
    {
      purchaseProduct_result result = new purchaseProduct_result();
      receiveBase(result, "purchaseProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "purchaseProduct failed: unknown result");
    }

    public IssuBankProductInfoResultStruct issubank_productregister(ProductInfoStruct productInfo) throws FitsException, org.apache.thrift.TException
    {
      send_issubank_productregister(productInfo);
      return recv_issubank_productregister();
    }

    public void send_issubank_productregister(ProductInfoStruct productInfo) throws org.apache.thrift.TException
    {
      issubank_productregister_args args = new issubank_productregister_args();
      args.setProductInfo(productInfo);
      sendBase("issubank_productregister", args);
    }

    public IssuBankProductInfoResultStruct recv_issubank_productregister() throws FitsException, org.apache.thrift.TException
    {
      issubank_productregister_result result = new issubank_productregister_result();
      receiveBase(result, "issubank_productregister");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "issubank_productregister failed: unknown result");
    }

    public void issubank_productupdate(ProductInfoStruct productInfo) throws FitsException, org.apache.thrift.TException
    {
      send_issubank_productupdate(productInfo);
      recv_issubank_productupdate();
    }

    public void send_issubank_productupdate(ProductInfoStruct productInfo) throws org.apache.thrift.TException
    {
      issubank_productupdate_args args = new issubank_productupdate_args();
      args.setProductInfo(productInfo);
      sendBase("issubank_productupdate", args);
    }

    public void recv_issubank_productupdate() throws FitsException, org.apache.thrift.TException
    {
      issubank_productupdate_result result = new issubank_productupdate_result();
      receiveBase(result, "issubank_productupdate");
      if (result.fe != null) {
        throw result.fe;
      }
      return;
    }

    public InstitutionResultStruct institution_regist(InstitutionInfoStruct institutionInfo) throws FitsException, org.apache.thrift.TException
    {
      send_institution_regist(institutionInfo);
      return recv_institution_regist();
    }

    public void send_institution_regist(InstitutionInfoStruct institutionInfo) throws org.apache.thrift.TException
    {
      institution_regist_args args = new institution_regist_args();
      args.setInstitutionInfo(institutionInfo);
      sendBase("institution_regist", args);
    }

    public InstitutionResultStruct recv_institution_regist() throws FitsException, org.apache.thrift.TException
    {
      institution_regist_result result = new institution_regist_result();
      receiveBase(result, "institution_regist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "institution_regist failed: unknown result");
    }

    public ProductListReultStruct institution_getallproduct() throws FitsException, org.apache.thrift.TException
    {
      send_institution_getallproduct();
      return recv_institution_getallproduct();
    }

    public void send_institution_getallproduct() throws org.apache.thrift.TException
    {
      institution_getallproduct_args args = new institution_getallproduct_args();
      sendBase("institution_getallproduct", args);
    }

    public ProductListReultStruct recv_institution_getallproduct() throws FitsException, org.apache.thrift.TException
    {
      institution_getallproduct_result result = new institution_getallproduct_result();
      receiveBase(result, "institution_getallproduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "institution_getallproduct failed: unknown result");
    }

    public ProductInfoStruct institution_getproduct(String productid) throws FitsException, org.apache.thrift.TException
    {
      send_institution_getproduct(productid);
      return recv_institution_getproduct();
    }

    public void send_institution_getproduct(String productid) throws org.apache.thrift.TException
    {
      institution_getproduct_args args = new institution_getproduct_args();
      args.setProductid(productid);
      sendBase("institution_getproduct", args);
    }

    public ProductInfoStruct recv_institution_getproduct() throws FitsException, org.apache.thrift.TException
    {
      institution_getproduct_result result = new institution_getproduct_result();
      receiveBase(result, "institution_getproduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "institution_getproduct failed: unknown result");
    }

    public ProductListReultStruct institution_getauditproduct(String institutionid) throws FitsException, org.apache.thrift.TException
    {
      send_institution_getauditproduct(institutionid);
      return recv_institution_getauditproduct();
    }

    public void send_institution_getauditproduct(String institutionid) throws org.apache.thrift.TException
    {
      institution_getauditproduct_args args = new institution_getauditproduct_args();
      args.setInstitutionid(institutionid);
      sendBase("institution_getauditproduct", args);
    }

    public ProductListReultStruct recv_institution_getauditproduct() throws FitsException, org.apache.thrift.TException
    {
      institution_getauditproduct_result result = new institution_getauditproduct_result();
      receiveBase(result, "institution_getauditproduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "institution_getauditproduct failed: unknown result");
    }

    public ProductListReultStruct institution_getissuproduct(String institutionid) throws FitsException, org.apache.thrift.TException
    {
      send_institution_getissuproduct(institutionid);
      return recv_institution_getissuproduct();
    }

    public void send_institution_getissuproduct(String institutionid) throws org.apache.thrift.TException
    {
      institution_getissuproduct_args args = new institution_getissuproduct_args();
      args.setInstitutionid(institutionid);
      sendBase("institution_getissuproduct", args);
    }

    public ProductListReultStruct recv_institution_getissuproduct() throws FitsException, org.apache.thrift.TException
    {
      institution_getissuproduct_result result = new institution_getissuproduct_result();
      receiveBase(result, "institution_getissuproduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "institution_getissuproduct failed: unknown result");
    }

    public ProductAuditResultStruct institution_productaudit(ProductAuditStruct productaudit) throws FitsException, org.apache.thrift.TException
    {
      send_institution_productaudit(productaudit);
      return recv_institution_productaudit();
    }

    public void send_institution_productaudit(ProductAuditStruct productaudit) throws org.apache.thrift.TException
    {
      institution_productaudit_args args = new institution_productaudit_args();
      args.setProductaudit(productaudit);
      sendBase("institution_productaudit", args);
    }

    public ProductAuditResultStruct recv_institution_productaudit() throws FitsException, org.apache.thrift.TException
    {
      institution_productaudit_result result = new institution_productaudit_result();
      receiveBase(result, "institution_productaudit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "institution_productaudit failed: unknown result");
    }

    public InstitutionInfoStruct institution_getInfo(String institutionid) throws FitsException, org.apache.thrift.TException
    {
      send_institution_getInfo(institutionid);
      return recv_institution_getInfo();
    }

    public void send_institution_getInfo(String institutionid) throws org.apache.thrift.TException
    {
      institution_getInfo_args args = new institution_getInfo_args();
      args.setInstitutionid(institutionid);
      sendBase("institution_getInfo", args);
    }

    public InstitutionInfoStruct recv_institution_getInfo() throws FitsException, org.apache.thrift.TException
    {
      institution_getInfo_result result = new institution_getInfo_result();
      receiveBase(result, "institution_getInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "institution_getInfo failed: unknown result");
    }

    public InvestorInfoStruct investor_getInfo(String investorid) throws FitsException, org.apache.thrift.TException
    {
      send_investor_getInfo(investorid);
      return recv_investor_getInfo();
    }

    public void send_investor_getInfo(String investorid) throws org.apache.thrift.TException
    {
      investor_getInfo_args args = new investor_getInfo_args();
      args.setInvestorid(investorid);
      sendBase("investor_getInfo", args);
    }

    public InvestorInfoStruct recv_investor_getInfo() throws FitsException, org.apache.thrift.TException
    {
      investor_getInfo_result result = new investor_getInfo_result();
      receiveBase(result, "investor_getInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fe != null) {
        throw result.fe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "investor_getInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void investor_register(InvestorRegisterInfoStruct investorInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      investor_register_call method_call = new investor_register_call(investorInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class investor_register_call extends org.apache.thrift.async.TAsyncMethodCall {
      private InvestorRegisterInfoStruct investorInfo;
      public investor_register_call(InvestorRegisterInfoStruct investorInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.investorInfo = investorInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("investor_register", org.apache.thrift.protocol.TMessageType.CALL, 0));
        investor_register_args args = new investor_register_args();
        args.setInvestorInfo(investorInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public InvestorRegisterResultInfoStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_investor_register();
      }
    }

    public void investor_switchState(String investorID, int newState, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      investor_switchState_call method_call = new investor_switchState_call(investorID, newState, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class investor_switchState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String investorID;
      private int newState;
      public investor_switchState_call(String investorID, int newState, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.investorID = investorID;
        this.newState = newState;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("investor_switchState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        investor_switchState_args args = new investor_switchState_args();
        args.setInvestorID(investorID);
        args.setNewState(newState);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_investor_switchState();
      }
    }

    public void investor_updateRiskLevel(RiskLevelStruct riskLevel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      investor_updateRiskLevel_call method_call = new investor_updateRiskLevel_call(riskLevel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class investor_updateRiskLevel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RiskLevelStruct riskLevel;
      public investor_updateRiskLevel_call(RiskLevelStruct riskLevel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.riskLevel = riskLevel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("investor_updateRiskLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        investor_updateRiskLevel_args args = new investor_updateRiskLevel_args();
        args.setRiskLevel(riskLevel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_investor_updateRiskLevel();
      }
    }

    public void investor_bankSign(BankSignInfoStruct bankSignInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      investor_bankSign_call method_call = new investor_bankSign_call(bankSignInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class investor_bankSign_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BankSignInfoStruct bankSignInfo;
      public investor_bankSign_call(BankSignInfoStruct bankSignInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bankSignInfo = bankSignInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("investor_bankSign", org.apache.thrift.protocol.TMessageType.CALL, 0));
        investor_bankSign_args args = new investor_bankSign_args();
        args.setBankSignInfo(bankSignInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BankSignResultStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_investor_bankSign();
      }
    }

    public void silverInvestTransfer(TransferInfoStruct transferInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      silverInvestTransfer_call method_call = new silverInvestTransfer_call(transferInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class silverInvestTransfer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TransferInfoStruct transferInfo;
      public silverInvestTransfer_call(TransferInfoStruct transferInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transferInfo = transferInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("silverInvestTransfer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        silverInvestTransfer_args args = new silverInvestTransfer_args();
        args.setTransferInfo(transferInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TransferResultStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_silverInvestTransfer();
      }
    }

    public void purchaseProduct(PurchaseInfoStruct purchaseInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      purchaseProduct_call method_call = new purchaseProduct_call(purchaseInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class purchaseProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PurchaseInfoStruct purchaseInfo;
      public purchaseProduct_call(PurchaseInfoStruct purchaseInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.purchaseInfo = purchaseInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("purchaseProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        purchaseProduct_args args = new purchaseProduct_args();
        args.setPurchaseInfo(purchaseInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PurchaseResultStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_purchaseProduct();
      }
    }

    public void issubank_productregister(ProductInfoStruct productInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      issubank_productregister_call method_call = new issubank_productregister_call(productInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class issubank_productregister_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProductInfoStruct productInfo;
      public issubank_productregister_call(ProductInfoStruct productInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productInfo = productInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("issubank_productregister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        issubank_productregister_args args = new issubank_productregister_args();
        args.setProductInfo(productInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IssuBankProductInfoResultStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_issubank_productregister();
      }
    }

    public void issubank_productupdate(ProductInfoStruct productInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      issubank_productupdate_call method_call = new issubank_productupdate_call(productInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class issubank_productupdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProductInfoStruct productInfo;
      public issubank_productupdate_call(ProductInfoStruct productInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productInfo = productInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("issubank_productupdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        issubank_productupdate_args args = new issubank_productupdate_args();
        args.setProductInfo(productInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_issubank_productupdate();
      }
    }

    public void institution_regist(InstitutionInfoStruct institutionInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      institution_regist_call method_call = new institution_regist_call(institutionInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class institution_regist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private InstitutionInfoStruct institutionInfo;
      public institution_regist_call(InstitutionInfoStruct institutionInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.institutionInfo = institutionInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("institution_regist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        institution_regist_args args = new institution_regist_args();
        args.setInstitutionInfo(institutionInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public InstitutionResultStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_institution_regist();
      }
    }

    public void institution_getallproduct(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      institution_getallproduct_call method_call = new institution_getallproduct_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class institution_getallproduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      public institution_getallproduct_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("institution_getallproduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        institution_getallproduct_args args = new institution_getallproduct_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProductListReultStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_institution_getallproduct();
      }
    }

    public void institution_getproduct(String productid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      institution_getproduct_call method_call = new institution_getproduct_call(productid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class institution_getproduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String productid;
      public institution_getproduct_call(String productid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productid = productid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("institution_getproduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        institution_getproduct_args args = new institution_getproduct_args();
        args.setProductid(productid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProductInfoStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_institution_getproduct();
      }
    }

    public void institution_getauditproduct(String institutionid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      institution_getauditproduct_call method_call = new institution_getauditproduct_call(institutionid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class institution_getauditproduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String institutionid;
      public institution_getauditproduct_call(String institutionid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.institutionid = institutionid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("institution_getauditproduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        institution_getauditproduct_args args = new institution_getauditproduct_args();
        args.setInstitutionid(institutionid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProductListReultStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_institution_getauditproduct();
      }
    }

    public void institution_getissuproduct(String institutionid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      institution_getissuproduct_call method_call = new institution_getissuproduct_call(institutionid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class institution_getissuproduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String institutionid;
      public institution_getissuproduct_call(String institutionid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.institutionid = institutionid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("institution_getissuproduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        institution_getissuproduct_args args = new institution_getissuproduct_args();
        args.setInstitutionid(institutionid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProductListReultStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_institution_getissuproduct();
      }
    }

    public void institution_productaudit(ProductAuditStruct productaudit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      institution_productaudit_call method_call = new institution_productaudit_call(productaudit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class institution_productaudit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProductAuditStruct productaudit;
      public institution_productaudit_call(ProductAuditStruct productaudit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productaudit = productaudit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("institution_productaudit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        institution_productaudit_args args = new institution_productaudit_args();
        args.setProductaudit(productaudit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProductAuditResultStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_institution_productaudit();
      }
    }

    public void institution_getInfo(String institutionid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      institution_getInfo_call method_call = new institution_getInfo_call(institutionid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class institution_getInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String institutionid;
      public institution_getInfo_call(String institutionid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.institutionid = institutionid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("institution_getInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        institution_getInfo_args args = new institution_getInfo_args();
        args.setInstitutionid(institutionid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public InstitutionInfoStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_institution_getInfo();
      }
    }

    public void investor_getInfo(String investorid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      investor_getInfo_call method_call = new investor_getInfo_call(investorid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class investor_getInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String investorid;
      public investor_getInfo_call(String investorid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.investorid = investorid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("investor_getInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        investor_getInfo_args args = new investor_getInfo_args();
        args.setInvestorid(investorid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public InvestorInfoStruct getResult() throws FitsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_investor_getInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("investor_register", new investor_register());
      processMap.put("investor_switchState", new investor_switchState());
      processMap.put("investor_updateRiskLevel", new investor_updateRiskLevel());
      processMap.put("investor_bankSign", new investor_bankSign());
      processMap.put("silverInvestTransfer", new silverInvestTransfer());
      processMap.put("purchaseProduct", new purchaseProduct());
      processMap.put("issubank_productregister", new issubank_productregister());
      processMap.put("issubank_productupdate", new issubank_productupdate());
      processMap.put("institution_regist", new institution_regist());
      processMap.put("institution_getallproduct", new institution_getallproduct());
      processMap.put("institution_getproduct", new institution_getproduct());
      processMap.put("institution_getauditproduct", new institution_getauditproduct());
      processMap.put("institution_getissuproduct", new institution_getissuproduct());
      processMap.put("institution_productaudit", new institution_productaudit());
      processMap.put("institution_getInfo", new institution_getInfo());
      processMap.put("investor_getInfo", new investor_getInfo());
      return processMap;
    }

    public static class investor_register<I extends Iface> extends org.apache.thrift.ProcessFunction<I, investor_register_args> {
      public investor_register() {
        super("investor_register");
      }

      public investor_register_args getEmptyArgsInstance() {
        return new investor_register_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public investor_register_result getResult(I iface, investor_register_args args) throws org.apache.thrift.TException {
        investor_register_result result = new investor_register_result();
        try {
          result.success = iface.investor_register(args.investorInfo);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class investor_switchState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, investor_switchState_args> {
      public investor_switchState() {
        super("investor_switchState");
      }

      public investor_switchState_args getEmptyArgsInstance() {
        return new investor_switchState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public investor_switchState_result getResult(I iface, investor_switchState_args args) throws org.apache.thrift.TException {
        investor_switchState_result result = new investor_switchState_result();
        try {
          iface.investor_switchState(args.investorID, args.newState);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class investor_updateRiskLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, investor_updateRiskLevel_args> {
      public investor_updateRiskLevel() {
        super("investor_updateRiskLevel");
      }

      public investor_updateRiskLevel_args getEmptyArgsInstance() {
        return new investor_updateRiskLevel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public investor_updateRiskLevel_result getResult(I iface, investor_updateRiskLevel_args args) throws org.apache.thrift.TException {
        investor_updateRiskLevel_result result = new investor_updateRiskLevel_result();
        try {
          iface.investor_updateRiskLevel(args.riskLevel);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class investor_bankSign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, investor_bankSign_args> {
      public investor_bankSign() {
        super("investor_bankSign");
      }

      public investor_bankSign_args getEmptyArgsInstance() {
        return new investor_bankSign_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public investor_bankSign_result getResult(I iface, investor_bankSign_args args) throws org.apache.thrift.TException {
        investor_bankSign_result result = new investor_bankSign_result();
        try {
          result.success = iface.investor_bankSign(args.bankSignInfo);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class silverInvestTransfer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, silverInvestTransfer_args> {
      public silverInvestTransfer() {
        super("silverInvestTransfer");
      }

      public silverInvestTransfer_args getEmptyArgsInstance() {
        return new silverInvestTransfer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public silverInvestTransfer_result getResult(I iface, silverInvestTransfer_args args) throws org.apache.thrift.TException {
        silverInvestTransfer_result result = new silverInvestTransfer_result();
        try {
          result.success = iface.silverInvestTransfer(args.transferInfo);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class purchaseProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, purchaseProduct_args> {
      public purchaseProduct() {
        super("purchaseProduct");
      }

      public purchaseProduct_args getEmptyArgsInstance() {
        return new purchaseProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public purchaseProduct_result getResult(I iface, purchaseProduct_args args) throws org.apache.thrift.TException {
        purchaseProduct_result result = new purchaseProduct_result();
        try {
          result.success = iface.purchaseProduct(args.purchaseInfo);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class issubank_productregister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, issubank_productregister_args> {
      public issubank_productregister() {
        super("issubank_productregister");
      }

      public issubank_productregister_args getEmptyArgsInstance() {
        return new issubank_productregister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public issubank_productregister_result getResult(I iface, issubank_productregister_args args) throws org.apache.thrift.TException {
        issubank_productregister_result result = new issubank_productregister_result();
        try {
          result.success = iface.issubank_productregister(args.productInfo);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class issubank_productupdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, issubank_productupdate_args> {
      public issubank_productupdate() {
        super("issubank_productupdate");
      }

      public issubank_productupdate_args getEmptyArgsInstance() {
        return new issubank_productupdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public issubank_productupdate_result getResult(I iface, issubank_productupdate_args args) throws org.apache.thrift.TException {
        issubank_productupdate_result result = new issubank_productupdate_result();
        try {
          iface.issubank_productupdate(args.productInfo);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class institution_regist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, institution_regist_args> {
      public institution_regist() {
        super("institution_regist");
      }

      public institution_regist_args getEmptyArgsInstance() {
        return new institution_regist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public institution_regist_result getResult(I iface, institution_regist_args args) throws org.apache.thrift.TException {
        institution_regist_result result = new institution_regist_result();
        try {
          result.success = iface.institution_regist(args.institutionInfo);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class institution_getallproduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, institution_getallproduct_args> {
      public institution_getallproduct() {
        super("institution_getallproduct");
      }

      public institution_getallproduct_args getEmptyArgsInstance() {
        return new institution_getallproduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public institution_getallproduct_result getResult(I iface, institution_getallproduct_args args) throws org.apache.thrift.TException {
        institution_getallproduct_result result = new institution_getallproduct_result();
        try {
          result.success = iface.institution_getallproduct();
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class institution_getproduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, institution_getproduct_args> {
      public institution_getproduct() {
        super("institution_getproduct");
      }

      public institution_getproduct_args getEmptyArgsInstance() {
        return new institution_getproduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public institution_getproduct_result getResult(I iface, institution_getproduct_args args) throws org.apache.thrift.TException {
        institution_getproduct_result result = new institution_getproduct_result();
        try {
          result.success = iface.institution_getproduct(args.productid);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class institution_getauditproduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, institution_getauditproduct_args> {
      public institution_getauditproduct() {
        super("institution_getauditproduct");
      }

      public institution_getauditproduct_args getEmptyArgsInstance() {
        return new institution_getauditproduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public institution_getauditproduct_result getResult(I iface, institution_getauditproduct_args args) throws org.apache.thrift.TException {
        institution_getauditproduct_result result = new institution_getauditproduct_result();
        try {
          result.success = iface.institution_getauditproduct(args.institutionid);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class institution_getissuproduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, institution_getissuproduct_args> {
      public institution_getissuproduct() {
        super("institution_getissuproduct");
      }

      public institution_getissuproduct_args getEmptyArgsInstance() {
        return new institution_getissuproduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public institution_getissuproduct_result getResult(I iface, institution_getissuproduct_args args) throws org.apache.thrift.TException {
        institution_getissuproduct_result result = new institution_getissuproduct_result();
        try {
          result.success = iface.institution_getissuproduct(args.institutionid);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class institution_productaudit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, institution_productaudit_args> {
      public institution_productaudit() {
        super("institution_productaudit");
      }

      public institution_productaudit_args getEmptyArgsInstance() {
        return new institution_productaudit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public institution_productaudit_result getResult(I iface, institution_productaudit_args args) throws org.apache.thrift.TException {
        institution_productaudit_result result = new institution_productaudit_result();
        try {
          result.success = iface.institution_productaudit(args.productaudit);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class institution_getInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, institution_getInfo_args> {
      public institution_getInfo() {
        super("institution_getInfo");
      }

      public institution_getInfo_args getEmptyArgsInstance() {
        return new institution_getInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public institution_getInfo_result getResult(I iface, institution_getInfo_args args) throws org.apache.thrift.TException {
        institution_getInfo_result result = new institution_getInfo_result();
        try {
          result.success = iface.institution_getInfo(args.institutionid);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

    public static class investor_getInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, investor_getInfo_args> {
      public investor_getInfo() {
        super("investor_getInfo");
      }

      public investor_getInfo_args getEmptyArgsInstance() {
        return new investor_getInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public investor_getInfo_result getResult(I iface, investor_getInfo_args args) throws org.apache.thrift.TException {
        investor_getInfo_result result = new investor_getInfo_result();
        try {
          result.success = iface.investor_getInfo(args.investorid);
        } catch (FitsException fe) {
          result.fe = fe;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("investor_register", new investor_register());
      processMap.put("investor_switchState", new investor_switchState());
      processMap.put("investor_updateRiskLevel", new investor_updateRiskLevel());
      processMap.put("investor_bankSign", new investor_bankSign());
      processMap.put("silverInvestTransfer", new silverInvestTransfer());
      processMap.put("purchaseProduct", new purchaseProduct());
      processMap.put("issubank_productregister", new issubank_productregister());
      processMap.put("issubank_productupdate", new issubank_productupdate());
      processMap.put("institution_regist", new institution_regist());
      processMap.put("institution_getallproduct", new institution_getallproduct());
      processMap.put("institution_getproduct", new institution_getproduct());
      processMap.put("institution_getauditproduct", new institution_getauditproduct());
      processMap.put("institution_getissuproduct", new institution_getissuproduct());
      processMap.put("institution_productaudit", new institution_productaudit());
      processMap.put("institution_getInfo", new institution_getInfo());
      processMap.put("investor_getInfo", new investor_getInfo());
      return processMap;
    }

    public static class investor_register<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, investor_register_args, InvestorRegisterResultInfoStruct> {
      public investor_register() {
        super("investor_register");
      }

      public investor_register_args getEmptyArgsInstance() {
        return new investor_register_args();
      }

      public AsyncMethodCallback<InvestorRegisterResultInfoStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<InvestorRegisterResultInfoStruct>() { 
          public void onComplete(InvestorRegisterResultInfoStruct o) {
            investor_register_result result = new investor_register_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            investor_register_result result = new investor_register_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, investor_register_args args, org.apache.thrift.async.AsyncMethodCallback<InvestorRegisterResultInfoStruct> resultHandler) throws TException {
        iface.investor_register(args.investorInfo,resultHandler);
      }
    }

    public static class investor_switchState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, investor_switchState_args, Void> {
      public investor_switchState() {
        super("investor_switchState");
      }

      public investor_switchState_args getEmptyArgsInstance() {
        return new investor_switchState_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            investor_switchState_result result = new investor_switchState_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            investor_switchState_result result = new investor_switchState_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, investor_switchState_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.investor_switchState(args.investorID, args.newState,resultHandler);
      }
    }

    public static class investor_updateRiskLevel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, investor_updateRiskLevel_args, Void> {
      public investor_updateRiskLevel() {
        super("investor_updateRiskLevel");
      }

      public investor_updateRiskLevel_args getEmptyArgsInstance() {
        return new investor_updateRiskLevel_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            investor_updateRiskLevel_result result = new investor_updateRiskLevel_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            investor_updateRiskLevel_result result = new investor_updateRiskLevel_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, investor_updateRiskLevel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.investor_updateRiskLevel(args.riskLevel,resultHandler);
      }
    }

    public static class investor_bankSign<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, investor_bankSign_args, BankSignResultStruct> {
      public investor_bankSign() {
        super("investor_bankSign");
      }

      public investor_bankSign_args getEmptyArgsInstance() {
        return new investor_bankSign_args();
      }

      public AsyncMethodCallback<BankSignResultStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BankSignResultStruct>() { 
          public void onComplete(BankSignResultStruct o) {
            investor_bankSign_result result = new investor_bankSign_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            investor_bankSign_result result = new investor_bankSign_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, investor_bankSign_args args, org.apache.thrift.async.AsyncMethodCallback<BankSignResultStruct> resultHandler) throws TException {
        iface.investor_bankSign(args.bankSignInfo,resultHandler);
      }
    }

    public static class silverInvestTransfer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, silverInvestTransfer_args, TransferResultStruct> {
      public silverInvestTransfer() {
        super("silverInvestTransfer");
      }

      public silverInvestTransfer_args getEmptyArgsInstance() {
        return new silverInvestTransfer_args();
      }

      public AsyncMethodCallback<TransferResultStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TransferResultStruct>() { 
          public void onComplete(TransferResultStruct o) {
            silverInvestTransfer_result result = new silverInvestTransfer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            silverInvestTransfer_result result = new silverInvestTransfer_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, silverInvestTransfer_args args, org.apache.thrift.async.AsyncMethodCallback<TransferResultStruct> resultHandler) throws TException {
        iface.silverInvestTransfer(args.transferInfo,resultHandler);
      }
    }

    public static class purchaseProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, purchaseProduct_args, PurchaseResultStruct> {
      public purchaseProduct() {
        super("purchaseProduct");
      }

      public purchaseProduct_args getEmptyArgsInstance() {
        return new purchaseProduct_args();
      }

      public AsyncMethodCallback<PurchaseResultStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PurchaseResultStruct>() { 
          public void onComplete(PurchaseResultStruct o) {
            purchaseProduct_result result = new purchaseProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            purchaseProduct_result result = new purchaseProduct_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, purchaseProduct_args args, org.apache.thrift.async.AsyncMethodCallback<PurchaseResultStruct> resultHandler) throws TException {
        iface.purchaseProduct(args.purchaseInfo,resultHandler);
      }
    }

    public static class issubank_productregister<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, issubank_productregister_args, IssuBankProductInfoResultStruct> {
      public issubank_productregister() {
        super("issubank_productregister");
      }

      public issubank_productregister_args getEmptyArgsInstance() {
        return new issubank_productregister_args();
      }

      public AsyncMethodCallback<IssuBankProductInfoResultStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IssuBankProductInfoResultStruct>() { 
          public void onComplete(IssuBankProductInfoResultStruct o) {
            issubank_productregister_result result = new issubank_productregister_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            issubank_productregister_result result = new issubank_productregister_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, issubank_productregister_args args, org.apache.thrift.async.AsyncMethodCallback<IssuBankProductInfoResultStruct> resultHandler) throws TException {
        iface.issubank_productregister(args.productInfo,resultHandler);
      }
    }

    public static class issubank_productupdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, issubank_productupdate_args, Void> {
      public issubank_productupdate() {
        super("issubank_productupdate");
      }

      public issubank_productupdate_args getEmptyArgsInstance() {
        return new issubank_productupdate_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            issubank_productupdate_result result = new issubank_productupdate_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            issubank_productupdate_result result = new issubank_productupdate_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, issubank_productupdate_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.issubank_productupdate(args.productInfo,resultHandler);
      }
    }

    public static class institution_regist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, institution_regist_args, InstitutionResultStruct> {
      public institution_regist() {
        super("institution_regist");
      }

      public institution_regist_args getEmptyArgsInstance() {
        return new institution_regist_args();
      }

      public AsyncMethodCallback<InstitutionResultStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<InstitutionResultStruct>() { 
          public void onComplete(InstitutionResultStruct o) {
            institution_regist_result result = new institution_regist_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            institution_regist_result result = new institution_regist_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, institution_regist_args args, org.apache.thrift.async.AsyncMethodCallback<InstitutionResultStruct> resultHandler) throws TException {
        iface.institution_regist(args.institutionInfo,resultHandler);
      }
    }

    public static class institution_getallproduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, institution_getallproduct_args, ProductListReultStruct> {
      public institution_getallproduct() {
        super("institution_getallproduct");
      }

      public institution_getallproduct_args getEmptyArgsInstance() {
        return new institution_getallproduct_args();
      }

      public AsyncMethodCallback<ProductListReultStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProductListReultStruct>() { 
          public void onComplete(ProductListReultStruct o) {
            institution_getallproduct_result result = new institution_getallproduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            institution_getallproduct_result result = new institution_getallproduct_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, institution_getallproduct_args args, org.apache.thrift.async.AsyncMethodCallback<ProductListReultStruct> resultHandler) throws TException {
        iface.institution_getallproduct(resultHandler);
      }
    }

    public static class institution_getproduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, institution_getproduct_args, ProductInfoStruct> {
      public institution_getproduct() {
        super("institution_getproduct");
      }

      public institution_getproduct_args getEmptyArgsInstance() {
        return new institution_getproduct_args();
      }

      public AsyncMethodCallback<ProductInfoStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProductInfoStruct>() { 
          public void onComplete(ProductInfoStruct o) {
            institution_getproduct_result result = new institution_getproduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            institution_getproduct_result result = new institution_getproduct_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, institution_getproduct_args args, org.apache.thrift.async.AsyncMethodCallback<ProductInfoStruct> resultHandler) throws TException {
        iface.institution_getproduct(args.productid,resultHandler);
      }
    }

    public static class institution_getauditproduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, institution_getauditproduct_args, ProductListReultStruct> {
      public institution_getauditproduct() {
        super("institution_getauditproduct");
      }

      public institution_getauditproduct_args getEmptyArgsInstance() {
        return new institution_getauditproduct_args();
      }

      public AsyncMethodCallback<ProductListReultStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProductListReultStruct>() { 
          public void onComplete(ProductListReultStruct o) {
            institution_getauditproduct_result result = new institution_getauditproduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            institution_getauditproduct_result result = new institution_getauditproduct_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, institution_getauditproduct_args args, org.apache.thrift.async.AsyncMethodCallback<ProductListReultStruct> resultHandler) throws TException {
        iface.institution_getauditproduct(args.institutionid,resultHandler);
      }
    }

    public static class institution_getissuproduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, institution_getissuproduct_args, ProductListReultStruct> {
      public institution_getissuproduct() {
        super("institution_getissuproduct");
      }

      public institution_getissuproduct_args getEmptyArgsInstance() {
        return new institution_getissuproduct_args();
      }

      public AsyncMethodCallback<ProductListReultStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProductListReultStruct>() { 
          public void onComplete(ProductListReultStruct o) {
            institution_getissuproduct_result result = new institution_getissuproduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            institution_getissuproduct_result result = new institution_getissuproduct_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, institution_getissuproduct_args args, org.apache.thrift.async.AsyncMethodCallback<ProductListReultStruct> resultHandler) throws TException {
        iface.institution_getissuproduct(args.institutionid,resultHandler);
      }
    }

    public static class institution_productaudit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, institution_productaudit_args, ProductAuditResultStruct> {
      public institution_productaudit() {
        super("institution_productaudit");
      }

      public institution_productaudit_args getEmptyArgsInstance() {
        return new institution_productaudit_args();
      }

      public AsyncMethodCallback<ProductAuditResultStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProductAuditResultStruct>() { 
          public void onComplete(ProductAuditResultStruct o) {
            institution_productaudit_result result = new institution_productaudit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            institution_productaudit_result result = new institution_productaudit_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, institution_productaudit_args args, org.apache.thrift.async.AsyncMethodCallback<ProductAuditResultStruct> resultHandler) throws TException {
        iface.institution_productaudit(args.productaudit,resultHandler);
      }
    }

    public static class institution_getInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, institution_getInfo_args, InstitutionInfoStruct> {
      public institution_getInfo() {
        super("institution_getInfo");
      }

      public institution_getInfo_args getEmptyArgsInstance() {
        return new institution_getInfo_args();
      }

      public AsyncMethodCallback<InstitutionInfoStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<InstitutionInfoStruct>() { 
          public void onComplete(InstitutionInfoStruct o) {
            institution_getInfo_result result = new institution_getInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            institution_getInfo_result result = new institution_getInfo_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, institution_getInfo_args args, org.apache.thrift.async.AsyncMethodCallback<InstitutionInfoStruct> resultHandler) throws TException {
        iface.institution_getInfo(args.institutionid,resultHandler);
      }
    }

    public static class investor_getInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, investor_getInfo_args, InvestorInfoStruct> {
      public investor_getInfo() {
        super("investor_getInfo");
      }

      public investor_getInfo_args getEmptyArgsInstance() {
        return new investor_getInfo_args();
      }

      public AsyncMethodCallback<InvestorInfoStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<InvestorInfoStruct>() { 
          public void onComplete(InvestorInfoStruct o) {
            investor_getInfo_result result = new investor_getInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            investor_getInfo_result result = new investor_getInfo_result();
            if (e instanceof FitsException) {
                        result.fe = (FitsException) e;
                        result.setFeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, investor_getInfo_args args, org.apache.thrift.async.AsyncMethodCallback<InvestorInfoStruct> resultHandler) throws TException {
        iface.investor_getInfo(args.investorid,resultHandler);
      }
    }

  }

  public static class investor_register_args implements org.apache.thrift.TBase<investor_register_args, investor_register_args._Fields>, java.io.Serializable, Cloneable, Comparable<investor_register_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_register_args");

    private static final org.apache.thrift.protocol.TField INVESTOR_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("investorInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_register_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_register_argsTupleSchemeFactory());
    }

    public InvestorRegisterInfoStruct investorInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVESTOR_INFO((short)1, "investorInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVESTOR_INFO
            return INVESTOR_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVESTOR_INFO, new org.apache.thrift.meta_data.FieldMetaData("investorInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvestorRegisterInfoStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_register_args.class, metaDataMap);
    }

    public investor_register_args() {
    }

    public investor_register_args(
      InvestorRegisterInfoStruct investorInfo)
    {
      this();
      this.investorInfo = investorInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_register_args(investor_register_args other) {
      if (other.isSetInvestorInfo()) {
        this.investorInfo = new InvestorRegisterInfoStruct(other.investorInfo);
      }
    }

    public investor_register_args deepCopy() {
      return new investor_register_args(this);
    }

    @Override
    public void clear() {
      this.investorInfo = null;
    }

    public InvestorRegisterInfoStruct getInvestorInfo() {
      return this.investorInfo;
    }

    public investor_register_args setInvestorInfo(InvestorRegisterInfoStruct investorInfo) {
      this.investorInfo = investorInfo;
      return this;
    }

    public void unsetInvestorInfo() {
      this.investorInfo = null;
    }

    /** Returns true if field investorInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetInvestorInfo() {
      return this.investorInfo != null;
    }

    public void setInvestorInfoIsSet(boolean value) {
      if (!value) {
        this.investorInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INVESTOR_INFO:
        if (value == null) {
          unsetInvestorInfo();
        } else {
          setInvestorInfo((InvestorRegisterInfoStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INVESTOR_INFO:
        return getInvestorInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INVESTOR_INFO:
        return isSetInvestorInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_register_args)
        return this.equals((investor_register_args)that);
      return false;
    }

    public boolean equals(investor_register_args that) {
      if (that == null)
        return false;

      boolean this_present_investorInfo = true && this.isSetInvestorInfo();
      boolean that_present_investorInfo = true && that.isSetInvestorInfo();
      if (this_present_investorInfo || that_present_investorInfo) {
        if (!(this_present_investorInfo && that_present_investorInfo))
          return false;
        if (!this.investorInfo.equals(that.investorInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_register_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInvestorInfo()).compareTo(other.isSetInvestorInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvestorInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorInfo, other.investorInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_register_args(");
      boolean first = true;

      sb.append("investorInfo:");
      if (this.investorInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.investorInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (investorInfo != null) {
        investorInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_register_argsStandardSchemeFactory implements SchemeFactory {
      public investor_register_argsStandardScheme getScheme() {
        return new investor_register_argsStandardScheme();
      }
    }

    private static class investor_register_argsStandardScheme extends StandardScheme<investor_register_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVESTOR_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.investorInfo = new InvestorRegisterInfoStruct();
                struct.investorInfo.read(iprot);
                struct.setInvestorInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_register_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.investorInfo != null) {
          oprot.writeFieldBegin(INVESTOR_INFO_FIELD_DESC);
          struct.investorInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_register_argsTupleSchemeFactory implements SchemeFactory {
      public investor_register_argsTupleScheme getScheme() {
        return new investor_register_argsTupleScheme();
      }
    }

    private static class investor_register_argsTupleScheme extends TupleScheme<investor_register_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_register_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInvestorInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInvestorInfo()) {
          struct.investorInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_register_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.investorInfo = new InvestorRegisterInfoStruct();
          struct.investorInfo.read(iprot);
          struct.setInvestorInfoIsSet(true);
        }
      }
    }

  }

  public static class investor_register_result implements org.apache.thrift.TBase<investor_register_result, investor_register_result._Fields>, java.io.Serializable, Cloneable, Comparable<investor_register_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_register_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_register_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_register_resultTupleSchemeFactory());
    }

    public InvestorRegisterResultInfoStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvestorRegisterResultInfoStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_register_result.class, metaDataMap);
    }

    public investor_register_result() {
    }

    public investor_register_result(
      InvestorRegisterResultInfoStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_register_result(investor_register_result other) {
      if (other.isSetSuccess()) {
        this.success = new InvestorRegisterResultInfoStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public investor_register_result deepCopy() {
      return new investor_register_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public InvestorRegisterResultInfoStruct getSuccess() {
      return this.success;
    }

    public investor_register_result setSuccess(InvestorRegisterResultInfoStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public investor_register_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((InvestorRegisterResultInfoStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_register_result)
        return this.equals((investor_register_result)that);
      return false;
    }

    public boolean equals(investor_register_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_register_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_register_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_register_resultStandardSchemeFactory implements SchemeFactory {
      public investor_register_resultStandardScheme getScheme() {
        return new investor_register_resultStandardScheme();
      }
    }

    private static class investor_register_resultStandardScheme extends StandardScheme<investor_register_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new InvestorRegisterResultInfoStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_register_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_register_resultTupleSchemeFactory implements SchemeFactory {
      public investor_register_resultTupleScheme getScheme() {
        return new investor_register_resultTupleScheme();
      }
    }

    private static class investor_register_resultTupleScheme extends TupleScheme<investor_register_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_register_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_register_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new InvestorRegisterResultInfoStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class investor_switchState_args implements org.apache.thrift.TBase<investor_switchState_args, investor_switchState_args._Fields>, java.io.Serializable, Cloneable, Comparable<investor_switchState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_switchState_args");

    private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("newState", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_switchState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_switchState_argsTupleSchemeFactory());
    }

    public String investorID; // required
    public int newState; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVESTOR_ID((short)1, "investorID"),
      NEW_STATE((short)2, "newState");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVESTOR_ID
            return INVESTOR_ID;
          case 2: // NEW_STATE
            return NEW_STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NEWSTATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_STATE, new org.apache.thrift.meta_data.FieldMetaData("newState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_switchState_args.class, metaDataMap);
    }

    public investor_switchState_args() {
    }

    public investor_switchState_args(
      String investorID,
      int newState)
    {
      this();
      this.investorID = investorID;
      this.newState = newState;
      setNewStateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_switchState_args(investor_switchState_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInvestorID()) {
        this.investorID = other.investorID;
      }
      this.newState = other.newState;
    }

    public investor_switchState_args deepCopy() {
      return new investor_switchState_args(this);
    }

    @Override
    public void clear() {
      this.investorID = null;
      setNewStateIsSet(false);
      this.newState = 0;
    }

    public String getInvestorID() {
      return this.investorID;
    }

    public investor_switchState_args setInvestorID(String investorID) {
      this.investorID = investorID;
      return this;
    }

    public void unsetInvestorID() {
      this.investorID = null;
    }

    /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
    public boolean isSetInvestorID() {
      return this.investorID != null;
    }

    public void setInvestorIDIsSet(boolean value) {
      if (!value) {
        this.investorID = null;
      }
    }

    public int getNewState() {
      return this.newState;
    }

    public investor_switchState_args setNewState(int newState) {
      this.newState = newState;
      setNewStateIsSet(true);
      return this;
    }

    public void unsetNewState() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWSTATE_ISSET_ID);
    }

    /** Returns true if field newState is set (has been assigned a value) and false otherwise */
    public boolean isSetNewState() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWSTATE_ISSET_ID);
    }

    public void setNewStateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWSTATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INVESTOR_ID:
        if (value == null) {
          unsetInvestorID();
        } else {
          setInvestorID((String)value);
        }
        break;

      case NEW_STATE:
        if (value == null) {
          unsetNewState();
        } else {
          setNewState((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INVESTOR_ID:
        return getInvestorID();

      case NEW_STATE:
        return Integer.valueOf(getNewState());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INVESTOR_ID:
        return isSetInvestorID();
      case NEW_STATE:
        return isSetNewState();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_switchState_args)
        return this.equals((investor_switchState_args)that);
      return false;
    }

    public boolean equals(investor_switchState_args that) {
      if (that == null)
        return false;

      boolean this_present_investorID = true && this.isSetInvestorID();
      boolean that_present_investorID = true && that.isSetInvestorID();
      if (this_present_investorID || that_present_investorID) {
        if (!(this_present_investorID && that_present_investorID))
          return false;
        if (!this.investorID.equals(that.investorID))
          return false;
      }

      boolean this_present_newState = true;
      boolean that_present_newState = true;
      if (this_present_newState || that_present_newState) {
        if (!(this_present_newState && that_present_newState))
          return false;
        if (this.newState != that.newState)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_switchState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvestorID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewState()).compareTo(other.isSetNewState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newState, other.newState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_switchState_args(");
      boolean first = true;

      sb.append("investorID:");
      if (this.investorID == null) {
        sb.append("null");
      } else {
        sb.append(this.investorID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newState:");
      sb.append(this.newState);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_switchState_argsStandardSchemeFactory implements SchemeFactory {
      public investor_switchState_argsStandardScheme getScheme() {
        return new investor_switchState_argsStandardScheme();
      }
    }

    private static class investor_switchState_argsStandardScheme extends StandardScheme<investor_switchState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_switchState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVESTOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.investorID = iprot.readString();
                struct.setInvestorIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newState = iprot.readI32();
                struct.setNewStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_switchState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.investorID != null) {
          oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
          oprot.writeString(struct.investorID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NEW_STATE_FIELD_DESC);
        oprot.writeI32(struct.newState);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_switchState_argsTupleSchemeFactory implements SchemeFactory {
      public investor_switchState_argsTupleScheme getScheme() {
        return new investor_switchState_argsTupleScheme();
      }
    }

    private static class investor_switchState_argsTupleScheme extends TupleScheme<investor_switchState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_switchState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInvestorID()) {
          optionals.set(0);
        }
        if (struct.isSetNewState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInvestorID()) {
          oprot.writeString(struct.investorID);
        }
        if (struct.isSetNewState()) {
          oprot.writeI32(struct.newState);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_switchState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.investorID = iprot.readString();
          struct.setInvestorIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newState = iprot.readI32();
          struct.setNewStateIsSet(true);
        }
      }
    }

  }

  public static class investor_switchState_result implements org.apache.thrift.TBase<investor_switchState_result, investor_switchState_result._Fields>, java.io.Serializable, Cloneable, Comparable<investor_switchState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_switchState_result");

    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_switchState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_switchState_resultTupleSchemeFactory());
    }

    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_switchState_result.class, metaDataMap);
    }

    public investor_switchState_result() {
    }

    public investor_switchState_result(
      FitsException fe)
    {
      this();
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_switchState_result(investor_switchState_result other) {
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public investor_switchState_result deepCopy() {
      return new investor_switchState_result(this);
    }

    @Override
    public void clear() {
      this.fe = null;
    }

    public FitsException getFe() {
      return this.fe;
    }

    public investor_switchState_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_switchState_result)
        return this.equals((investor_switchState_result)that);
      return false;
    }

    public boolean equals(investor_switchState_result that) {
      if (that == null)
        return false;

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_switchState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_switchState_result(");
      boolean first = true;

      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_switchState_resultStandardSchemeFactory implements SchemeFactory {
      public investor_switchState_resultStandardScheme getScheme() {
        return new investor_switchState_resultStandardScheme();
      }
    }

    private static class investor_switchState_resultStandardScheme extends StandardScheme<investor_switchState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_switchState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_switchState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_switchState_resultTupleSchemeFactory implements SchemeFactory {
      public investor_switchState_resultTupleScheme getScheme() {
        return new investor_switchState_resultTupleScheme();
      }
    }

    private static class investor_switchState_resultTupleScheme extends TupleScheme<investor_switchState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_switchState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_switchState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class investor_updateRiskLevel_args implements org.apache.thrift.TBase<investor_updateRiskLevel_args, investor_updateRiskLevel_args._Fields>, java.io.Serializable, Cloneable, Comparable<investor_updateRiskLevel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_updateRiskLevel_args");

    private static final org.apache.thrift.protocol.TField RISK_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("riskLevel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_updateRiskLevel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_updateRiskLevel_argsTupleSchemeFactory());
    }

    public RiskLevelStruct riskLevel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RISK_LEVEL((short)1, "riskLevel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RISK_LEVEL
            return RISK_LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RISK_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("riskLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RiskLevelStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_updateRiskLevel_args.class, metaDataMap);
    }

    public investor_updateRiskLevel_args() {
    }

    public investor_updateRiskLevel_args(
      RiskLevelStruct riskLevel)
    {
      this();
      this.riskLevel = riskLevel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_updateRiskLevel_args(investor_updateRiskLevel_args other) {
      if (other.isSetRiskLevel()) {
        this.riskLevel = new RiskLevelStruct(other.riskLevel);
      }
    }

    public investor_updateRiskLevel_args deepCopy() {
      return new investor_updateRiskLevel_args(this);
    }

    @Override
    public void clear() {
      this.riskLevel = null;
    }

    public RiskLevelStruct getRiskLevel() {
      return this.riskLevel;
    }

    public investor_updateRiskLevel_args setRiskLevel(RiskLevelStruct riskLevel) {
      this.riskLevel = riskLevel;
      return this;
    }

    public void unsetRiskLevel() {
      this.riskLevel = null;
    }

    /** Returns true if field riskLevel is set (has been assigned a value) and false otherwise */
    public boolean isSetRiskLevel() {
      return this.riskLevel != null;
    }

    public void setRiskLevelIsSet(boolean value) {
      if (!value) {
        this.riskLevel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RISK_LEVEL:
        if (value == null) {
          unsetRiskLevel();
        } else {
          setRiskLevel((RiskLevelStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RISK_LEVEL:
        return getRiskLevel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RISK_LEVEL:
        return isSetRiskLevel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_updateRiskLevel_args)
        return this.equals((investor_updateRiskLevel_args)that);
      return false;
    }

    public boolean equals(investor_updateRiskLevel_args that) {
      if (that == null)
        return false;

      boolean this_present_riskLevel = true && this.isSetRiskLevel();
      boolean that_present_riskLevel = true && that.isSetRiskLevel();
      if (this_present_riskLevel || that_present_riskLevel) {
        if (!(this_present_riskLevel && that_present_riskLevel))
          return false;
        if (!this.riskLevel.equals(that.riskLevel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_updateRiskLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRiskLevel()).compareTo(other.isSetRiskLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiskLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskLevel, other.riskLevel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_updateRiskLevel_args(");
      boolean first = true;

      sb.append("riskLevel:");
      if (this.riskLevel == null) {
        sb.append("null");
      } else {
        sb.append(this.riskLevel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (riskLevel != null) {
        riskLevel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_updateRiskLevel_argsStandardSchemeFactory implements SchemeFactory {
      public investor_updateRiskLevel_argsStandardScheme getScheme() {
        return new investor_updateRiskLevel_argsStandardScheme();
      }
    }

    private static class investor_updateRiskLevel_argsStandardScheme extends StandardScheme<investor_updateRiskLevel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_updateRiskLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RISK_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.riskLevel = new RiskLevelStruct();
                struct.riskLevel.read(iprot);
                struct.setRiskLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_updateRiskLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.riskLevel != null) {
          oprot.writeFieldBegin(RISK_LEVEL_FIELD_DESC);
          struct.riskLevel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_updateRiskLevel_argsTupleSchemeFactory implements SchemeFactory {
      public investor_updateRiskLevel_argsTupleScheme getScheme() {
        return new investor_updateRiskLevel_argsTupleScheme();
      }
    }

    private static class investor_updateRiskLevel_argsTupleScheme extends TupleScheme<investor_updateRiskLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_updateRiskLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRiskLevel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRiskLevel()) {
          struct.riskLevel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_updateRiskLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.riskLevel = new RiskLevelStruct();
          struct.riskLevel.read(iprot);
          struct.setRiskLevelIsSet(true);
        }
      }
    }

  }

  public static class investor_updateRiskLevel_result implements org.apache.thrift.TBase<investor_updateRiskLevel_result, investor_updateRiskLevel_result._Fields>, java.io.Serializable, Cloneable, Comparable<investor_updateRiskLevel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_updateRiskLevel_result");

    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_updateRiskLevel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_updateRiskLevel_resultTupleSchemeFactory());
    }

    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_updateRiskLevel_result.class, metaDataMap);
    }

    public investor_updateRiskLevel_result() {
    }

    public investor_updateRiskLevel_result(
      FitsException fe)
    {
      this();
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_updateRiskLevel_result(investor_updateRiskLevel_result other) {
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public investor_updateRiskLevel_result deepCopy() {
      return new investor_updateRiskLevel_result(this);
    }

    @Override
    public void clear() {
      this.fe = null;
    }

    public FitsException getFe() {
      return this.fe;
    }

    public investor_updateRiskLevel_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_updateRiskLevel_result)
        return this.equals((investor_updateRiskLevel_result)that);
      return false;
    }

    public boolean equals(investor_updateRiskLevel_result that) {
      if (that == null)
        return false;

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_updateRiskLevel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_updateRiskLevel_result(");
      boolean first = true;

      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_updateRiskLevel_resultStandardSchemeFactory implements SchemeFactory {
      public investor_updateRiskLevel_resultStandardScheme getScheme() {
        return new investor_updateRiskLevel_resultStandardScheme();
      }
    }

    private static class investor_updateRiskLevel_resultStandardScheme extends StandardScheme<investor_updateRiskLevel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_updateRiskLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_updateRiskLevel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_updateRiskLevel_resultTupleSchemeFactory implements SchemeFactory {
      public investor_updateRiskLevel_resultTupleScheme getScheme() {
        return new investor_updateRiskLevel_resultTupleScheme();
      }
    }

    private static class investor_updateRiskLevel_resultTupleScheme extends TupleScheme<investor_updateRiskLevel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_updateRiskLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_updateRiskLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class investor_bankSign_args implements org.apache.thrift.TBase<investor_bankSign_args, investor_bankSign_args._Fields>, java.io.Serializable, Cloneable, Comparable<investor_bankSign_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_bankSign_args");

    private static final org.apache.thrift.protocol.TField BANK_SIGN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankSignInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_bankSign_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_bankSign_argsTupleSchemeFactory());
    }

    public BankSignInfoStruct bankSignInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_SIGN_INFO((short)1, "bankSignInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_SIGN_INFO
            return BANK_SIGN_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_SIGN_INFO, new org.apache.thrift.meta_data.FieldMetaData("bankSignInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BankSignInfoStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_bankSign_args.class, metaDataMap);
    }

    public investor_bankSign_args() {
    }

    public investor_bankSign_args(
      BankSignInfoStruct bankSignInfo)
    {
      this();
      this.bankSignInfo = bankSignInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_bankSign_args(investor_bankSign_args other) {
      if (other.isSetBankSignInfo()) {
        this.bankSignInfo = new BankSignInfoStruct(other.bankSignInfo);
      }
    }

    public investor_bankSign_args deepCopy() {
      return new investor_bankSign_args(this);
    }

    @Override
    public void clear() {
      this.bankSignInfo = null;
    }

    public BankSignInfoStruct getBankSignInfo() {
      return this.bankSignInfo;
    }

    public investor_bankSign_args setBankSignInfo(BankSignInfoStruct bankSignInfo) {
      this.bankSignInfo = bankSignInfo;
      return this;
    }

    public void unsetBankSignInfo() {
      this.bankSignInfo = null;
    }

    /** Returns true if field bankSignInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankSignInfo() {
      return this.bankSignInfo != null;
    }

    public void setBankSignInfoIsSet(boolean value) {
      if (!value) {
        this.bankSignInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_SIGN_INFO:
        if (value == null) {
          unsetBankSignInfo();
        } else {
          setBankSignInfo((BankSignInfoStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_SIGN_INFO:
        return getBankSignInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_SIGN_INFO:
        return isSetBankSignInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_bankSign_args)
        return this.equals((investor_bankSign_args)that);
      return false;
    }

    public boolean equals(investor_bankSign_args that) {
      if (that == null)
        return false;

      boolean this_present_bankSignInfo = true && this.isSetBankSignInfo();
      boolean that_present_bankSignInfo = true && that.isSetBankSignInfo();
      if (this_present_bankSignInfo || that_present_bankSignInfo) {
        if (!(this_present_bankSignInfo && that_present_bankSignInfo))
          return false;
        if (!this.bankSignInfo.equals(that.bankSignInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_bankSign_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankSignInfo()).compareTo(other.isSetBankSignInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankSignInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankSignInfo, other.bankSignInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_bankSign_args(");
      boolean first = true;

      sb.append("bankSignInfo:");
      if (this.bankSignInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankSignInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bankSignInfo != null) {
        bankSignInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_bankSign_argsStandardSchemeFactory implements SchemeFactory {
      public investor_bankSign_argsStandardScheme getScheme() {
        return new investor_bankSign_argsStandardScheme();
      }
    }

    private static class investor_bankSign_argsStandardScheme extends StandardScheme<investor_bankSign_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_bankSign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_SIGN_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bankSignInfo = new BankSignInfoStruct();
                struct.bankSignInfo.read(iprot);
                struct.setBankSignInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_bankSign_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bankSignInfo != null) {
          oprot.writeFieldBegin(BANK_SIGN_INFO_FIELD_DESC);
          struct.bankSignInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_bankSign_argsTupleSchemeFactory implements SchemeFactory {
      public investor_bankSign_argsTupleScheme getScheme() {
        return new investor_bankSign_argsTupleScheme();
      }
    }

    private static class investor_bankSign_argsTupleScheme extends TupleScheme<investor_bankSign_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_bankSign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankSignInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBankSignInfo()) {
          struct.bankSignInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_bankSign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bankSignInfo = new BankSignInfoStruct();
          struct.bankSignInfo.read(iprot);
          struct.setBankSignInfoIsSet(true);
        }
      }
    }

  }

  public static class investor_bankSign_result implements org.apache.thrift.TBase<investor_bankSign_result, investor_bankSign_result._Fields>, java.io.Serializable, Cloneable, Comparable<investor_bankSign_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_bankSign_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_bankSign_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_bankSign_resultTupleSchemeFactory());
    }

    public BankSignResultStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BankSignResultStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_bankSign_result.class, metaDataMap);
    }

    public investor_bankSign_result() {
    }

    public investor_bankSign_result(
      BankSignResultStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_bankSign_result(investor_bankSign_result other) {
      if (other.isSetSuccess()) {
        this.success = new BankSignResultStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public investor_bankSign_result deepCopy() {
      return new investor_bankSign_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public BankSignResultStruct getSuccess() {
      return this.success;
    }

    public investor_bankSign_result setSuccess(BankSignResultStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public investor_bankSign_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BankSignResultStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_bankSign_result)
        return this.equals((investor_bankSign_result)that);
      return false;
    }

    public boolean equals(investor_bankSign_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_bankSign_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_bankSign_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_bankSign_resultStandardSchemeFactory implements SchemeFactory {
      public investor_bankSign_resultStandardScheme getScheme() {
        return new investor_bankSign_resultStandardScheme();
      }
    }

    private static class investor_bankSign_resultStandardScheme extends StandardScheme<investor_bankSign_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_bankSign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BankSignResultStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_bankSign_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_bankSign_resultTupleSchemeFactory implements SchemeFactory {
      public investor_bankSign_resultTupleScheme getScheme() {
        return new investor_bankSign_resultTupleScheme();
      }
    }

    private static class investor_bankSign_resultTupleScheme extends TupleScheme<investor_bankSign_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_bankSign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_bankSign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new BankSignResultStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class silverInvestTransfer_args implements org.apache.thrift.TBase<silverInvestTransfer_args, silverInvestTransfer_args._Fields>, java.io.Serializable, Cloneable, Comparable<silverInvestTransfer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("silverInvestTransfer_args");

    private static final org.apache.thrift.protocol.TField TRANSFER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("transferInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new silverInvestTransfer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new silverInvestTransfer_argsTupleSchemeFactory());
    }

    public TransferInfoStruct transferInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSFER_INFO((short)1, "transferInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSFER_INFO
            return TRANSFER_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSFER_INFO, new org.apache.thrift.meta_data.FieldMetaData("transferInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransferInfoStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(silverInvestTransfer_args.class, metaDataMap);
    }

    public silverInvestTransfer_args() {
    }

    public silverInvestTransfer_args(
      TransferInfoStruct transferInfo)
    {
      this();
      this.transferInfo = transferInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public silverInvestTransfer_args(silverInvestTransfer_args other) {
      if (other.isSetTransferInfo()) {
        this.transferInfo = new TransferInfoStruct(other.transferInfo);
      }
    }

    public silverInvestTransfer_args deepCopy() {
      return new silverInvestTransfer_args(this);
    }

    @Override
    public void clear() {
      this.transferInfo = null;
    }

    public TransferInfoStruct getTransferInfo() {
      return this.transferInfo;
    }

    public silverInvestTransfer_args setTransferInfo(TransferInfoStruct transferInfo) {
      this.transferInfo = transferInfo;
      return this;
    }

    public void unsetTransferInfo() {
      this.transferInfo = null;
    }

    /** Returns true if field transferInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetTransferInfo() {
      return this.transferInfo != null;
    }

    public void setTransferInfoIsSet(boolean value) {
      if (!value) {
        this.transferInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANSFER_INFO:
        if (value == null) {
          unsetTransferInfo();
        } else {
          setTransferInfo((TransferInfoStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSFER_INFO:
        return getTransferInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANSFER_INFO:
        return isSetTransferInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof silverInvestTransfer_args)
        return this.equals((silverInvestTransfer_args)that);
      return false;
    }

    public boolean equals(silverInvestTransfer_args that) {
      if (that == null)
        return false;

      boolean this_present_transferInfo = true && this.isSetTransferInfo();
      boolean that_present_transferInfo = true && that.isSetTransferInfo();
      if (this_present_transferInfo || that_present_transferInfo) {
        if (!(this_present_transferInfo && that_present_transferInfo))
          return false;
        if (!this.transferInfo.equals(that.transferInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(silverInvestTransfer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransferInfo()).compareTo(other.isSetTransferInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransferInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferInfo, other.transferInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("silverInvestTransfer_args(");
      boolean first = true;

      sb.append("transferInfo:");
      if (this.transferInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.transferInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (transferInfo != null) {
        transferInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class silverInvestTransfer_argsStandardSchemeFactory implements SchemeFactory {
      public silverInvestTransfer_argsStandardScheme getScheme() {
        return new silverInvestTransfer_argsStandardScheme();
      }
    }

    private static class silverInvestTransfer_argsStandardScheme extends StandardScheme<silverInvestTransfer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, silverInvestTransfer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSFER_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transferInfo = new TransferInfoStruct();
                struct.transferInfo.read(iprot);
                struct.setTransferInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, silverInvestTransfer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transferInfo != null) {
          oprot.writeFieldBegin(TRANSFER_INFO_FIELD_DESC);
          struct.transferInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class silverInvestTransfer_argsTupleSchemeFactory implements SchemeFactory {
      public silverInvestTransfer_argsTupleScheme getScheme() {
        return new silverInvestTransfer_argsTupleScheme();
      }
    }

    private static class silverInvestTransfer_argsTupleScheme extends TupleScheme<silverInvestTransfer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, silverInvestTransfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransferInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTransferInfo()) {
          struct.transferInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, silverInvestTransfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.transferInfo = new TransferInfoStruct();
          struct.transferInfo.read(iprot);
          struct.setTransferInfoIsSet(true);
        }
      }
    }

  }

  public static class silverInvestTransfer_result implements org.apache.thrift.TBase<silverInvestTransfer_result, silverInvestTransfer_result._Fields>, java.io.Serializable, Cloneable, Comparable<silverInvestTransfer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("silverInvestTransfer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new silverInvestTransfer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new silverInvestTransfer_resultTupleSchemeFactory());
    }

    public TransferResultStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransferResultStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(silverInvestTransfer_result.class, metaDataMap);
    }

    public silverInvestTransfer_result() {
    }

    public silverInvestTransfer_result(
      TransferResultStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public silverInvestTransfer_result(silverInvestTransfer_result other) {
      if (other.isSetSuccess()) {
        this.success = new TransferResultStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public silverInvestTransfer_result deepCopy() {
      return new silverInvestTransfer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public TransferResultStruct getSuccess() {
      return this.success;
    }

    public silverInvestTransfer_result setSuccess(TransferResultStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public silverInvestTransfer_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TransferResultStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof silverInvestTransfer_result)
        return this.equals((silverInvestTransfer_result)that);
      return false;
    }

    public boolean equals(silverInvestTransfer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(silverInvestTransfer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("silverInvestTransfer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class silverInvestTransfer_resultStandardSchemeFactory implements SchemeFactory {
      public silverInvestTransfer_resultStandardScheme getScheme() {
        return new silverInvestTransfer_resultStandardScheme();
      }
    }

    private static class silverInvestTransfer_resultStandardScheme extends StandardScheme<silverInvestTransfer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, silverInvestTransfer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TransferResultStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, silverInvestTransfer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class silverInvestTransfer_resultTupleSchemeFactory implements SchemeFactory {
      public silverInvestTransfer_resultTupleScheme getScheme() {
        return new silverInvestTransfer_resultTupleScheme();
      }
    }

    private static class silverInvestTransfer_resultTupleScheme extends TupleScheme<silverInvestTransfer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, silverInvestTransfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, silverInvestTransfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TransferResultStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class purchaseProduct_args implements org.apache.thrift.TBase<purchaseProduct_args, purchaseProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<purchaseProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purchaseProduct_args");

    private static final org.apache.thrift.protocol.TField PURCHASE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("purchaseInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purchaseProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purchaseProduct_argsTupleSchemeFactory());
    }

    public PurchaseInfoStruct purchaseInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PURCHASE_INFO((short)1, "purchaseInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PURCHASE_INFO
            return PURCHASE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PURCHASE_INFO, new org.apache.thrift.meta_data.FieldMetaData("purchaseInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PurchaseInfoStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purchaseProduct_args.class, metaDataMap);
    }

    public purchaseProduct_args() {
    }

    public purchaseProduct_args(
      PurchaseInfoStruct purchaseInfo)
    {
      this();
      this.purchaseInfo = purchaseInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purchaseProduct_args(purchaseProduct_args other) {
      if (other.isSetPurchaseInfo()) {
        this.purchaseInfo = new PurchaseInfoStruct(other.purchaseInfo);
      }
    }

    public purchaseProduct_args deepCopy() {
      return new purchaseProduct_args(this);
    }

    @Override
    public void clear() {
      this.purchaseInfo = null;
    }

    public PurchaseInfoStruct getPurchaseInfo() {
      return this.purchaseInfo;
    }

    public purchaseProduct_args setPurchaseInfo(PurchaseInfoStruct purchaseInfo) {
      this.purchaseInfo = purchaseInfo;
      return this;
    }

    public void unsetPurchaseInfo() {
      this.purchaseInfo = null;
    }

    /** Returns true if field purchaseInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetPurchaseInfo() {
      return this.purchaseInfo != null;
    }

    public void setPurchaseInfoIsSet(boolean value) {
      if (!value) {
        this.purchaseInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PURCHASE_INFO:
        if (value == null) {
          unsetPurchaseInfo();
        } else {
          setPurchaseInfo((PurchaseInfoStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PURCHASE_INFO:
        return getPurchaseInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PURCHASE_INFO:
        return isSetPurchaseInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purchaseProduct_args)
        return this.equals((purchaseProduct_args)that);
      return false;
    }

    public boolean equals(purchaseProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_purchaseInfo = true && this.isSetPurchaseInfo();
      boolean that_present_purchaseInfo = true && that.isSetPurchaseInfo();
      if (this_present_purchaseInfo || that_present_purchaseInfo) {
        if (!(this_present_purchaseInfo && that_present_purchaseInfo))
          return false;
        if (!this.purchaseInfo.equals(that.purchaseInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(purchaseProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPurchaseInfo()).compareTo(other.isSetPurchaseInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurchaseInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purchaseInfo, other.purchaseInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purchaseProduct_args(");
      boolean first = true;

      sb.append("purchaseInfo:");
      if (this.purchaseInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.purchaseInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (purchaseInfo != null) {
        purchaseInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class purchaseProduct_argsStandardSchemeFactory implements SchemeFactory {
      public purchaseProduct_argsStandardScheme getScheme() {
        return new purchaseProduct_argsStandardScheme();
      }
    }

    private static class purchaseProduct_argsStandardScheme extends StandardScheme<purchaseProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purchaseProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PURCHASE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.purchaseInfo = new PurchaseInfoStruct();
                struct.purchaseInfo.read(iprot);
                struct.setPurchaseInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purchaseProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.purchaseInfo != null) {
          oprot.writeFieldBegin(PURCHASE_INFO_FIELD_DESC);
          struct.purchaseInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purchaseProduct_argsTupleSchemeFactory implements SchemeFactory {
      public purchaseProduct_argsTupleScheme getScheme() {
        return new purchaseProduct_argsTupleScheme();
      }
    }

    private static class purchaseProduct_argsTupleScheme extends TupleScheme<purchaseProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purchaseProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPurchaseInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPurchaseInfo()) {
          struct.purchaseInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purchaseProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.purchaseInfo = new PurchaseInfoStruct();
          struct.purchaseInfo.read(iprot);
          struct.setPurchaseInfoIsSet(true);
        }
      }
    }

  }

  public static class purchaseProduct_result implements org.apache.thrift.TBase<purchaseProduct_result, purchaseProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<purchaseProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purchaseProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purchaseProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purchaseProduct_resultTupleSchemeFactory());
    }

    public PurchaseResultStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PurchaseResultStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purchaseProduct_result.class, metaDataMap);
    }

    public purchaseProduct_result() {
    }

    public purchaseProduct_result(
      PurchaseResultStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purchaseProduct_result(purchaseProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new PurchaseResultStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public purchaseProduct_result deepCopy() {
      return new purchaseProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public PurchaseResultStruct getSuccess() {
      return this.success;
    }

    public purchaseProduct_result setSuccess(PurchaseResultStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public purchaseProduct_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PurchaseResultStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purchaseProduct_result)
        return this.equals((purchaseProduct_result)that);
      return false;
    }

    public boolean equals(purchaseProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(purchaseProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purchaseProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class purchaseProduct_resultStandardSchemeFactory implements SchemeFactory {
      public purchaseProduct_resultStandardScheme getScheme() {
        return new purchaseProduct_resultStandardScheme();
      }
    }

    private static class purchaseProduct_resultStandardScheme extends StandardScheme<purchaseProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purchaseProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PurchaseResultStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purchaseProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purchaseProduct_resultTupleSchemeFactory implements SchemeFactory {
      public purchaseProduct_resultTupleScheme getScheme() {
        return new purchaseProduct_resultTupleScheme();
      }
    }

    private static class purchaseProduct_resultTupleScheme extends TupleScheme<purchaseProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purchaseProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purchaseProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PurchaseResultStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class issubank_productregister_args implements org.apache.thrift.TBase<issubank_productregister_args, issubank_productregister_args._Fields>, java.io.Serializable, Cloneable, Comparable<issubank_productregister_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issubank_productregister_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("productInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issubank_productregister_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issubank_productregister_argsTupleSchemeFactory());
    }

    public ProductInfoStruct productInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_INFO((short)1, "productInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_INFO
            return PRODUCT_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_INFO, new org.apache.thrift.meta_data.FieldMetaData("productInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductInfoStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issubank_productregister_args.class, metaDataMap);
    }

    public issubank_productregister_args() {
    }

    public issubank_productregister_args(
      ProductInfoStruct productInfo)
    {
      this();
      this.productInfo = productInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issubank_productregister_args(issubank_productregister_args other) {
      if (other.isSetProductInfo()) {
        this.productInfo = new ProductInfoStruct(other.productInfo);
      }
    }

    public issubank_productregister_args deepCopy() {
      return new issubank_productregister_args(this);
    }

    @Override
    public void clear() {
      this.productInfo = null;
    }

    public ProductInfoStruct getProductInfo() {
      return this.productInfo;
    }

    public issubank_productregister_args setProductInfo(ProductInfoStruct productInfo) {
      this.productInfo = productInfo;
      return this;
    }

    public void unsetProductInfo() {
      this.productInfo = null;
    }

    /** Returns true if field productInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductInfo() {
      return this.productInfo != null;
    }

    public void setProductInfoIsSet(boolean value) {
      if (!value) {
        this.productInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_INFO:
        if (value == null) {
          unsetProductInfo();
        } else {
          setProductInfo((ProductInfoStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_INFO:
        return getProductInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_INFO:
        return isSetProductInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issubank_productregister_args)
        return this.equals((issubank_productregister_args)that);
      return false;
    }

    public boolean equals(issubank_productregister_args that) {
      if (that == null)
        return false;

      boolean this_present_productInfo = true && this.isSetProductInfo();
      boolean that_present_productInfo = true && that.isSetProductInfo();
      if (this_present_productInfo || that_present_productInfo) {
        if (!(this_present_productInfo && that_present_productInfo))
          return false;
        if (!this.productInfo.equals(that.productInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(issubank_productregister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductInfo()).compareTo(other.isSetProductInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productInfo, other.productInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issubank_productregister_args(");
      boolean first = true;

      sb.append("productInfo:");
      if (this.productInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.productInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productInfo != null) {
        productInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issubank_productregister_argsStandardSchemeFactory implements SchemeFactory {
      public issubank_productregister_argsStandardScheme getScheme() {
        return new issubank_productregister_argsStandardScheme();
      }
    }

    private static class issubank_productregister_argsStandardScheme extends StandardScheme<issubank_productregister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issubank_productregister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productInfo = new ProductInfoStruct();
                struct.productInfo.read(iprot);
                struct.setProductInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issubank_productregister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productInfo != null) {
          oprot.writeFieldBegin(PRODUCT_INFO_FIELD_DESC);
          struct.productInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issubank_productregister_argsTupleSchemeFactory implements SchemeFactory {
      public issubank_productregister_argsTupleScheme getScheme() {
        return new issubank_productregister_argsTupleScheme();
      }
    }

    private static class issubank_productregister_argsTupleScheme extends TupleScheme<issubank_productregister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issubank_productregister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductInfo()) {
          struct.productInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issubank_productregister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productInfo = new ProductInfoStruct();
          struct.productInfo.read(iprot);
          struct.setProductInfoIsSet(true);
        }
      }
    }

  }

  public static class issubank_productregister_result implements org.apache.thrift.TBase<issubank_productregister_result, issubank_productregister_result._Fields>, java.io.Serializable, Cloneable, Comparable<issubank_productregister_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issubank_productregister_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issubank_productregister_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issubank_productregister_resultTupleSchemeFactory());
    }

    public IssuBankProductInfoResultStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IssuBankProductInfoResultStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issubank_productregister_result.class, metaDataMap);
    }

    public issubank_productregister_result() {
    }

    public issubank_productregister_result(
      IssuBankProductInfoResultStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issubank_productregister_result(issubank_productregister_result other) {
      if (other.isSetSuccess()) {
        this.success = new IssuBankProductInfoResultStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public issubank_productregister_result deepCopy() {
      return new issubank_productregister_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public IssuBankProductInfoResultStruct getSuccess() {
      return this.success;
    }

    public issubank_productregister_result setSuccess(IssuBankProductInfoResultStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public issubank_productregister_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IssuBankProductInfoResultStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issubank_productregister_result)
        return this.equals((issubank_productregister_result)that);
      return false;
    }

    public boolean equals(issubank_productregister_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(issubank_productregister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issubank_productregister_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issubank_productregister_resultStandardSchemeFactory implements SchemeFactory {
      public issubank_productregister_resultStandardScheme getScheme() {
        return new issubank_productregister_resultStandardScheme();
      }
    }

    private static class issubank_productregister_resultStandardScheme extends StandardScheme<issubank_productregister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issubank_productregister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new IssuBankProductInfoResultStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issubank_productregister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issubank_productregister_resultTupleSchemeFactory implements SchemeFactory {
      public issubank_productregister_resultTupleScheme getScheme() {
        return new issubank_productregister_resultTupleScheme();
      }
    }

    private static class issubank_productregister_resultTupleScheme extends TupleScheme<issubank_productregister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issubank_productregister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issubank_productregister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new IssuBankProductInfoResultStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class issubank_productupdate_args implements org.apache.thrift.TBase<issubank_productupdate_args, issubank_productupdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<issubank_productupdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issubank_productupdate_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("productInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issubank_productupdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issubank_productupdate_argsTupleSchemeFactory());
    }

    public ProductInfoStruct productInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_INFO((short)1, "productInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_INFO
            return PRODUCT_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_INFO, new org.apache.thrift.meta_data.FieldMetaData("productInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductInfoStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issubank_productupdate_args.class, metaDataMap);
    }

    public issubank_productupdate_args() {
    }

    public issubank_productupdate_args(
      ProductInfoStruct productInfo)
    {
      this();
      this.productInfo = productInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issubank_productupdate_args(issubank_productupdate_args other) {
      if (other.isSetProductInfo()) {
        this.productInfo = new ProductInfoStruct(other.productInfo);
      }
    }

    public issubank_productupdate_args deepCopy() {
      return new issubank_productupdate_args(this);
    }

    @Override
    public void clear() {
      this.productInfo = null;
    }

    public ProductInfoStruct getProductInfo() {
      return this.productInfo;
    }

    public issubank_productupdate_args setProductInfo(ProductInfoStruct productInfo) {
      this.productInfo = productInfo;
      return this;
    }

    public void unsetProductInfo() {
      this.productInfo = null;
    }

    /** Returns true if field productInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductInfo() {
      return this.productInfo != null;
    }

    public void setProductInfoIsSet(boolean value) {
      if (!value) {
        this.productInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_INFO:
        if (value == null) {
          unsetProductInfo();
        } else {
          setProductInfo((ProductInfoStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_INFO:
        return getProductInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_INFO:
        return isSetProductInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issubank_productupdate_args)
        return this.equals((issubank_productupdate_args)that);
      return false;
    }

    public boolean equals(issubank_productupdate_args that) {
      if (that == null)
        return false;

      boolean this_present_productInfo = true && this.isSetProductInfo();
      boolean that_present_productInfo = true && that.isSetProductInfo();
      if (this_present_productInfo || that_present_productInfo) {
        if (!(this_present_productInfo && that_present_productInfo))
          return false;
        if (!this.productInfo.equals(that.productInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(issubank_productupdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductInfo()).compareTo(other.isSetProductInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productInfo, other.productInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issubank_productupdate_args(");
      boolean first = true;

      sb.append("productInfo:");
      if (this.productInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.productInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productInfo != null) {
        productInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issubank_productupdate_argsStandardSchemeFactory implements SchemeFactory {
      public issubank_productupdate_argsStandardScheme getScheme() {
        return new issubank_productupdate_argsStandardScheme();
      }
    }

    private static class issubank_productupdate_argsStandardScheme extends StandardScheme<issubank_productupdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issubank_productupdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productInfo = new ProductInfoStruct();
                struct.productInfo.read(iprot);
                struct.setProductInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issubank_productupdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productInfo != null) {
          oprot.writeFieldBegin(PRODUCT_INFO_FIELD_DESC);
          struct.productInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issubank_productupdate_argsTupleSchemeFactory implements SchemeFactory {
      public issubank_productupdate_argsTupleScheme getScheme() {
        return new issubank_productupdate_argsTupleScheme();
      }
    }

    private static class issubank_productupdate_argsTupleScheme extends TupleScheme<issubank_productupdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issubank_productupdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductInfo()) {
          struct.productInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issubank_productupdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productInfo = new ProductInfoStruct();
          struct.productInfo.read(iprot);
          struct.setProductInfoIsSet(true);
        }
      }
    }

  }

  public static class issubank_productupdate_result implements org.apache.thrift.TBase<issubank_productupdate_result, issubank_productupdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<issubank_productupdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issubank_productupdate_result");

    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issubank_productupdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issubank_productupdate_resultTupleSchemeFactory());
    }

    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issubank_productupdate_result.class, metaDataMap);
    }

    public issubank_productupdate_result() {
    }

    public issubank_productupdate_result(
      FitsException fe)
    {
      this();
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issubank_productupdate_result(issubank_productupdate_result other) {
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public issubank_productupdate_result deepCopy() {
      return new issubank_productupdate_result(this);
    }

    @Override
    public void clear() {
      this.fe = null;
    }

    public FitsException getFe() {
      return this.fe;
    }

    public issubank_productupdate_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issubank_productupdate_result)
        return this.equals((issubank_productupdate_result)that);
      return false;
    }

    public boolean equals(issubank_productupdate_result that) {
      if (that == null)
        return false;

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(issubank_productupdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issubank_productupdate_result(");
      boolean first = true;

      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issubank_productupdate_resultStandardSchemeFactory implements SchemeFactory {
      public issubank_productupdate_resultStandardScheme getScheme() {
        return new issubank_productupdate_resultStandardScheme();
      }
    }

    private static class issubank_productupdate_resultStandardScheme extends StandardScheme<issubank_productupdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issubank_productupdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issubank_productupdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issubank_productupdate_resultTupleSchemeFactory implements SchemeFactory {
      public issubank_productupdate_resultTupleScheme getScheme() {
        return new issubank_productupdate_resultTupleScheme();
      }
    }

    private static class issubank_productupdate_resultTupleScheme extends TupleScheme<issubank_productupdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issubank_productupdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issubank_productupdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class institution_regist_args implements org.apache.thrift.TBase<institution_regist_args, institution_regist_args._Fields>, java.io.Serializable, Cloneable, Comparable<institution_regist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("institution_regist_args");

    private static final org.apache.thrift.protocol.TField INSTITUTION_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("institutionInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new institution_regist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new institution_regist_argsTupleSchemeFactory());
    }

    public InstitutionInfoStruct institutionInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTITUTION_INFO((short)1, "institutionInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTITUTION_INFO
            return INSTITUTION_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTITUTION_INFO, new org.apache.thrift.meta_data.FieldMetaData("institutionInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InstitutionInfoStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(institution_regist_args.class, metaDataMap);
    }

    public institution_regist_args() {
    }

    public institution_regist_args(
      InstitutionInfoStruct institutionInfo)
    {
      this();
      this.institutionInfo = institutionInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public institution_regist_args(institution_regist_args other) {
      if (other.isSetInstitutionInfo()) {
        this.institutionInfo = new InstitutionInfoStruct(other.institutionInfo);
      }
    }

    public institution_regist_args deepCopy() {
      return new institution_regist_args(this);
    }

    @Override
    public void clear() {
      this.institutionInfo = null;
    }

    public InstitutionInfoStruct getInstitutionInfo() {
      return this.institutionInfo;
    }

    public institution_regist_args setInstitutionInfo(InstitutionInfoStruct institutionInfo) {
      this.institutionInfo = institutionInfo;
      return this;
    }

    public void unsetInstitutionInfo() {
      this.institutionInfo = null;
    }

    /** Returns true if field institutionInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetInstitutionInfo() {
      return this.institutionInfo != null;
    }

    public void setInstitutionInfoIsSet(boolean value) {
      if (!value) {
        this.institutionInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INSTITUTION_INFO:
        if (value == null) {
          unsetInstitutionInfo();
        } else {
          setInstitutionInfo((InstitutionInfoStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTITUTION_INFO:
        return getInstitutionInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INSTITUTION_INFO:
        return isSetInstitutionInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof institution_regist_args)
        return this.equals((institution_regist_args)that);
      return false;
    }

    public boolean equals(institution_regist_args that) {
      if (that == null)
        return false;

      boolean this_present_institutionInfo = true && this.isSetInstitutionInfo();
      boolean that_present_institutionInfo = true && that.isSetInstitutionInfo();
      if (this_present_institutionInfo || that_present_institutionInfo) {
        if (!(this_present_institutionInfo && that_present_institutionInfo))
          return false;
        if (!this.institutionInfo.equals(that.institutionInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(institution_regist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInstitutionInfo()).compareTo(other.isSetInstitutionInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstitutionInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.institutionInfo, other.institutionInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("institution_regist_args(");
      boolean first = true;

      sb.append("institutionInfo:");
      if (this.institutionInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.institutionInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (institutionInfo != null) {
        institutionInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class institution_regist_argsStandardSchemeFactory implements SchemeFactory {
      public institution_regist_argsStandardScheme getScheme() {
        return new institution_regist_argsStandardScheme();
      }
    }

    private static class institution_regist_argsStandardScheme extends StandardScheme<institution_regist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, institution_regist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTITUTION_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.institutionInfo = new InstitutionInfoStruct();
                struct.institutionInfo.read(iprot);
                struct.setInstitutionInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, institution_regist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.institutionInfo != null) {
          oprot.writeFieldBegin(INSTITUTION_INFO_FIELD_DESC);
          struct.institutionInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class institution_regist_argsTupleSchemeFactory implements SchemeFactory {
      public institution_regist_argsTupleScheme getScheme() {
        return new institution_regist_argsTupleScheme();
      }
    }

    private static class institution_regist_argsTupleScheme extends TupleScheme<institution_regist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, institution_regist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInstitutionInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstitutionInfo()) {
          struct.institutionInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, institution_regist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.institutionInfo = new InstitutionInfoStruct();
          struct.institutionInfo.read(iprot);
          struct.setInstitutionInfoIsSet(true);
        }
      }
    }

  }

  public static class institution_regist_result implements org.apache.thrift.TBase<institution_regist_result, institution_regist_result._Fields>, java.io.Serializable, Cloneable, Comparable<institution_regist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("institution_regist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new institution_regist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new institution_regist_resultTupleSchemeFactory());
    }

    public InstitutionResultStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InstitutionResultStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(institution_regist_result.class, metaDataMap);
    }

    public institution_regist_result() {
    }

    public institution_regist_result(
      InstitutionResultStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public institution_regist_result(institution_regist_result other) {
      if (other.isSetSuccess()) {
        this.success = new InstitutionResultStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public institution_regist_result deepCopy() {
      return new institution_regist_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public InstitutionResultStruct getSuccess() {
      return this.success;
    }

    public institution_regist_result setSuccess(InstitutionResultStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public institution_regist_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((InstitutionResultStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof institution_regist_result)
        return this.equals((institution_regist_result)that);
      return false;
    }

    public boolean equals(institution_regist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(institution_regist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("institution_regist_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class institution_regist_resultStandardSchemeFactory implements SchemeFactory {
      public institution_regist_resultStandardScheme getScheme() {
        return new institution_regist_resultStandardScheme();
      }
    }

    private static class institution_regist_resultStandardScheme extends StandardScheme<institution_regist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, institution_regist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new InstitutionResultStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, institution_regist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class institution_regist_resultTupleSchemeFactory implements SchemeFactory {
      public institution_regist_resultTupleScheme getScheme() {
        return new institution_regist_resultTupleScheme();
      }
    }

    private static class institution_regist_resultTupleScheme extends TupleScheme<institution_regist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, institution_regist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, institution_regist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new InstitutionResultStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class institution_getallproduct_args implements org.apache.thrift.TBase<institution_getallproduct_args, institution_getallproduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<institution_getallproduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("institution_getallproduct_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new institution_getallproduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new institution_getallproduct_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(institution_getallproduct_args.class, metaDataMap);
    }

    public institution_getallproduct_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public institution_getallproduct_args(institution_getallproduct_args other) {
    }

    public institution_getallproduct_args deepCopy() {
      return new institution_getallproduct_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof institution_getallproduct_args)
        return this.equals((institution_getallproduct_args)that);
      return false;
    }

    public boolean equals(institution_getallproduct_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(institution_getallproduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("institution_getallproduct_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class institution_getallproduct_argsStandardSchemeFactory implements SchemeFactory {
      public institution_getallproduct_argsStandardScheme getScheme() {
        return new institution_getallproduct_argsStandardScheme();
      }
    }

    private static class institution_getallproduct_argsStandardScheme extends StandardScheme<institution_getallproduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, institution_getallproduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, institution_getallproduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class institution_getallproduct_argsTupleSchemeFactory implements SchemeFactory {
      public institution_getallproduct_argsTupleScheme getScheme() {
        return new institution_getallproduct_argsTupleScheme();
      }
    }

    private static class institution_getallproduct_argsTupleScheme extends TupleScheme<institution_getallproduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, institution_getallproduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, institution_getallproduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class institution_getallproduct_result implements org.apache.thrift.TBase<institution_getallproduct_result, institution_getallproduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<institution_getallproduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("institution_getallproduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new institution_getallproduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new institution_getallproduct_resultTupleSchemeFactory());
    }

    public ProductListReultStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductListReultStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(institution_getallproduct_result.class, metaDataMap);
    }

    public institution_getallproduct_result() {
    }

    public institution_getallproduct_result(
      ProductListReultStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public institution_getallproduct_result(institution_getallproduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductListReultStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public institution_getallproduct_result deepCopy() {
      return new institution_getallproduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public ProductListReultStruct getSuccess() {
      return this.success;
    }

    public institution_getallproduct_result setSuccess(ProductListReultStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public institution_getallproduct_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProductListReultStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof institution_getallproduct_result)
        return this.equals((institution_getallproduct_result)that);
      return false;
    }

    public boolean equals(institution_getallproduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(institution_getallproduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("institution_getallproduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class institution_getallproduct_resultStandardSchemeFactory implements SchemeFactory {
      public institution_getallproduct_resultStandardScheme getScheme() {
        return new institution_getallproduct_resultStandardScheme();
      }
    }

    private static class institution_getallproduct_resultStandardScheme extends StandardScheme<institution_getallproduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, institution_getallproduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProductListReultStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, institution_getallproduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class institution_getallproduct_resultTupleSchemeFactory implements SchemeFactory {
      public institution_getallproduct_resultTupleScheme getScheme() {
        return new institution_getallproduct_resultTupleScheme();
      }
    }

    private static class institution_getallproduct_resultTupleScheme extends TupleScheme<institution_getallproduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, institution_getallproduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, institution_getallproduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ProductListReultStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class institution_getproduct_args implements org.apache.thrift.TBase<institution_getproduct_args, institution_getproduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<institution_getproduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("institution_getproduct_args");

    private static final org.apache.thrift.protocol.TField PRODUCTID_FIELD_DESC = new org.apache.thrift.protocol.TField("productid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new institution_getproduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new institution_getproduct_argsTupleSchemeFactory());
    }

    public String productid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCTID((short)1, "productid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCTID
            return PRODUCTID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCTID, new org.apache.thrift.meta_data.FieldMetaData("productid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(institution_getproduct_args.class, metaDataMap);
    }

    public institution_getproduct_args() {
    }

    public institution_getproduct_args(
      String productid)
    {
      this();
      this.productid = productid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public institution_getproduct_args(institution_getproduct_args other) {
      if (other.isSetProductid()) {
        this.productid = other.productid;
      }
    }

    public institution_getproduct_args deepCopy() {
      return new institution_getproduct_args(this);
    }

    @Override
    public void clear() {
      this.productid = null;
    }

    public String getProductid() {
      return this.productid;
    }

    public institution_getproduct_args setProductid(String productid) {
      this.productid = productid;
      return this;
    }

    public void unsetProductid() {
      this.productid = null;
    }

    /** Returns true if field productid is set (has been assigned a value) and false otherwise */
    public boolean isSetProductid() {
      return this.productid != null;
    }

    public void setProductidIsSet(boolean value) {
      if (!value) {
        this.productid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCTID:
        if (value == null) {
          unsetProductid();
        } else {
          setProductid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCTID:
        return getProductid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCTID:
        return isSetProductid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof institution_getproduct_args)
        return this.equals((institution_getproduct_args)that);
      return false;
    }

    public boolean equals(institution_getproduct_args that) {
      if (that == null)
        return false;

      boolean this_present_productid = true && this.isSetProductid();
      boolean that_present_productid = true && that.isSetProductid();
      if (this_present_productid || that_present_productid) {
        if (!(this_present_productid && that_present_productid))
          return false;
        if (!this.productid.equals(that.productid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(institution_getproduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductid()).compareTo(other.isSetProductid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productid, other.productid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("institution_getproduct_args(");
      boolean first = true;

      sb.append("productid:");
      if (this.productid == null) {
        sb.append("null");
      } else {
        sb.append(this.productid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class institution_getproduct_argsStandardSchemeFactory implements SchemeFactory {
      public institution_getproduct_argsStandardScheme getScheme() {
        return new institution_getproduct_argsStandardScheme();
      }
    }

    private static class institution_getproduct_argsStandardScheme extends StandardScheme<institution_getproduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, institution_getproduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCTID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productid = iprot.readString();
                struct.setProductidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, institution_getproduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productid != null) {
          oprot.writeFieldBegin(PRODUCTID_FIELD_DESC);
          oprot.writeString(struct.productid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class institution_getproduct_argsTupleSchemeFactory implements SchemeFactory {
      public institution_getproduct_argsTupleScheme getScheme() {
        return new institution_getproduct_argsTupleScheme();
      }
    }

    private static class institution_getproduct_argsTupleScheme extends TupleScheme<institution_getproduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, institution_getproduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductid()) {
          oprot.writeString(struct.productid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, institution_getproduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productid = iprot.readString();
          struct.setProductidIsSet(true);
        }
      }
    }

  }

  public static class institution_getproduct_result implements org.apache.thrift.TBase<institution_getproduct_result, institution_getproduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<institution_getproduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("institution_getproduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new institution_getproduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new institution_getproduct_resultTupleSchemeFactory());
    }

    public ProductInfoStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductInfoStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(institution_getproduct_result.class, metaDataMap);
    }

    public institution_getproduct_result() {
    }

    public institution_getproduct_result(
      ProductInfoStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public institution_getproduct_result(institution_getproduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductInfoStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public institution_getproduct_result deepCopy() {
      return new institution_getproduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public ProductInfoStruct getSuccess() {
      return this.success;
    }

    public institution_getproduct_result setSuccess(ProductInfoStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public institution_getproduct_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProductInfoStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof institution_getproduct_result)
        return this.equals((institution_getproduct_result)that);
      return false;
    }

    public boolean equals(institution_getproduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(institution_getproduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("institution_getproduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class institution_getproduct_resultStandardSchemeFactory implements SchemeFactory {
      public institution_getproduct_resultStandardScheme getScheme() {
        return new institution_getproduct_resultStandardScheme();
      }
    }

    private static class institution_getproduct_resultStandardScheme extends StandardScheme<institution_getproduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, institution_getproduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProductInfoStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, institution_getproduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class institution_getproduct_resultTupleSchemeFactory implements SchemeFactory {
      public institution_getproduct_resultTupleScheme getScheme() {
        return new institution_getproduct_resultTupleScheme();
      }
    }

    private static class institution_getproduct_resultTupleScheme extends TupleScheme<institution_getproduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, institution_getproduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, institution_getproduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ProductInfoStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class institution_getauditproduct_args implements org.apache.thrift.TBase<institution_getauditproduct_args, institution_getauditproduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<institution_getauditproduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("institution_getauditproduct_args");

    private static final org.apache.thrift.protocol.TField INSTITUTIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("institutionid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new institution_getauditproduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new institution_getauditproduct_argsTupleSchemeFactory());
    }

    public String institutionid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTITUTIONID((short)1, "institutionid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTITUTIONID
            return INSTITUTIONID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTITUTIONID, new org.apache.thrift.meta_data.FieldMetaData("institutionid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(institution_getauditproduct_args.class, metaDataMap);
    }

    public institution_getauditproduct_args() {
    }

    public institution_getauditproduct_args(
      String institutionid)
    {
      this();
      this.institutionid = institutionid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public institution_getauditproduct_args(institution_getauditproduct_args other) {
      if (other.isSetInstitutionid()) {
        this.institutionid = other.institutionid;
      }
    }

    public institution_getauditproduct_args deepCopy() {
      return new institution_getauditproduct_args(this);
    }

    @Override
    public void clear() {
      this.institutionid = null;
    }

    public String getInstitutionid() {
      return this.institutionid;
    }

    public institution_getauditproduct_args setInstitutionid(String institutionid) {
      this.institutionid = institutionid;
      return this;
    }

    public void unsetInstitutionid() {
      this.institutionid = null;
    }

    /** Returns true if field institutionid is set (has been assigned a value) and false otherwise */
    public boolean isSetInstitutionid() {
      return this.institutionid != null;
    }

    public void setInstitutionidIsSet(boolean value) {
      if (!value) {
        this.institutionid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INSTITUTIONID:
        if (value == null) {
          unsetInstitutionid();
        } else {
          setInstitutionid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTITUTIONID:
        return getInstitutionid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INSTITUTIONID:
        return isSetInstitutionid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof institution_getauditproduct_args)
        return this.equals((institution_getauditproduct_args)that);
      return false;
    }

    public boolean equals(institution_getauditproduct_args that) {
      if (that == null)
        return false;

      boolean this_present_institutionid = true && this.isSetInstitutionid();
      boolean that_present_institutionid = true && that.isSetInstitutionid();
      if (this_present_institutionid || that_present_institutionid) {
        if (!(this_present_institutionid && that_present_institutionid))
          return false;
        if (!this.institutionid.equals(that.institutionid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(institution_getauditproduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInstitutionid()).compareTo(other.isSetInstitutionid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstitutionid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.institutionid, other.institutionid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("institution_getauditproduct_args(");
      boolean first = true;

      sb.append("institutionid:");
      if (this.institutionid == null) {
        sb.append("null");
      } else {
        sb.append(this.institutionid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class institution_getauditproduct_argsStandardSchemeFactory implements SchemeFactory {
      public institution_getauditproduct_argsStandardScheme getScheme() {
        return new institution_getauditproduct_argsStandardScheme();
      }
    }

    private static class institution_getauditproduct_argsStandardScheme extends StandardScheme<institution_getauditproduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, institution_getauditproduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTITUTIONID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.institutionid = iprot.readString();
                struct.setInstitutionidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, institution_getauditproduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.institutionid != null) {
          oprot.writeFieldBegin(INSTITUTIONID_FIELD_DESC);
          oprot.writeString(struct.institutionid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class institution_getauditproduct_argsTupleSchemeFactory implements SchemeFactory {
      public institution_getauditproduct_argsTupleScheme getScheme() {
        return new institution_getauditproduct_argsTupleScheme();
      }
    }

    private static class institution_getauditproduct_argsTupleScheme extends TupleScheme<institution_getauditproduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, institution_getauditproduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInstitutionid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstitutionid()) {
          oprot.writeString(struct.institutionid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, institution_getauditproduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.institutionid = iprot.readString();
          struct.setInstitutionidIsSet(true);
        }
      }
    }

  }

  public static class institution_getauditproduct_result implements org.apache.thrift.TBase<institution_getauditproduct_result, institution_getauditproduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<institution_getauditproduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("institution_getauditproduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new institution_getauditproduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new institution_getauditproduct_resultTupleSchemeFactory());
    }

    public ProductListReultStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductListReultStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(institution_getauditproduct_result.class, metaDataMap);
    }

    public institution_getauditproduct_result() {
    }

    public institution_getauditproduct_result(
      ProductListReultStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public institution_getauditproduct_result(institution_getauditproduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductListReultStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public institution_getauditproduct_result deepCopy() {
      return new institution_getauditproduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public ProductListReultStruct getSuccess() {
      return this.success;
    }

    public institution_getauditproduct_result setSuccess(ProductListReultStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public institution_getauditproduct_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProductListReultStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof institution_getauditproduct_result)
        return this.equals((institution_getauditproduct_result)that);
      return false;
    }

    public boolean equals(institution_getauditproduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(institution_getauditproduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("institution_getauditproduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class institution_getauditproduct_resultStandardSchemeFactory implements SchemeFactory {
      public institution_getauditproduct_resultStandardScheme getScheme() {
        return new institution_getauditproduct_resultStandardScheme();
      }
    }

    private static class institution_getauditproduct_resultStandardScheme extends StandardScheme<institution_getauditproduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, institution_getauditproduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProductListReultStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, institution_getauditproduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class institution_getauditproduct_resultTupleSchemeFactory implements SchemeFactory {
      public institution_getauditproduct_resultTupleScheme getScheme() {
        return new institution_getauditproduct_resultTupleScheme();
      }
    }

    private static class institution_getauditproduct_resultTupleScheme extends TupleScheme<institution_getauditproduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, institution_getauditproduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, institution_getauditproduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ProductListReultStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class institution_getissuproduct_args implements org.apache.thrift.TBase<institution_getissuproduct_args, institution_getissuproduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<institution_getissuproduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("institution_getissuproduct_args");

    private static final org.apache.thrift.protocol.TField INSTITUTIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("institutionid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new institution_getissuproduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new institution_getissuproduct_argsTupleSchemeFactory());
    }

    public String institutionid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTITUTIONID((short)1, "institutionid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTITUTIONID
            return INSTITUTIONID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTITUTIONID, new org.apache.thrift.meta_data.FieldMetaData("institutionid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(institution_getissuproduct_args.class, metaDataMap);
    }

    public institution_getissuproduct_args() {
    }

    public institution_getissuproduct_args(
      String institutionid)
    {
      this();
      this.institutionid = institutionid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public institution_getissuproduct_args(institution_getissuproduct_args other) {
      if (other.isSetInstitutionid()) {
        this.institutionid = other.institutionid;
      }
    }

    public institution_getissuproduct_args deepCopy() {
      return new institution_getissuproduct_args(this);
    }

    @Override
    public void clear() {
      this.institutionid = null;
    }

    public String getInstitutionid() {
      return this.institutionid;
    }

    public institution_getissuproduct_args setInstitutionid(String institutionid) {
      this.institutionid = institutionid;
      return this;
    }

    public void unsetInstitutionid() {
      this.institutionid = null;
    }

    /** Returns true if field institutionid is set (has been assigned a value) and false otherwise */
    public boolean isSetInstitutionid() {
      return this.institutionid != null;
    }

    public void setInstitutionidIsSet(boolean value) {
      if (!value) {
        this.institutionid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INSTITUTIONID:
        if (value == null) {
          unsetInstitutionid();
        } else {
          setInstitutionid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTITUTIONID:
        return getInstitutionid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INSTITUTIONID:
        return isSetInstitutionid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof institution_getissuproduct_args)
        return this.equals((institution_getissuproduct_args)that);
      return false;
    }

    public boolean equals(institution_getissuproduct_args that) {
      if (that == null)
        return false;

      boolean this_present_institutionid = true && this.isSetInstitutionid();
      boolean that_present_institutionid = true && that.isSetInstitutionid();
      if (this_present_institutionid || that_present_institutionid) {
        if (!(this_present_institutionid && that_present_institutionid))
          return false;
        if (!this.institutionid.equals(that.institutionid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(institution_getissuproduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInstitutionid()).compareTo(other.isSetInstitutionid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstitutionid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.institutionid, other.institutionid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("institution_getissuproduct_args(");
      boolean first = true;

      sb.append("institutionid:");
      if (this.institutionid == null) {
        sb.append("null");
      } else {
        sb.append(this.institutionid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class institution_getissuproduct_argsStandardSchemeFactory implements SchemeFactory {
      public institution_getissuproduct_argsStandardScheme getScheme() {
        return new institution_getissuproduct_argsStandardScheme();
      }
    }

    private static class institution_getissuproduct_argsStandardScheme extends StandardScheme<institution_getissuproduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, institution_getissuproduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTITUTIONID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.institutionid = iprot.readString();
                struct.setInstitutionidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, institution_getissuproduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.institutionid != null) {
          oprot.writeFieldBegin(INSTITUTIONID_FIELD_DESC);
          oprot.writeString(struct.institutionid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class institution_getissuproduct_argsTupleSchemeFactory implements SchemeFactory {
      public institution_getissuproduct_argsTupleScheme getScheme() {
        return new institution_getissuproduct_argsTupleScheme();
      }
    }

    private static class institution_getissuproduct_argsTupleScheme extends TupleScheme<institution_getissuproduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, institution_getissuproduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInstitutionid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstitutionid()) {
          oprot.writeString(struct.institutionid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, institution_getissuproduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.institutionid = iprot.readString();
          struct.setInstitutionidIsSet(true);
        }
      }
    }

  }

  public static class institution_getissuproduct_result implements org.apache.thrift.TBase<institution_getissuproduct_result, institution_getissuproduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<institution_getissuproduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("institution_getissuproduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new institution_getissuproduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new institution_getissuproduct_resultTupleSchemeFactory());
    }

    public ProductListReultStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductListReultStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(institution_getissuproduct_result.class, metaDataMap);
    }

    public institution_getissuproduct_result() {
    }

    public institution_getissuproduct_result(
      ProductListReultStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public institution_getissuproduct_result(institution_getissuproduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductListReultStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public institution_getissuproduct_result deepCopy() {
      return new institution_getissuproduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public ProductListReultStruct getSuccess() {
      return this.success;
    }

    public institution_getissuproduct_result setSuccess(ProductListReultStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public institution_getissuproduct_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProductListReultStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof institution_getissuproduct_result)
        return this.equals((institution_getissuproduct_result)that);
      return false;
    }

    public boolean equals(institution_getissuproduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(institution_getissuproduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("institution_getissuproduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class institution_getissuproduct_resultStandardSchemeFactory implements SchemeFactory {
      public institution_getissuproduct_resultStandardScheme getScheme() {
        return new institution_getissuproduct_resultStandardScheme();
      }
    }

    private static class institution_getissuproduct_resultStandardScheme extends StandardScheme<institution_getissuproduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, institution_getissuproduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProductListReultStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, institution_getissuproduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class institution_getissuproduct_resultTupleSchemeFactory implements SchemeFactory {
      public institution_getissuproduct_resultTupleScheme getScheme() {
        return new institution_getissuproduct_resultTupleScheme();
      }
    }

    private static class institution_getissuproduct_resultTupleScheme extends TupleScheme<institution_getissuproduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, institution_getissuproduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, institution_getissuproduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ProductListReultStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class institution_productaudit_args implements org.apache.thrift.TBase<institution_productaudit_args, institution_productaudit_args._Fields>, java.io.Serializable, Cloneable, Comparable<institution_productaudit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("institution_productaudit_args");

    private static final org.apache.thrift.protocol.TField PRODUCTAUDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("productaudit", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new institution_productaudit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new institution_productaudit_argsTupleSchemeFactory());
    }

    public ProductAuditStruct productaudit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCTAUDIT((short)1, "productaudit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCTAUDIT
            return PRODUCTAUDIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCTAUDIT, new org.apache.thrift.meta_data.FieldMetaData("productaudit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductAuditStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(institution_productaudit_args.class, metaDataMap);
    }

    public institution_productaudit_args() {
    }

    public institution_productaudit_args(
      ProductAuditStruct productaudit)
    {
      this();
      this.productaudit = productaudit;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public institution_productaudit_args(institution_productaudit_args other) {
      if (other.isSetProductaudit()) {
        this.productaudit = new ProductAuditStruct(other.productaudit);
      }
    }

    public institution_productaudit_args deepCopy() {
      return new institution_productaudit_args(this);
    }

    @Override
    public void clear() {
      this.productaudit = null;
    }

    public ProductAuditStruct getProductaudit() {
      return this.productaudit;
    }

    public institution_productaudit_args setProductaudit(ProductAuditStruct productaudit) {
      this.productaudit = productaudit;
      return this;
    }

    public void unsetProductaudit() {
      this.productaudit = null;
    }

    /** Returns true if field productaudit is set (has been assigned a value) and false otherwise */
    public boolean isSetProductaudit() {
      return this.productaudit != null;
    }

    public void setProductauditIsSet(boolean value) {
      if (!value) {
        this.productaudit = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCTAUDIT:
        if (value == null) {
          unsetProductaudit();
        } else {
          setProductaudit((ProductAuditStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCTAUDIT:
        return getProductaudit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCTAUDIT:
        return isSetProductaudit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof institution_productaudit_args)
        return this.equals((institution_productaudit_args)that);
      return false;
    }

    public boolean equals(institution_productaudit_args that) {
      if (that == null)
        return false;

      boolean this_present_productaudit = true && this.isSetProductaudit();
      boolean that_present_productaudit = true && that.isSetProductaudit();
      if (this_present_productaudit || that_present_productaudit) {
        if (!(this_present_productaudit && that_present_productaudit))
          return false;
        if (!this.productaudit.equals(that.productaudit))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(institution_productaudit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductaudit()).compareTo(other.isSetProductaudit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductaudit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productaudit, other.productaudit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("institution_productaudit_args(");
      boolean first = true;

      sb.append("productaudit:");
      if (this.productaudit == null) {
        sb.append("null");
      } else {
        sb.append(this.productaudit);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productaudit != null) {
        productaudit.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class institution_productaudit_argsStandardSchemeFactory implements SchemeFactory {
      public institution_productaudit_argsStandardScheme getScheme() {
        return new institution_productaudit_argsStandardScheme();
      }
    }

    private static class institution_productaudit_argsStandardScheme extends StandardScheme<institution_productaudit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, institution_productaudit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCTAUDIT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productaudit = new ProductAuditStruct();
                struct.productaudit.read(iprot);
                struct.setProductauditIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, institution_productaudit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productaudit != null) {
          oprot.writeFieldBegin(PRODUCTAUDIT_FIELD_DESC);
          struct.productaudit.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class institution_productaudit_argsTupleSchemeFactory implements SchemeFactory {
      public institution_productaudit_argsTupleScheme getScheme() {
        return new institution_productaudit_argsTupleScheme();
      }
    }

    private static class institution_productaudit_argsTupleScheme extends TupleScheme<institution_productaudit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, institution_productaudit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductaudit()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductaudit()) {
          struct.productaudit.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, institution_productaudit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productaudit = new ProductAuditStruct();
          struct.productaudit.read(iprot);
          struct.setProductauditIsSet(true);
        }
      }
    }

  }

  public static class institution_productaudit_result implements org.apache.thrift.TBase<institution_productaudit_result, institution_productaudit_result._Fields>, java.io.Serializable, Cloneable, Comparable<institution_productaudit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("institution_productaudit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new institution_productaudit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new institution_productaudit_resultTupleSchemeFactory());
    }

    public ProductAuditResultStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductAuditResultStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(institution_productaudit_result.class, metaDataMap);
    }

    public institution_productaudit_result() {
    }

    public institution_productaudit_result(
      ProductAuditResultStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public institution_productaudit_result(institution_productaudit_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductAuditResultStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public institution_productaudit_result deepCopy() {
      return new institution_productaudit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public ProductAuditResultStruct getSuccess() {
      return this.success;
    }

    public institution_productaudit_result setSuccess(ProductAuditResultStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public institution_productaudit_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProductAuditResultStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof institution_productaudit_result)
        return this.equals((institution_productaudit_result)that);
      return false;
    }

    public boolean equals(institution_productaudit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(institution_productaudit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("institution_productaudit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class institution_productaudit_resultStandardSchemeFactory implements SchemeFactory {
      public institution_productaudit_resultStandardScheme getScheme() {
        return new institution_productaudit_resultStandardScheme();
      }
    }

    private static class institution_productaudit_resultStandardScheme extends StandardScheme<institution_productaudit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, institution_productaudit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProductAuditResultStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, institution_productaudit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class institution_productaudit_resultTupleSchemeFactory implements SchemeFactory {
      public institution_productaudit_resultTupleScheme getScheme() {
        return new institution_productaudit_resultTupleScheme();
      }
    }

    private static class institution_productaudit_resultTupleScheme extends TupleScheme<institution_productaudit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, institution_productaudit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, institution_productaudit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ProductAuditResultStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class institution_getInfo_args implements org.apache.thrift.TBase<institution_getInfo_args, institution_getInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<institution_getInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("institution_getInfo_args");

    private static final org.apache.thrift.protocol.TField INSTITUTIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("institutionid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new institution_getInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new institution_getInfo_argsTupleSchemeFactory());
    }

    public String institutionid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTITUTIONID((short)1, "institutionid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTITUTIONID
            return INSTITUTIONID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTITUTIONID, new org.apache.thrift.meta_data.FieldMetaData("institutionid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(institution_getInfo_args.class, metaDataMap);
    }

    public institution_getInfo_args() {
    }

    public institution_getInfo_args(
      String institutionid)
    {
      this();
      this.institutionid = institutionid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public institution_getInfo_args(institution_getInfo_args other) {
      if (other.isSetInstitutionid()) {
        this.institutionid = other.institutionid;
      }
    }

    public institution_getInfo_args deepCopy() {
      return new institution_getInfo_args(this);
    }

    @Override
    public void clear() {
      this.institutionid = null;
    }

    public String getInstitutionid() {
      return this.institutionid;
    }

    public institution_getInfo_args setInstitutionid(String institutionid) {
      this.institutionid = institutionid;
      return this;
    }

    public void unsetInstitutionid() {
      this.institutionid = null;
    }

    /** Returns true if field institutionid is set (has been assigned a value) and false otherwise */
    public boolean isSetInstitutionid() {
      return this.institutionid != null;
    }

    public void setInstitutionidIsSet(boolean value) {
      if (!value) {
        this.institutionid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INSTITUTIONID:
        if (value == null) {
          unsetInstitutionid();
        } else {
          setInstitutionid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTITUTIONID:
        return getInstitutionid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INSTITUTIONID:
        return isSetInstitutionid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof institution_getInfo_args)
        return this.equals((institution_getInfo_args)that);
      return false;
    }

    public boolean equals(institution_getInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_institutionid = true && this.isSetInstitutionid();
      boolean that_present_institutionid = true && that.isSetInstitutionid();
      if (this_present_institutionid || that_present_institutionid) {
        if (!(this_present_institutionid && that_present_institutionid))
          return false;
        if (!this.institutionid.equals(that.institutionid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(institution_getInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInstitutionid()).compareTo(other.isSetInstitutionid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstitutionid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.institutionid, other.institutionid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("institution_getInfo_args(");
      boolean first = true;

      sb.append("institutionid:");
      if (this.institutionid == null) {
        sb.append("null");
      } else {
        sb.append(this.institutionid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class institution_getInfo_argsStandardSchemeFactory implements SchemeFactory {
      public institution_getInfo_argsStandardScheme getScheme() {
        return new institution_getInfo_argsStandardScheme();
      }
    }

    private static class institution_getInfo_argsStandardScheme extends StandardScheme<institution_getInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, institution_getInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTITUTIONID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.institutionid = iprot.readString();
                struct.setInstitutionidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, institution_getInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.institutionid != null) {
          oprot.writeFieldBegin(INSTITUTIONID_FIELD_DESC);
          oprot.writeString(struct.institutionid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class institution_getInfo_argsTupleSchemeFactory implements SchemeFactory {
      public institution_getInfo_argsTupleScheme getScheme() {
        return new institution_getInfo_argsTupleScheme();
      }
    }

    private static class institution_getInfo_argsTupleScheme extends TupleScheme<institution_getInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, institution_getInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInstitutionid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstitutionid()) {
          oprot.writeString(struct.institutionid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, institution_getInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.institutionid = iprot.readString();
          struct.setInstitutionidIsSet(true);
        }
      }
    }

  }

  public static class institution_getInfo_result implements org.apache.thrift.TBase<institution_getInfo_result, institution_getInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<institution_getInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("institution_getInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new institution_getInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new institution_getInfo_resultTupleSchemeFactory());
    }

    public InstitutionInfoStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InstitutionInfoStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(institution_getInfo_result.class, metaDataMap);
    }

    public institution_getInfo_result() {
    }

    public institution_getInfo_result(
      InstitutionInfoStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public institution_getInfo_result(institution_getInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new InstitutionInfoStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public institution_getInfo_result deepCopy() {
      return new institution_getInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public InstitutionInfoStruct getSuccess() {
      return this.success;
    }

    public institution_getInfo_result setSuccess(InstitutionInfoStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public institution_getInfo_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((InstitutionInfoStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof institution_getInfo_result)
        return this.equals((institution_getInfo_result)that);
      return false;
    }

    public boolean equals(institution_getInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(institution_getInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("institution_getInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class institution_getInfo_resultStandardSchemeFactory implements SchemeFactory {
      public institution_getInfo_resultStandardScheme getScheme() {
        return new institution_getInfo_resultStandardScheme();
      }
    }

    private static class institution_getInfo_resultStandardScheme extends StandardScheme<institution_getInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, institution_getInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new InstitutionInfoStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, institution_getInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class institution_getInfo_resultTupleSchemeFactory implements SchemeFactory {
      public institution_getInfo_resultTupleScheme getScheme() {
        return new institution_getInfo_resultTupleScheme();
      }
    }

    private static class institution_getInfo_resultTupleScheme extends TupleScheme<institution_getInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, institution_getInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, institution_getInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new InstitutionInfoStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class investor_getInfo_args implements org.apache.thrift.TBase<investor_getInfo_args, investor_getInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<investor_getInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_getInfo_args");

    private static final org.apache.thrift.protocol.TField INVESTORID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_getInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_getInfo_argsTupleSchemeFactory());
    }

    public String investorid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVESTORID((short)1, "investorid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVESTORID
            return INVESTORID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVESTORID, new org.apache.thrift.meta_data.FieldMetaData("investorid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_getInfo_args.class, metaDataMap);
    }

    public investor_getInfo_args() {
    }

    public investor_getInfo_args(
      String investorid)
    {
      this();
      this.investorid = investorid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_getInfo_args(investor_getInfo_args other) {
      if (other.isSetInvestorid()) {
        this.investorid = other.investorid;
      }
    }

    public investor_getInfo_args deepCopy() {
      return new investor_getInfo_args(this);
    }

    @Override
    public void clear() {
      this.investorid = null;
    }

    public String getInvestorid() {
      return this.investorid;
    }

    public investor_getInfo_args setInvestorid(String investorid) {
      this.investorid = investorid;
      return this;
    }

    public void unsetInvestorid() {
      this.investorid = null;
    }

    /** Returns true if field investorid is set (has been assigned a value) and false otherwise */
    public boolean isSetInvestorid() {
      return this.investorid != null;
    }

    public void setInvestoridIsSet(boolean value) {
      if (!value) {
        this.investorid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INVESTORID:
        if (value == null) {
          unsetInvestorid();
        } else {
          setInvestorid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INVESTORID:
        return getInvestorid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INVESTORID:
        return isSetInvestorid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_getInfo_args)
        return this.equals((investor_getInfo_args)that);
      return false;
    }

    public boolean equals(investor_getInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_investorid = true && this.isSetInvestorid();
      boolean that_present_investorid = true && that.isSetInvestorid();
      if (this_present_investorid || that_present_investorid) {
        if (!(this_present_investorid && that_present_investorid))
          return false;
        if (!this.investorid.equals(that.investorid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_getInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInvestorid()).compareTo(other.isSetInvestorid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvestorid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorid, other.investorid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_getInfo_args(");
      boolean first = true;

      sb.append("investorid:");
      if (this.investorid == null) {
        sb.append("null");
      } else {
        sb.append(this.investorid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_getInfo_argsStandardSchemeFactory implements SchemeFactory {
      public investor_getInfo_argsStandardScheme getScheme() {
        return new investor_getInfo_argsStandardScheme();
      }
    }

    private static class investor_getInfo_argsStandardScheme extends StandardScheme<investor_getInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_getInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVESTORID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.investorid = iprot.readString();
                struct.setInvestoridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_getInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.investorid != null) {
          oprot.writeFieldBegin(INVESTORID_FIELD_DESC);
          oprot.writeString(struct.investorid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_getInfo_argsTupleSchemeFactory implements SchemeFactory {
      public investor_getInfo_argsTupleScheme getScheme() {
        return new investor_getInfo_argsTupleScheme();
      }
    }

    private static class investor_getInfo_argsTupleScheme extends TupleScheme<investor_getInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_getInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInvestorid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInvestorid()) {
          oprot.writeString(struct.investorid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_getInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.investorid = iprot.readString();
          struct.setInvestoridIsSet(true);
        }
      }
    }

  }

  public static class investor_getInfo_result implements org.apache.thrift.TBase<investor_getInfo_result, investor_getInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<investor_getInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("investor_getInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new investor_getInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new investor_getInfo_resultTupleSchemeFactory());
    }

    public InvestorInfoStruct success; // required
    public FitsException fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvestorInfoStruct.class)));
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(investor_getInfo_result.class, metaDataMap);
    }

    public investor_getInfo_result() {
    }

    public investor_getInfo_result(
      InvestorInfoStruct success,
      FitsException fe)
    {
      this();
      this.success = success;
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public investor_getInfo_result(investor_getInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new InvestorInfoStruct(other.success);
      }
      if (other.isSetFe()) {
        this.fe = new FitsException(other.fe);
      }
    }

    public investor_getInfo_result deepCopy() {
      return new investor_getInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fe = null;
    }

    public InvestorInfoStruct getSuccess() {
      return this.success;
    }

    public investor_getInfo_result setSuccess(InvestorInfoStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FitsException getFe() {
      return this.fe;
    }

    public investor_getInfo_result setFe(FitsException fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((InvestorInfoStruct)value);
        }
        break;

      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof investor_getInfo_result)
        return this.equals((investor_getInfo_result)that);
      return false;
    }

    public boolean equals(investor_getInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(investor_getInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("investor_getInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class investor_getInfo_resultStandardSchemeFactory implements SchemeFactory {
      public investor_getInfo_resultStandardScheme getScheme() {
        return new investor_getInfo_resultStandardScheme();
      }
    }

    private static class investor_getInfo_resultStandardScheme extends StandardScheme<investor_getInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, investor_getInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new InvestorInfoStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitsException();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, investor_getInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class investor_getInfo_resultTupleSchemeFactory implements SchemeFactory {
      public investor_getInfo_resultTupleScheme getScheme() {
        return new investor_getInfo_resultTupleScheme();
      }
    }

    private static class investor_getInfo_resultTupleScheme extends TupleScheme<investor_getInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, investor_getInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, investor_getInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new InvestorInfoStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fe = new FitsException();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

}
