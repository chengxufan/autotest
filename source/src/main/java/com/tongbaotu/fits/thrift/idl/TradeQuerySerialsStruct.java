/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tongbaotu.fits.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TradeQuerySerialsStruct implements org.apache.thrift.TBase<TradeQuerySerialsStruct, TradeQuerySerialsStruct._Fields>, java.io.Serializable, Cloneable, Comparable<TradeQuerySerialsStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TradeQuerySerialsStruct");

  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVEST_SPECIAL_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("invest_special_account", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SERIALNOS_FIELD_DESC = new org.apache.thrift.protocol.TField("serialnos", org.apache.thrift.protocol.TType.SET, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TradeQuerySerialsStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TradeQuerySerialsStructTupleSchemeFactory());
  }

  public String investorID; // required
  public String invest_special_account; // required
  public Set<String> serialnos; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INVESTOR_ID((short)1, "investorID"),
    INVEST_SPECIAL_ACCOUNT((short)2, "invest_special_account"),
    SERIALNOS((short)3, "serialnos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INVESTOR_ID
          return INVESTOR_ID;
        case 2: // INVEST_SPECIAL_ACCOUNT
          return INVEST_SPECIAL_ACCOUNT;
        case 3: // SERIALNOS
          return SERIALNOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVEST_SPECIAL_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("invest_special_account", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERIALNOS, new org.apache.thrift.meta_data.FieldMetaData("serialnos", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TradeQuerySerialsStruct.class, metaDataMap);
  }

  public TradeQuerySerialsStruct() {
  }

  public TradeQuerySerialsStruct(
    String investorID,
    String invest_special_account,
    Set<String> serialnos)
  {
    this();
    this.investorID = investorID;
    this.invest_special_account = invest_special_account;
    this.serialnos = serialnos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TradeQuerySerialsStruct(TradeQuerySerialsStruct other) {
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    if (other.isSetInvest_special_account()) {
      this.invest_special_account = other.invest_special_account;
    }
    if (other.isSetSerialnos()) {
      Set<String> __this__serialnos = new HashSet<String>(other.serialnos);
      this.serialnos = __this__serialnos;
    }
  }

  public TradeQuerySerialsStruct deepCopy() {
    return new TradeQuerySerialsStruct(this);
  }

  @Override
  public void clear() {
    this.investorID = null;
    this.invest_special_account = null;
    this.serialnos = null;
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public TradeQuerySerialsStruct setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public String getInvest_special_account() {
    return this.invest_special_account;
  }

  public TradeQuerySerialsStruct setInvest_special_account(String invest_special_account) {
    this.invest_special_account = invest_special_account;
    return this;
  }

  public void unsetInvest_special_account() {
    this.invest_special_account = null;
  }

  /** Returns true if field invest_special_account is set (has been assigned a value) and false otherwise */
  public boolean isSetInvest_special_account() {
    return this.invest_special_account != null;
  }

  public void setInvest_special_accountIsSet(boolean value) {
    if (!value) {
      this.invest_special_account = null;
    }
  }

  public int getSerialnosSize() {
    return (this.serialnos == null) ? 0 : this.serialnos.size();
  }

  public java.util.Iterator<String> getSerialnosIterator() {
    return (this.serialnos == null) ? null : this.serialnos.iterator();
  }

  public void addToSerialnos(String elem) {
    if (this.serialnos == null) {
      this.serialnos = new HashSet<String>();
    }
    this.serialnos.add(elem);
  }

  public Set<String> getSerialnos() {
    return this.serialnos;
  }

  public TradeQuerySerialsStruct setSerialnos(Set<String> serialnos) {
    this.serialnos = serialnos;
    return this;
  }

  public void unsetSerialnos() {
    this.serialnos = null;
  }

  /** Returns true if field serialnos is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialnos() {
    return this.serialnos != null;
  }

  public void setSerialnosIsSet(boolean value) {
    if (!value) {
      this.serialnos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case INVEST_SPECIAL_ACCOUNT:
      if (value == null) {
        unsetInvest_special_account();
      } else {
        setInvest_special_account((String)value);
      }
      break;

    case SERIALNOS:
      if (value == null) {
        unsetSerialnos();
      } else {
        setSerialnos((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INVESTOR_ID:
      return getInvestorID();

    case INVEST_SPECIAL_ACCOUNT:
      return getInvest_special_account();

    case SERIALNOS:
      return getSerialnos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INVESTOR_ID:
      return isSetInvestorID();
    case INVEST_SPECIAL_ACCOUNT:
      return isSetInvest_special_account();
    case SERIALNOS:
      return isSetSerialnos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TradeQuerySerialsStruct)
      return this.equals((TradeQuerySerialsStruct)that);
    return false;
  }

  public boolean equals(TradeQuerySerialsStruct that) {
    if (that == null)
      return false;

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_invest_special_account = true && this.isSetInvest_special_account();
    boolean that_present_invest_special_account = true && that.isSetInvest_special_account();
    if (this_present_invest_special_account || that_present_invest_special_account) {
      if (!(this_present_invest_special_account && that_present_invest_special_account))
        return false;
      if (!this.invest_special_account.equals(that.invest_special_account))
        return false;
    }

    boolean this_present_serialnos = true && this.isSetSerialnos();
    boolean that_present_serialnos = true && that.isSetSerialnos();
    if (this_present_serialnos || that_present_serialnos) {
      if (!(this_present_serialnos && that_present_serialnos))
        return false;
      if (!this.serialnos.equals(that.serialnos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TradeQuerySerialsStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvest_special_account()).compareTo(other.isSetInvest_special_account());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvest_special_account()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invest_special_account, other.invest_special_account);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialnos()).compareTo(other.isSetSerialnos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialnos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialnos, other.serialnos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TradeQuerySerialsStruct(");
    boolean first = true;

    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invest_special_account:");
    if (this.invest_special_account == null) {
      sb.append("null");
    } else {
      sb.append(this.invest_special_account);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serialnos:");
    if (this.serialnos == null) {
      sb.append("null");
    } else {
      sb.append(this.serialnos);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (investorID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'investorID' was not present! Struct: " + toString());
    }
    if (invest_special_account == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'invest_special_account' was not present! Struct: " + toString());
    }
    if (serialnos == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serialnos' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TradeQuerySerialsStructStandardSchemeFactory implements SchemeFactory {
    public TradeQuerySerialsStructStandardScheme getScheme() {
      return new TradeQuerySerialsStructStandardScheme();
    }
  }

  private static class TradeQuerySerialsStructStandardScheme extends StandardScheme<TradeQuerySerialsStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TradeQuerySerialsStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVEST_SPECIAL_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.invest_special_account = iprot.readString();
              struct.setInvest_special_accountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERIALNOS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set48 = iprot.readSetBegin();
                struct.serialnos = new HashSet<String>(2*_set48.size);
                for (int _i49 = 0; _i49 < _set48.size; ++_i49)
                {
                  String _elem50;
                  _elem50 = iprot.readString();
                  struct.serialnos.add(_elem50);
                }
                iprot.readSetEnd();
              }
              struct.setSerialnosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TradeQuerySerialsStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      if (struct.invest_special_account != null) {
        oprot.writeFieldBegin(INVEST_SPECIAL_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.invest_special_account);
        oprot.writeFieldEnd();
      }
      if (struct.serialnos != null) {
        oprot.writeFieldBegin(SERIALNOS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.serialnos.size()));
          for (String _iter51 : struct.serialnos)
          {
            oprot.writeString(_iter51);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TradeQuerySerialsStructTupleSchemeFactory implements SchemeFactory {
    public TradeQuerySerialsStructTupleScheme getScheme() {
      return new TradeQuerySerialsStructTupleScheme();
    }
  }

  private static class TradeQuerySerialsStructTupleScheme extends TupleScheme<TradeQuerySerialsStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TradeQuerySerialsStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.investorID);
      oprot.writeString(struct.invest_special_account);
      {
        oprot.writeI32(struct.serialnos.size());
        for (String _iter52 : struct.serialnos)
        {
          oprot.writeString(_iter52);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TradeQuerySerialsStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.investorID = iprot.readString();
      struct.setInvestorIDIsSet(true);
      struct.invest_special_account = iprot.readString();
      struct.setInvest_special_accountIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set53 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.serialnos = new HashSet<String>(2*_set53.size);
        for (int _i54 = 0; _i54 < _set53.size; ++_i54)
        {
          String _elem55;
          _elem55 = iprot.readString();
          struct.serialnos.add(_elem55);
        }
      }
      struct.setSerialnosIsSet(true);
    }
  }

}

