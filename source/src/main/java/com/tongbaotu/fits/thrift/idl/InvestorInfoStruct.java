/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tongbaotu.fits.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class InvestorInfoStruct implements org.apache.thrift.TBase<InvestorInfoStruct, InvestorInfoStruct._Fields>, java.io.Serializable, Cloneable, Comparable<InvestorInfoStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InvestorInfoStruct");

  private static final org.apache.thrift.protocol.TField INVESTORID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MOBILE_PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("mobilePhoneNumber", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RISK_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("riskLevel", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField BANKSIGNINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("banksigninfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ACCOUNTFUNDINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("accountfundinfo", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField PRODUCTPOSITIONINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("productpositioninfo", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InvestorInfoStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InvestorInfoStructTupleSchemeFactory());
  }

  public String investorid; // required
  public String mobilePhoneNumber; // required
  public int riskLevel; // required
  public BankSignInfoStruct banksigninfo; // required
  public List<AccountFundInfoStruct> accountfundinfo; // required
  public List<AccountProductInfoStruct> productpositioninfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INVESTORID((short)1, "investorid"),
    MOBILE_PHONE_NUMBER((short)2, "mobilePhoneNumber"),
    RISK_LEVEL((short)3, "riskLevel"),
    BANKSIGNINFO((short)4, "banksigninfo"),
    ACCOUNTFUNDINFO((short)5, "accountfundinfo"),
    PRODUCTPOSITIONINFO((short)6, "productpositioninfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INVESTORID
          return INVESTORID;
        case 2: // MOBILE_PHONE_NUMBER
          return MOBILE_PHONE_NUMBER;
        case 3: // RISK_LEVEL
          return RISK_LEVEL;
        case 4: // BANKSIGNINFO
          return BANKSIGNINFO;
        case 5: // ACCOUNTFUNDINFO
          return ACCOUNTFUNDINFO;
        case 6: // PRODUCTPOSITIONINFO
          return PRODUCTPOSITIONINFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RISKLEVEL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INVESTORID, new org.apache.thrift.meta_data.FieldMetaData("investorid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE_PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("mobilePhoneNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RISK_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("riskLevel", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BANKSIGNINFO, new org.apache.thrift.meta_data.FieldMetaData("banksigninfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BankSignInfoStruct.class)));
    tmpMap.put(_Fields.ACCOUNTFUNDINFO, new org.apache.thrift.meta_data.FieldMetaData("accountfundinfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccountFundInfoStruct.class))));
    tmpMap.put(_Fields.PRODUCTPOSITIONINFO, new org.apache.thrift.meta_data.FieldMetaData("productpositioninfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccountProductInfoStruct.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InvestorInfoStruct.class, metaDataMap);
  }

  public InvestorInfoStruct() {
  }

  public InvestorInfoStruct(
    String investorid,
    String mobilePhoneNumber,
    int riskLevel,
    BankSignInfoStruct banksigninfo,
    List<AccountFundInfoStruct> accountfundinfo,
    List<AccountProductInfoStruct> productpositioninfo)
  {
    this();
    this.investorid = investorid;
    this.mobilePhoneNumber = mobilePhoneNumber;
    this.riskLevel = riskLevel;
    setRiskLevelIsSet(true);
    this.banksigninfo = banksigninfo;
    this.accountfundinfo = accountfundinfo;
    this.productpositioninfo = productpositioninfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InvestorInfoStruct(InvestorInfoStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInvestorid()) {
      this.investorid = other.investorid;
    }
    if (other.isSetMobilePhoneNumber()) {
      this.mobilePhoneNumber = other.mobilePhoneNumber;
    }
    this.riskLevel = other.riskLevel;
    if (other.isSetBanksigninfo()) {
      this.banksigninfo = new BankSignInfoStruct(other.banksigninfo);
    }
    if (other.isSetAccountfundinfo()) {
      List<AccountFundInfoStruct> __this__accountfundinfo = new ArrayList<AccountFundInfoStruct>(other.accountfundinfo.size());
      for (AccountFundInfoStruct other_element : other.accountfundinfo) {
        __this__accountfundinfo.add(new AccountFundInfoStruct(other_element));
      }
      this.accountfundinfo = __this__accountfundinfo;
    }
    if (other.isSetProductpositioninfo()) {
      List<AccountProductInfoStruct> __this__productpositioninfo = new ArrayList<AccountProductInfoStruct>(other.productpositioninfo.size());
      for (AccountProductInfoStruct other_element : other.productpositioninfo) {
        __this__productpositioninfo.add(new AccountProductInfoStruct(other_element));
      }
      this.productpositioninfo = __this__productpositioninfo;
    }
  }

  public InvestorInfoStruct deepCopy() {
    return new InvestorInfoStruct(this);
  }

  @Override
  public void clear() {
    this.investorid = null;
    this.mobilePhoneNumber = null;
    setRiskLevelIsSet(false);
    this.riskLevel = 0;
    this.banksigninfo = null;
    this.accountfundinfo = null;
    this.productpositioninfo = null;
  }

  public String getInvestorid() {
    return this.investorid;
  }

  public InvestorInfoStruct setInvestorid(String investorid) {
    this.investorid = investorid;
    return this;
  }

  public void unsetInvestorid() {
    this.investorid = null;
  }

  /** Returns true if field investorid is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorid() {
    return this.investorid != null;
  }

  public void setInvestoridIsSet(boolean value) {
    if (!value) {
      this.investorid = null;
    }
  }

  public String getMobilePhoneNumber() {
    return this.mobilePhoneNumber;
  }

  public InvestorInfoStruct setMobilePhoneNumber(String mobilePhoneNumber) {
    this.mobilePhoneNumber = mobilePhoneNumber;
    return this;
  }

  public void unsetMobilePhoneNumber() {
    this.mobilePhoneNumber = null;
  }

  /** Returns true if field mobilePhoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetMobilePhoneNumber() {
    return this.mobilePhoneNumber != null;
  }

  public void setMobilePhoneNumberIsSet(boolean value) {
    if (!value) {
      this.mobilePhoneNumber = null;
    }
  }

  public int getRiskLevel() {
    return this.riskLevel;
  }

  public InvestorInfoStruct setRiskLevel(int riskLevel) {
    this.riskLevel = riskLevel;
    setRiskLevelIsSet(true);
    return this;
  }

  public void unsetRiskLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RISKLEVEL_ISSET_ID);
  }

  /** Returns true if field riskLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __RISKLEVEL_ISSET_ID);
  }

  public void setRiskLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RISKLEVEL_ISSET_ID, value);
  }

  public BankSignInfoStruct getBanksigninfo() {
    return this.banksigninfo;
  }

  public InvestorInfoStruct setBanksigninfo(BankSignInfoStruct banksigninfo) {
    this.banksigninfo = banksigninfo;
    return this;
  }

  public void unsetBanksigninfo() {
    this.banksigninfo = null;
  }

  /** Returns true if field banksigninfo is set (has been assigned a value) and false otherwise */
  public boolean isSetBanksigninfo() {
    return this.banksigninfo != null;
  }

  public void setBanksigninfoIsSet(boolean value) {
    if (!value) {
      this.banksigninfo = null;
    }
  }

  public int getAccountfundinfoSize() {
    return (this.accountfundinfo == null) ? 0 : this.accountfundinfo.size();
  }

  public java.util.Iterator<AccountFundInfoStruct> getAccountfundinfoIterator() {
    return (this.accountfundinfo == null) ? null : this.accountfundinfo.iterator();
  }

  public void addToAccountfundinfo(AccountFundInfoStruct elem) {
    if (this.accountfundinfo == null) {
      this.accountfundinfo = new ArrayList<AccountFundInfoStruct>();
    }
    this.accountfundinfo.add(elem);
  }

  public List<AccountFundInfoStruct> getAccountfundinfo() {
    return this.accountfundinfo;
  }

  public InvestorInfoStruct setAccountfundinfo(List<AccountFundInfoStruct> accountfundinfo) {
    this.accountfundinfo = accountfundinfo;
    return this;
  }

  public void unsetAccountfundinfo() {
    this.accountfundinfo = null;
  }

  /** Returns true if field accountfundinfo is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountfundinfo() {
    return this.accountfundinfo != null;
  }

  public void setAccountfundinfoIsSet(boolean value) {
    if (!value) {
      this.accountfundinfo = null;
    }
  }

  public int getProductpositioninfoSize() {
    return (this.productpositioninfo == null) ? 0 : this.productpositioninfo.size();
  }

  public java.util.Iterator<AccountProductInfoStruct> getProductpositioninfoIterator() {
    return (this.productpositioninfo == null) ? null : this.productpositioninfo.iterator();
  }

  public void addToProductpositioninfo(AccountProductInfoStruct elem) {
    if (this.productpositioninfo == null) {
      this.productpositioninfo = new ArrayList<AccountProductInfoStruct>();
    }
    this.productpositioninfo.add(elem);
  }

  public List<AccountProductInfoStruct> getProductpositioninfo() {
    return this.productpositioninfo;
  }

  public InvestorInfoStruct setProductpositioninfo(List<AccountProductInfoStruct> productpositioninfo) {
    this.productpositioninfo = productpositioninfo;
    return this;
  }

  public void unsetProductpositioninfo() {
    this.productpositioninfo = null;
  }

  /** Returns true if field productpositioninfo is set (has been assigned a value) and false otherwise */
  public boolean isSetProductpositioninfo() {
    return this.productpositioninfo != null;
  }

  public void setProductpositioninfoIsSet(boolean value) {
    if (!value) {
      this.productpositioninfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INVESTORID:
      if (value == null) {
        unsetInvestorid();
      } else {
        setInvestorid((String)value);
      }
      break;

    case MOBILE_PHONE_NUMBER:
      if (value == null) {
        unsetMobilePhoneNumber();
      } else {
        setMobilePhoneNumber((String)value);
      }
      break;

    case RISK_LEVEL:
      if (value == null) {
        unsetRiskLevel();
      } else {
        setRiskLevel((Integer)value);
      }
      break;

    case BANKSIGNINFO:
      if (value == null) {
        unsetBanksigninfo();
      } else {
        setBanksigninfo((BankSignInfoStruct)value);
      }
      break;

    case ACCOUNTFUNDINFO:
      if (value == null) {
        unsetAccountfundinfo();
      } else {
        setAccountfundinfo((List<AccountFundInfoStruct>)value);
      }
      break;

    case PRODUCTPOSITIONINFO:
      if (value == null) {
        unsetProductpositioninfo();
      } else {
        setProductpositioninfo((List<AccountProductInfoStruct>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INVESTORID:
      return getInvestorid();

    case MOBILE_PHONE_NUMBER:
      return getMobilePhoneNumber();

    case RISK_LEVEL:
      return Integer.valueOf(getRiskLevel());

    case BANKSIGNINFO:
      return getBanksigninfo();

    case ACCOUNTFUNDINFO:
      return getAccountfundinfo();

    case PRODUCTPOSITIONINFO:
      return getProductpositioninfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INVESTORID:
      return isSetInvestorid();
    case MOBILE_PHONE_NUMBER:
      return isSetMobilePhoneNumber();
    case RISK_LEVEL:
      return isSetRiskLevel();
    case BANKSIGNINFO:
      return isSetBanksigninfo();
    case ACCOUNTFUNDINFO:
      return isSetAccountfundinfo();
    case PRODUCTPOSITIONINFO:
      return isSetProductpositioninfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InvestorInfoStruct)
      return this.equals((InvestorInfoStruct)that);
    return false;
  }

  public boolean equals(InvestorInfoStruct that) {
    if (that == null)
      return false;

    boolean this_present_investorid = true && this.isSetInvestorid();
    boolean that_present_investorid = true && that.isSetInvestorid();
    if (this_present_investorid || that_present_investorid) {
      if (!(this_present_investorid && that_present_investorid))
        return false;
      if (!this.investorid.equals(that.investorid))
        return false;
    }

    boolean this_present_mobilePhoneNumber = true && this.isSetMobilePhoneNumber();
    boolean that_present_mobilePhoneNumber = true && that.isSetMobilePhoneNumber();
    if (this_present_mobilePhoneNumber || that_present_mobilePhoneNumber) {
      if (!(this_present_mobilePhoneNumber && that_present_mobilePhoneNumber))
        return false;
      if (!this.mobilePhoneNumber.equals(that.mobilePhoneNumber))
        return false;
    }

    boolean this_present_riskLevel = true;
    boolean that_present_riskLevel = true;
    if (this_present_riskLevel || that_present_riskLevel) {
      if (!(this_present_riskLevel && that_present_riskLevel))
        return false;
      if (this.riskLevel != that.riskLevel)
        return false;
    }

    boolean this_present_banksigninfo = true && this.isSetBanksigninfo();
    boolean that_present_banksigninfo = true && that.isSetBanksigninfo();
    if (this_present_banksigninfo || that_present_banksigninfo) {
      if (!(this_present_banksigninfo && that_present_banksigninfo))
        return false;
      if (!this.banksigninfo.equals(that.banksigninfo))
        return false;
    }

    boolean this_present_accountfundinfo = true && this.isSetAccountfundinfo();
    boolean that_present_accountfundinfo = true && that.isSetAccountfundinfo();
    if (this_present_accountfundinfo || that_present_accountfundinfo) {
      if (!(this_present_accountfundinfo && that_present_accountfundinfo))
        return false;
      if (!this.accountfundinfo.equals(that.accountfundinfo))
        return false;
    }

    boolean this_present_productpositioninfo = true && this.isSetProductpositioninfo();
    boolean that_present_productpositioninfo = true && that.isSetProductpositioninfo();
    if (this_present_productpositioninfo || that_present_productpositioninfo) {
      if (!(this_present_productpositioninfo && that_present_productpositioninfo))
        return false;
      if (!this.productpositioninfo.equals(that.productpositioninfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(InvestorInfoStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInvestorid()).compareTo(other.isSetInvestorid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorid, other.investorid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobilePhoneNumber()).compareTo(other.isSetMobilePhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobilePhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobilePhoneNumber, other.mobilePhoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiskLevel()).compareTo(other.isSetRiskLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskLevel, other.riskLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBanksigninfo()).compareTo(other.isSetBanksigninfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBanksigninfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.banksigninfo, other.banksigninfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountfundinfo()).compareTo(other.isSetAccountfundinfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountfundinfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountfundinfo, other.accountfundinfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductpositioninfo()).compareTo(other.isSetProductpositioninfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductpositioninfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productpositioninfo, other.productpositioninfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InvestorInfoStruct(");
    boolean first = true;

    sb.append("investorid:");
    if (this.investorid == null) {
      sb.append("null");
    } else {
      sb.append(this.investorid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobilePhoneNumber:");
    if (this.mobilePhoneNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.mobilePhoneNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("riskLevel:");
    sb.append(this.riskLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("banksigninfo:");
    if (this.banksigninfo == null) {
      sb.append("null");
    } else {
      sb.append(this.banksigninfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountfundinfo:");
    if (this.accountfundinfo == null) {
      sb.append("null");
    } else {
      sb.append(this.accountfundinfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productpositioninfo:");
    if (this.productpositioninfo == null) {
      sb.append("null");
    } else {
      sb.append(this.productpositioninfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (investorid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'investorid' was not present! Struct: " + toString());
    }
    if (mobilePhoneNumber == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mobilePhoneNumber' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'riskLevel' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (banksigninfo != null) {
      banksigninfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InvestorInfoStructStandardSchemeFactory implements SchemeFactory {
    public InvestorInfoStructStandardScheme getScheme() {
      return new InvestorInfoStructStandardScheme();
    }
  }

  private static class InvestorInfoStructStandardScheme extends StandardScheme<InvestorInfoStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InvestorInfoStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INVESTORID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorid = iprot.readString();
              struct.setInvestoridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MOBILE_PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobilePhoneNumber = iprot.readString();
              struct.setMobilePhoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RISK_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.riskLevel = iprot.readI32();
              struct.setRiskLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BANKSIGNINFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.banksigninfo = new BankSignInfoStruct();
              struct.banksigninfo.read(iprot);
              struct.setBanksigninfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCOUNTFUNDINFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.accountfundinfo = new ArrayList<AccountFundInfoStruct>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  AccountFundInfoStruct _elem26;
                  _elem26 = new AccountFundInfoStruct();
                  _elem26.read(iprot);
                  struct.accountfundinfo.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setAccountfundinfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRODUCTPOSITIONINFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.productpositioninfo = new ArrayList<AccountProductInfoStruct>(_list27.size);
                for (int _i28 = 0; _i28 < _list27.size; ++_i28)
                {
                  AccountProductInfoStruct _elem29;
                  _elem29 = new AccountProductInfoStruct();
                  _elem29.read(iprot);
                  struct.productpositioninfo.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setProductpositioninfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRiskLevel()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'riskLevel' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InvestorInfoStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.investorid != null) {
        oprot.writeFieldBegin(INVESTORID_FIELD_DESC);
        oprot.writeString(struct.investorid);
        oprot.writeFieldEnd();
      }
      if (struct.mobilePhoneNumber != null) {
        oprot.writeFieldBegin(MOBILE_PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.mobilePhoneNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RISK_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.riskLevel);
      oprot.writeFieldEnd();
      if (struct.banksigninfo != null) {
        oprot.writeFieldBegin(BANKSIGNINFO_FIELD_DESC);
        struct.banksigninfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.accountfundinfo != null) {
        oprot.writeFieldBegin(ACCOUNTFUNDINFO_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.accountfundinfo.size()));
          for (AccountFundInfoStruct _iter30 : struct.accountfundinfo)
          {
            _iter30.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.productpositioninfo != null) {
        oprot.writeFieldBegin(PRODUCTPOSITIONINFO_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productpositioninfo.size()));
          for (AccountProductInfoStruct _iter31 : struct.productpositioninfo)
          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InvestorInfoStructTupleSchemeFactory implements SchemeFactory {
    public InvestorInfoStructTupleScheme getScheme() {
      return new InvestorInfoStructTupleScheme();
    }
  }

  private static class InvestorInfoStructTupleScheme extends TupleScheme<InvestorInfoStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InvestorInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.investorid);
      oprot.writeString(struct.mobilePhoneNumber);
      oprot.writeI32(struct.riskLevel);
      BitSet optionals = new BitSet();
      if (struct.isSetBanksigninfo()) {
        optionals.set(0);
      }
      if (struct.isSetAccountfundinfo()) {
        optionals.set(1);
      }
      if (struct.isSetProductpositioninfo()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBanksigninfo()) {
        struct.banksigninfo.write(oprot);
      }
      if (struct.isSetAccountfundinfo()) {
        {
          oprot.writeI32(struct.accountfundinfo.size());
          for (AccountFundInfoStruct _iter32 : struct.accountfundinfo)
          {
            _iter32.write(oprot);
          }
        }
      }
      if (struct.isSetProductpositioninfo()) {
        {
          oprot.writeI32(struct.productpositioninfo.size());
          for (AccountProductInfoStruct _iter33 : struct.productpositioninfo)
          {
            _iter33.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InvestorInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.investorid = iprot.readString();
      struct.setInvestoridIsSet(true);
      struct.mobilePhoneNumber = iprot.readString();
      struct.setMobilePhoneNumberIsSet(true);
      struct.riskLevel = iprot.readI32();
      struct.setRiskLevelIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.banksigninfo = new BankSignInfoStruct();
        struct.banksigninfo.read(iprot);
        struct.setBanksigninfoIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.accountfundinfo = new ArrayList<AccountFundInfoStruct>(_list34.size);
          for (int _i35 = 0; _i35 < _list34.size; ++_i35)
          {
            AccountFundInfoStruct _elem36;
            _elem36 = new AccountFundInfoStruct();
            _elem36.read(iprot);
            struct.accountfundinfo.add(_elem36);
          }
        }
        struct.setAccountfundinfoIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.productpositioninfo = new ArrayList<AccountProductInfoStruct>(_list37.size);
          for (int _i38 = 0; _i38 < _list37.size; ++_i38)
          {
            AccountProductInfoStruct _elem39;
            _elem39 = new AccountProductInfoStruct();
            _elem39.read(iprot);
            struct.productpositioninfo.add(_elem39);
          }
        }
        struct.setProductpositioninfoIsSet(true);
      }
    }
  }

}

