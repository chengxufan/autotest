/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tongbaotu.fits.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TransferQueryResultItemStruct implements org.apache.thrift.TBase<TransferQueryResultItemStruct, TransferQueryResultItemStruct._Fields>, java.io.Serializable, Cloneable, Comparable<TransferQueryResultItemStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransferQueryResultItemStruct");

  private static final org.apache.thrift.protocol.TField SERIALNO_FIELD_DESC = new org.apache.thrift.protocol.TField("serialno", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PHYTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("phytime", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField PROCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("procode", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PROMESS_FIELD_DESC = new org.apache.thrift.protocol.TField("promess", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransferQueryResultItemStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransferQueryResultItemStructTupleSchemeFactory());
  }

  public String serialno; // required
  public String phytime; // required
  public int currency; // required
  public int type; // required
  public double amount; // required
  public int procode; // required
  public String promess; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERIALNO((short)1, "serialno"),
    PHYTIME((short)2, "phytime"),
    CURRENCY((short)3, "currency"),
    TYPE((short)4, "type"),
    AMOUNT((short)5, "amount"),
    PROCODE((short)6, "procode"),
    PROMESS((short)7, "promess");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERIALNO
          return SERIALNO;
        case 2: // PHYTIME
          return PHYTIME;
        case 3: // CURRENCY
          return CURRENCY;
        case 4: // TYPE
          return TYPE;
        case 5: // AMOUNT
          return AMOUNT;
        case 6: // PROCODE
          return PROCODE;
        case 7: // PROMESS
          return PROMESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURRENCY_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __AMOUNT_ISSET_ID = 2;
  private static final int __PROCODE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERIALNO, new org.apache.thrift.meta_data.FieldMetaData("serialno", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHYTIME, new org.apache.thrift.meta_data.FieldMetaData("phytime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROCODE, new org.apache.thrift.meta_data.FieldMetaData("procode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROMESS, new org.apache.thrift.meta_data.FieldMetaData("promess", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransferQueryResultItemStruct.class, metaDataMap);
  }

  public TransferQueryResultItemStruct() {
  }

  public TransferQueryResultItemStruct(
    String serialno,
    String phytime,
    int currency,
    int type,
    double amount,
    int procode,
    String promess)
  {
    this();
    this.serialno = serialno;
    this.phytime = phytime;
    this.currency = currency;
    setCurrencyIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.amount = amount;
    setAmountIsSet(true);
    this.procode = procode;
    setProcodeIsSet(true);
    this.promess = promess;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransferQueryResultItemStruct(TransferQueryResultItemStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSerialno()) {
      this.serialno = other.serialno;
    }
    if (other.isSetPhytime()) {
      this.phytime = other.phytime;
    }
    this.currency = other.currency;
    this.type = other.type;
    this.amount = other.amount;
    this.procode = other.procode;
    if (other.isSetPromess()) {
      this.promess = other.promess;
    }
  }

  public TransferQueryResultItemStruct deepCopy() {
    return new TransferQueryResultItemStruct(this);
  }

  @Override
  public void clear() {
    this.serialno = null;
    this.phytime = null;
    setCurrencyIsSet(false);
    this.currency = 0;
    setTypeIsSet(false);
    this.type = 0;
    setAmountIsSet(false);
    this.amount = 0.0;
    setProcodeIsSet(false);
    this.procode = 0;
    this.promess = null;
  }

  public String getSerialno() {
    return this.serialno;
  }

  public TransferQueryResultItemStruct setSerialno(String serialno) {
    this.serialno = serialno;
    return this;
  }

  public void unsetSerialno() {
    this.serialno = null;
  }

  /** Returns true if field serialno is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialno() {
    return this.serialno != null;
  }

  public void setSerialnoIsSet(boolean value) {
    if (!value) {
      this.serialno = null;
    }
  }

  public String getPhytime() {
    return this.phytime;
  }

  public TransferQueryResultItemStruct setPhytime(String phytime) {
    this.phytime = phytime;
    return this;
  }

  public void unsetPhytime() {
    this.phytime = null;
  }

  /** Returns true if field phytime is set (has been assigned a value) and false otherwise */
  public boolean isSetPhytime() {
    return this.phytime != null;
  }

  public void setPhytimeIsSet(boolean value) {
    if (!value) {
      this.phytime = null;
    }
  }

  public int getCurrency() {
    return this.currency;
  }

  public TransferQueryResultItemStruct setCurrency(int currency) {
    this.currency = currency;
    setCurrencyIsSet(true);
    return this;
  }

  public void unsetCurrency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENCY_ISSET_ID);
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENCY_ISSET_ID);
  }

  public void setCurrencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENCY_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public TransferQueryResultItemStruct setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public double getAmount() {
    return this.amount;
  }

  public TransferQueryResultItemStruct setAmount(double amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public int getProcode() {
    return this.procode;
  }

  public TransferQueryResultItemStruct setProcode(int procode) {
    this.procode = procode;
    setProcodeIsSet(true);
    return this;
  }

  public void unsetProcode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROCODE_ISSET_ID);
  }

  /** Returns true if field procode is set (has been assigned a value) and false otherwise */
  public boolean isSetProcode() {
    return EncodingUtils.testBit(__isset_bitfield, __PROCODE_ISSET_ID);
  }

  public void setProcodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROCODE_ISSET_ID, value);
  }

  public String getPromess() {
    return this.promess;
  }

  public TransferQueryResultItemStruct setPromess(String promess) {
    this.promess = promess;
    return this;
  }

  public void unsetPromess() {
    this.promess = null;
  }

  /** Returns true if field promess is set (has been assigned a value) and false otherwise */
  public boolean isSetPromess() {
    return this.promess != null;
  }

  public void setPromessIsSet(boolean value) {
    if (!value) {
      this.promess = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERIALNO:
      if (value == null) {
        unsetSerialno();
      } else {
        setSerialno((String)value);
      }
      break;

    case PHYTIME:
      if (value == null) {
        unsetPhytime();
      } else {
        setPhytime((String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Double)value);
      }
      break;

    case PROCODE:
      if (value == null) {
        unsetProcode();
      } else {
        setProcode((Integer)value);
      }
      break;

    case PROMESS:
      if (value == null) {
        unsetPromess();
      } else {
        setPromess((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERIALNO:
      return getSerialno();

    case PHYTIME:
      return getPhytime();

    case CURRENCY:
      return Integer.valueOf(getCurrency());

    case TYPE:
      return Integer.valueOf(getType());

    case AMOUNT:
      return Double.valueOf(getAmount());

    case PROCODE:
      return Integer.valueOf(getProcode());

    case PROMESS:
      return getPromess();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERIALNO:
      return isSetSerialno();
    case PHYTIME:
      return isSetPhytime();
    case CURRENCY:
      return isSetCurrency();
    case TYPE:
      return isSetType();
    case AMOUNT:
      return isSetAmount();
    case PROCODE:
      return isSetProcode();
    case PROMESS:
      return isSetPromess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransferQueryResultItemStruct)
      return this.equals((TransferQueryResultItemStruct)that);
    return false;
  }

  public boolean equals(TransferQueryResultItemStruct that) {
    if (that == null)
      return false;

    boolean this_present_serialno = true && this.isSetSerialno();
    boolean that_present_serialno = true && that.isSetSerialno();
    if (this_present_serialno || that_present_serialno) {
      if (!(this_present_serialno && that_present_serialno))
        return false;
      if (!this.serialno.equals(that.serialno))
        return false;
    }

    boolean this_present_phytime = true && this.isSetPhytime();
    boolean that_present_phytime = true && that.isSetPhytime();
    if (this_present_phytime || that_present_phytime) {
      if (!(this_present_phytime && that_present_phytime))
        return false;
      if (!this.phytime.equals(that.phytime))
        return false;
    }

    boolean this_present_currency = true;
    boolean that_present_currency = true;
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (this.currency != that.currency)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_amount = true;
    boolean that_present_amount = true;
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_procode = true;
    boolean that_present_procode = true;
    if (this_present_procode || that_present_procode) {
      if (!(this_present_procode && that_present_procode))
        return false;
      if (this.procode != that.procode)
        return false;
    }

    boolean this_present_promess = true && this.isSetPromess();
    boolean that_present_promess = true && that.isSetPromess();
    if (this_present_promess || that_present_promess) {
      if (!(this_present_promess && that_present_promess))
        return false;
      if (!this.promess.equals(that.promess))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TransferQueryResultItemStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSerialno()).compareTo(other.isSetSerialno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialno, other.serialno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhytime()).compareTo(other.isSetPhytime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhytime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phytime, other.phytime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcode()).compareTo(other.isSetProcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.procode, other.procode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPromess()).compareTo(other.isSetPromess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPromess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.promess, other.promess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransferQueryResultItemStruct(");
    boolean first = true;

    sb.append("serialno:");
    if (this.serialno == null) {
      sb.append("null");
    } else {
      sb.append(this.serialno);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phytime:");
    if (this.phytime == null) {
      sb.append("null");
    } else {
      sb.append(this.phytime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    sb.append(this.currency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    sb.append(this.amount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("procode:");
    sb.append(this.procode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("promess:");
    if (this.promess == null) {
      sb.append("null");
    } else {
      sb.append(this.promess);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (serialno == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serialno' was not present! Struct: " + toString());
    }
    if (phytime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'phytime' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'currency' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'type' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'amount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'procode' because it's a primitive and you chose the non-beans generator.
    if (promess == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'promess' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransferQueryResultItemStructStandardSchemeFactory implements SchemeFactory {
    public TransferQueryResultItemStructStandardScheme getScheme() {
      return new TransferQueryResultItemStructStandardScheme();
    }
  }

  private static class TransferQueryResultItemStructStandardScheme extends StandardScheme<TransferQueryResultItemStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransferQueryResultItemStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERIALNO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serialno = iprot.readString();
              struct.setSerialnoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PHYTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phytime = iprot.readString();
              struct.setPhytimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currency = iprot.readI32();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amount = iprot.readDouble();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.procode = iprot.readI32();
              struct.setProcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROMESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.promess = iprot.readString();
              struct.setPromessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCurrency()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'currency' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'amount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetProcode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'procode' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransferQueryResultItemStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serialno != null) {
        oprot.writeFieldBegin(SERIALNO_FIELD_DESC);
        oprot.writeString(struct.serialno);
        oprot.writeFieldEnd();
      }
      if (struct.phytime != null) {
        oprot.writeFieldBegin(PHYTIME_FIELD_DESC);
        oprot.writeString(struct.phytime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
      oprot.writeI32(struct.currency);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.amount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROCODE_FIELD_DESC);
      oprot.writeI32(struct.procode);
      oprot.writeFieldEnd();
      if (struct.promess != null) {
        oprot.writeFieldBegin(PROMESS_FIELD_DESC);
        oprot.writeString(struct.promess);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransferQueryResultItemStructTupleSchemeFactory implements SchemeFactory {
    public TransferQueryResultItemStructTupleScheme getScheme() {
      return new TransferQueryResultItemStructTupleScheme();
    }
  }

  private static class TransferQueryResultItemStructTupleScheme extends TupleScheme<TransferQueryResultItemStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransferQueryResultItemStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.serialno);
      oprot.writeString(struct.phytime);
      oprot.writeI32(struct.currency);
      oprot.writeI32(struct.type);
      oprot.writeDouble(struct.amount);
      oprot.writeI32(struct.procode);
      oprot.writeString(struct.promess);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransferQueryResultItemStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.serialno = iprot.readString();
      struct.setSerialnoIsSet(true);
      struct.phytime = iprot.readString();
      struct.setPhytimeIsSet(true);
      struct.currency = iprot.readI32();
      struct.setCurrencyIsSet(true);
      struct.type = iprot.readI32();
      struct.setTypeIsSet(true);
      struct.amount = iprot.readDouble();
      struct.setAmountIsSet(true);
      struct.procode = iprot.readI32();
      struct.setProcodeIsSet(true);
      struct.promess = iprot.readString();
      struct.setPromessIsSet(true);
    }
  }

}

