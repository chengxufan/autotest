/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tongbaotu.fits.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProductAuditStruct implements org.apache.thrift.TBase<ProductAuditStruct, ProductAuditStruct._Fields>, java.io.Serializable, Cloneable, Comparable<ProductAuditStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductAuditStruct");

  private static final org.apache.thrift.protocol.TField INSTITUTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("institutionID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCTIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("productids", org.apache.thrift.protocol.TType.SET, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductAuditStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductAuditStructTupleSchemeFactory());
  }

  public String institutionID; // required
  public Set<ProductAuditItem> productids; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTITUTION_ID((short)1, "institutionID"),
    PRODUCTIDS((short)2, "productids");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTITUTION_ID
          return INSTITUTION_ID;
        case 2: // PRODUCTIDS
          return PRODUCTIDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTITUTION_ID, new org.apache.thrift.meta_data.FieldMetaData("institutionID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCTIDS, new org.apache.thrift.meta_data.FieldMetaData("productids", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductAuditItem.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductAuditStruct.class, metaDataMap);
  }

  public ProductAuditStruct() {
  }

  public ProductAuditStruct(
    String institutionID,
    Set<ProductAuditItem> productids)
  {
    this();
    this.institutionID = institutionID;
    this.productids = productids;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductAuditStruct(ProductAuditStruct other) {
    if (other.isSetInstitutionID()) {
      this.institutionID = other.institutionID;
    }
    if (other.isSetProductids()) {
      Set<ProductAuditItem> __this__productids = new HashSet<ProductAuditItem>(other.productids.size());
      for (ProductAuditItem other_element : other.productids) {
        __this__productids.add(new ProductAuditItem(other_element));
      }
      this.productids = __this__productids;
    }
  }

  public ProductAuditStruct deepCopy() {
    return new ProductAuditStruct(this);
  }

  @Override
  public void clear() {
    this.institutionID = null;
    this.productids = null;
  }

  public String getInstitutionID() {
    return this.institutionID;
  }

  public ProductAuditStruct setInstitutionID(String institutionID) {
    this.institutionID = institutionID;
    return this;
  }

  public void unsetInstitutionID() {
    this.institutionID = null;
  }

  /** Returns true if field institutionID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstitutionID() {
    return this.institutionID != null;
  }

  public void setInstitutionIDIsSet(boolean value) {
    if (!value) {
      this.institutionID = null;
    }
  }

  public int getProductidsSize() {
    return (this.productids == null) ? 0 : this.productids.size();
  }

  public java.util.Iterator<ProductAuditItem> getProductidsIterator() {
    return (this.productids == null) ? null : this.productids.iterator();
  }

  public void addToProductids(ProductAuditItem elem) {
    if (this.productids == null) {
      this.productids = new HashSet<ProductAuditItem>();
    }
    this.productids.add(elem);
  }

  public Set<ProductAuditItem> getProductids() {
    return this.productids;
  }

  public ProductAuditStruct setProductids(Set<ProductAuditItem> productids) {
    this.productids = productids;
    return this;
  }

  public void unsetProductids() {
    this.productids = null;
  }

  /** Returns true if field productids is set (has been assigned a value) and false otherwise */
  public boolean isSetProductids() {
    return this.productids != null;
  }

  public void setProductidsIsSet(boolean value) {
    if (!value) {
      this.productids = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTITUTION_ID:
      if (value == null) {
        unsetInstitutionID();
      } else {
        setInstitutionID((String)value);
      }
      break;

    case PRODUCTIDS:
      if (value == null) {
        unsetProductids();
      } else {
        setProductids((Set<ProductAuditItem>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTITUTION_ID:
      return getInstitutionID();

    case PRODUCTIDS:
      return getProductids();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTITUTION_ID:
      return isSetInstitutionID();
    case PRODUCTIDS:
      return isSetProductids();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductAuditStruct)
      return this.equals((ProductAuditStruct)that);
    return false;
  }

  public boolean equals(ProductAuditStruct that) {
    if (that == null)
      return false;

    boolean this_present_institutionID = true && this.isSetInstitutionID();
    boolean that_present_institutionID = true && that.isSetInstitutionID();
    if (this_present_institutionID || that_present_institutionID) {
      if (!(this_present_institutionID && that_present_institutionID))
        return false;
      if (!this.institutionID.equals(that.institutionID))
        return false;
    }

    boolean this_present_productids = true && this.isSetProductids();
    boolean that_present_productids = true && that.isSetProductids();
    if (this_present_productids || that_present_productids) {
      if (!(this_present_productids && that_present_productids))
        return false;
      if (!this.productids.equals(that.productids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ProductAuditStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstitutionID()).compareTo(other.isSetInstitutionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstitutionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.institutionID, other.institutionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductids()).compareTo(other.isSetProductids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productids, other.productids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductAuditStruct(");
    boolean first = true;

    sb.append("institutionID:");
    if (this.institutionID == null) {
      sb.append("null");
    } else {
      sb.append(this.institutionID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productids:");
    if (this.productids == null) {
      sb.append("null");
    } else {
      sb.append(this.productids);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (institutionID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'institutionID' was not present! Struct: " + toString());
    }
    if (productids == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'productids' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductAuditStructStandardSchemeFactory implements SchemeFactory {
    public ProductAuditStructStandardScheme getScheme() {
      return new ProductAuditStructStandardScheme();
    }
  }

  private static class ProductAuditStructStandardScheme extends StandardScheme<ProductAuditStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductAuditStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTITUTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.institutionID = iprot.readString();
              struct.setInstitutionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCTIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.productids = new HashSet<ProductAuditItem>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  ProductAuditItem _elem2;
                  _elem2 = new ProductAuditItem();
                  _elem2.read(iprot);
                  struct.productids.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setProductidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductAuditStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.institutionID != null) {
        oprot.writeFieldBegin(INSTITUTION_ID_FIELD_DESC);
        oprot.writeString(struct.institutionID);
        oprot.writeFieldEnd();
      }
      if (struct.productids != null) {
        oprot.writeFieldBegin(PRODUCTIDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.productids.size()));
          for (ProductAuditItem _iter3 : struct.productids)
          {
            _iter3.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductAuditStructTupleSchemeFactory implements SchemeFactory {
    public ProductAuditStructTupleScheme getScheme() {
      return new ProductAuditStructTupleScheme();
    }
  }

  private static class ProductAuditStructTupleScheme extends TupleScheme<ProductAuditStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductAuditStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.institutionID);
      {
        oprot.writeI32(struct.productids.size());
        for (ProductAuditItem _iter4 : struct.productids)
        {
          _iter4.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductAuditStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.institutionID = iprot.readString();
      struct.setInstitutionIDIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.productids = new HashSet<ProductAuditItem>(2*_set5.size);
        for (int _i6 = 0; _i6 < _set5.size; ++_i6)
        {
          ProductAuditItem _elem7;
          _elem7 = new ProductAuditItem();
          _elem7.read(iprot);
          struct.productids.add(_elem7);
        }
      }
      struct.setProductidsIsSet(true);
    }
  }

}

